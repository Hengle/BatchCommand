#version 460
#pragma optionNV(fastmath off)
#extension GL_ARB_separate_shader_objects : enable

layout(location = 0) in vec4 in_attr0;
layout(location = 1) in vec4 in_attr1;
layout(location = 2) in vec4 in_attr2;
layout(location = 3) in vec4 in_attr3;
layout(location = 4) in vec4 in_attr4;
layout(location = 5) flat in vec4 in_attr5;
layout(location = 6) flat in vec4 in_attr6;
layout(location = 7) in vec4 in_attr7;
layout(location = 8) in vec4 in_attr8;
layout(location = 9) in vec4 in_attr9;
layout(location = 10) in vec4 in_attr10;
layout(location = 11) in vec4 in_attr11;

layout(location = 0) out vec4 frag_color0;

layout(std140, binding = 5) uniform fs_cbuf_8 {
    uvec4 fs_cbuf8[4096];
};
layout(std140, binding = 6) uniform fs_cbuf_9 {
    uvec4 fs_cbuf9[4096];
};
layout(std140, binding = 7) uniform fs_cbuf_15 {
    uvec4 fs_cbuf15[4096];
};

layout(binding = 3) uniform sampler2D tex3; //64*64
layout(binding = 4) uniform sampler2DArray tex4; //64*64
layout(binding = 5) uniform sampler2D tex5; //512*512
layout(binding = 6) uniform sampler2D depthTex;

#define ftoi floatBitsToInt
#define ftou floatBitsToUint
#define itof intBitsToFloat
#define utof uintBitsToFloat

void main()
{
	// fs_cbuf8[29] = vec4(287.31113, 1672.1437, 1396.6694, 0);
	// fs_cbuf8[30] = vec4(1, 25000, 25000, 24999);
	// fs_cbuf9[139] = vec4(1, 0, 0, 0);
	// fs_cbuf9[140] = vec4(3, 5, 0, 0);
	// fs_cbuf9[189] = vec4(0.035, 3.5, 1, 10);
	// fs_cbuf9[190] = vec4(0.75, 2.5, 20, 4);
	// fs_cbuf15[1] = vec4(0, 1, 1.8954816, 1);
	// fs_cbuf15[25] = vec4(0.68200004, 0.99055004, 0.63965, 0.12);
	// fs_cbuf15[26] = vec4(1.12035, 1.3145001, 0.66605, 0.45199007);
	// fs_cbuf15[28] = vec4(0.52265936, -0.57410127, -0.63026583, 0);
	// fs_cbuf15[42] = vec4(4.4, 3.4596078, 2.6378438, 0.65);
	// fs_cbuf15[43] = vec4(1, 0.885, 0.65, 1);
	// fs_cbuf15[44] = vec4(0.9, 0.775, 0.575, 1);
	// fs_cbuf15[57] = vec4(-4731.44, 907.7282, 3000, 1);

	bool b_0_0;
	float f_0_6;
	float f_1_9;
	float f_2_16;
	float f_2_7;
	float f_3_11;
	float f_3_20;
	float f_4_3;
	float f_4_8;
	float f_5_11;
	float f_5_2;
	float f_6_1;
	float f_6_7;
	float f_7_5;
	float f_8_2;
	float f_9_2;
	float f_9_3;
	vec2 f2_0_2;
	vec2 f2_0_3;
	vec3 f3_0_0;
	vec4 f4_0_1;
	vec4 f4_0_3;
	vec4 f4_0_4;
	precise float pf_0_11;
	precise float pf_0_12;
	precise float pf_0_13;
	precise float pf_0_16;
	precise float pf_0_18;
	precise float pf_0_20;
	precise float pf_0_24;
	precise float pf_0_6;
	precise float pf_0_8;
	precise float pf_1_11;
	precise float pf_1_19;
	precise float pf_1_23;
	precise float pf_1_27;
	precise float pf_1_5;
	precise float pf_1_8;
	precise float pf_2_12;
	precise float pf_2_3;
	precise float pf_2_6;
	precise float pf_2_7;
	precise float pf_2_8;
	precise float pf_3_0;
	precise float pf_3_11;
	precise float pf_3_3;
	precise float pf_3_5;
	precise float pf_3_7;
	precise float pf_4_0;
	precise float pf_4_2;
	precise float pf_4_3;
	precise float pf_4_8;
	precise float pf_5_1;
	precise float pf_5_2;
	precise float pf_5_7;
	precise float pf_6_0;
	precise float pf_6_1;
	precise float pf_6_2;
	uint u_0_0;
	
	// in_attr1.zw与in_attr1.xy都是采样坐标
	// 1  <=>  uint({vec4(textureQueryLod({tex5 : }, vec2({in_attr1.z : 1.46396}, {in_attr1.w : 3.26268})), 0.0, 0.0).y : 1})
	u_0_0 = uint(vec4(textureQueryLod(tex5, vec2(in_attr1.z, in_attr1.w)), 0.0, 0.0).y);
	// vec4(0.5,0.5,0.5,0.75)  <=>  textureLod({tex5 : }, vec2({in_attr1.z : 1.46396}, {in_attr1.w : 3.26268}), min((float(({u_0_0 : 1} << 8u)) / 256.0), 2.))
	f4_0_1 = textureLod(tex5, vec2(in_attr1.z, in_attr1.w), min((float((u_0_0 << 8u)) / 256.0), 2.));
	
	//in_attr1.xy是tex3/tex4采样坐标基准，按tex5采样结果偏移
	// vec2(0.5,0.5175)  <=>  vec2(((({f4_0_1.x : 0.5} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.x : 0.5}), ((({f4_0_1.w : 0.75} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.y : 0.5}))
	f2_0_2 = vec2((((f4_0_1.x * utof(fs_cbuf9[189].x)) * 2. + (0. - utof(fs_cbuf9[189].x))) + in_attr1.x), (((f4_0_1.w * utof(fs_cbuf9[189].x)) * 2. + (0. - utof(fs_cbuf9[189].x))) + in_attr1.y));
	
	//in_attr2.xy/in_attr2.w是depthTex采样坐标
	// 0.0007924898589035205  <=>  (1.0 / ({in_attr2.w : 1261.8458} * {gl_FragCoord.w : 1}))
	f_0_6 = (1.0 / (in_attr2.w * gl_FragCoord.w));
	// 256  <=>  float((uint({vec4(textureQueryLod({tex3 : }, {f2_0_2 : vec2(0.5,0.5175)}), 0.0, 0.0).y : 1}) << 8u))
	f_2_7 = float((uint(vec4(textureQueryLod(tex3, f2_0_2), 0.0, 0.0).y) << 8u));
	// vec2(0.56595826,0.1917964)  <=>  vec2((({in_attr2.x : 714.15204} * {gl_FragCoord.w : 1}) * {f_0_6 : 0.00079248985}), (({in_attr2.y : 242.01749} * {gl_FragCoord.w : 1}) * {f_0_6 : 0.00079248985}))
	f2_0_3 = vec2(((in_attr2.x * gl_FragCoord.w) * f_0_6), ((in_attr2.y * gl_FragCoord.w) * f_0_6));
	
	// vec4(0.5,0.5,0.5,0.75)  <=>  texture({depthTex : }, {f2_0_3 : vec2(0.56595826,0.1917964)})
	f4_0_3 = texture(depthTex, f2_0_3);
	
	//in_attr6.x是tex4纹理数组的索引
	// 2  <=>  float((uint(clamp(roundEven({in_attr6.x : 2}), float(0.), float(65535.))) & 0xffff))
	f_1_9 = float((uint(clamp(roundEven(in_attr6.x), float(0.), float(65535.))) & 0xffff));
	// vec3(0.5,0.5175,2)  <=>  vec3(((({f4_0_1.x : 0.5} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.x : 0.5}), ((({f4_0_1.w : 0.75} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.y : 0.5}), {f_1_9 : 2})
	f3_0_0 = vec3((((f4_0_1.x * utof(fs_cbuf9[189].x)) * 2. + (0. - utof(fs_cbuf9[189].x))) + in_attr1.x), (((f4_0_1.w * utof(fs_cbuf9[189].x)) * 2. + (0. - utof(fs_cbuf9[189].x))) + in_attr1.y), f_1_9);
	
	// vec4(0.5,0.5,0.5,0.75)  <=>  textureLod({tex4 : }, {f3_0_0 : vec3(0.5,0.5175,2)}, min(({f_2_7 : 256} / 256.0), 2.))
	f4_0_4 = textureLod(tex4, f3_0_0, min((f_2_7 / 256.0), 2.));
	
	// 1 / ((in_attr2.z / in_attr2.w) * fs_cbuf8[30].w - fs_cbuf8[30].y)
	// -0.05047064380050408  <=>  (1.0 / (({in_attr2.z : 1260.8962} * (1.0 / {in_attr2.w : 1261.8458})) * {utof(fs_cbuf8[30].w) : 24999} + (0. - {utof(fs_cbuf8[30].y) : 25000})))
	f_4_3 = (1.0 / ((in_attr2.z * (1.0 / in_attr2.w)) * utof(fs_cbuf8[30].w) + (0. - utof(fs_cbuf8[30].y))));
	
	// dz
	// 1225.84567  <=>  ((0. - {in_attr4.z : 170.82373}) + {utof(fs_cbuf8[29].z) : 1396.6694})
	pf_0_6 = ((0. - in_attr4.z) + utof(fs_cbuf8[29].z));
	
	// alpha系数之一，看不明白，这里使用了in_attr2.z/in_attr2.w
	// (fs_cbuf8[30].z / ((in_attr2.z / in_attr2.w) * fs_cbuf8[30].w - fs_cbuf8[30].y) + (f4_0_3.x * fs_cbuf8[30].w + fs_cbuf8[30].x)) / fs_cbuf9[140].y;
	// 2247.7468000000003  <=>  (({f_4_3 : -0.050470643} * {utof(fs_cbuf8[30].z) : 25000} + ({f4_0_3.x : 0.5} * {utof(fs_cbuf8[30].w) : 24999} + {utof(fs_cbuf8[30].x) : 1})) * (1.0 / {utof(fs_cbuf9[140].y) : 5}))
	pf_1_5 = ((f_4_3 * utof(fs_cbuf8[30].z) + (f4_0_3.x * utof(fs_cbuf8[30].w) + utof(fs_cbuf8[30].x))) * (1.0 / utof(fs_cbuf9[140].y)));
	
	// alpha系数之二，使用in_attr8.z * in_attr0.w对tex4.w进行缩放调节
	// tex4.w * in_attr8.z * in_attr0.w
	// 0.75  <=>  clamp(((({f4_0_4.w : 0.75} * {in_attr8.z : 1}) * {in_attr0.w : 1}) + (0. - 0.)), 0.0, 1.0)
	f_5_2 = clamp((((f4_0_4.w * in_attr8.z) * in_attr0.w) + (0. - 0.)), 0.0, 1.0);
	
	// 输出alpha值，与深度和tex4有关，这里使用in_attr3.x来整体缩放alpha值
	// 0.75  <=>  ((clamp({pf_1_5 : 2247.7468}, 0.0, 1.0) * {f_5_2 : 0.75}) * {in_attr3.x : 1})
	pf_1_8 = ((clamp(pf_1_5, 0.0, 1.0) * f_5_2) * in_attr3.x);
	// False  <=>  ((({pf_1_8 : 0.75} <= {utof(fs_cbuf9[139].z) : 0}) && (! isnan({pf_1_8 : 0.75}))) && (! isnan({utof(fs_cbuf9[139].z) : 0})))
	b_0_0 = (((pf_1_8 <= utof(fs_cbuf9[139].z)) && (! isnan(pf_1_8))) && (! isnan(utof(fs_cbuf9[139].z))));
	
	// 输出alpha为0不输出
	// False  <=>  if(({b_0_0 : False} ? true : false))
	if((b_0_0 ? true : false))
	{
		discard;
	}
	
	// dx
	// -277.38876999999997  <=>  ((0. - {in_attr4.x : 564.6999}) + {utof(fs_cbuf8[29].x) : 287.31113})
	pf_3_0 = ((0. - in_attr4.x) + utof(fs_cbuf8[29].x));
	
	// dy
	// 403.9866000000002  <=>  ((0. - {in_attr4.y : 1268.1571}) + {utof(fs_cbuf8[29].y) : 1672.1437})
	pf_4_0 = ((0. - in_attr4.y) + utof(fs_cbuf8[29].y));
	
	// 输出alpha值，与深度和tex4有关
	// 0.75  <=>  clamp(({pf_1_8 : 0.75} + (0. - 0.)), 0.0, 1.0)
	f_2_16 = clamp((pf_1_8 + (0. - 0.)), 0.0, 1.0);
	
	// dy * dy + dx * dx
	// 240149.69297956  <=>  ({pf_4_0 : 403.9866} * {pf_4_0 : 403.9866} + ({pf_3_0 : -277.38876} * {pf_3_0 : -277.38876}))
	pf_1_11 = (pf_4_0 * pf_4_0 + (pf_3_0 * pf_3_0));
	
	// 1/r = inversesqrt(dz * dz + dy * dy + dx * dx)
	// in_attr4到fs_cbuf8[29]的距离的倒数
	// 0.0007574785  <=>  inversesqrt(({pf_0_6 : 1225.8457} * {pf_0_6 : 1225.8457} + {pf_1_11 : 240149.69}))
	f_3_11 = inversesqrt((pf_0_6 * pf_0_6 + pf_1_11));
	
	// dot((dx/r, dy/r, dz/r), fs_cbuf15[28])
	// in_attr4指向fs_cbuf8[29]的单位向量与fs_cbuf15[28]的点积
	// -0.870734926806386  <=>  (({pf_0_6 : 1225.8457} * {f_3_11 : 0.0007574785}) * {utof(fs_cbuf15[28].z) : -0.63026583} + (({pf_4_0 : 403.9866} * {f_3_11 : 0.0007574785}) * {utof(fs_cbuf15[28].y) : -0.57410127} + (({pf_3_0 : -277.38876} * {f_3_11 : 0.0007574785}) * {utof(fs_cbuf15[28].x) : 0.52265936})))
	pf_0_8 = ((pf_0_6 * f_3_11) * utof(fs_cbuf15[28].z) + ((pf_4_0 * f_3_11) * utof(fs_cbuf15[28].y) + ((pf_3_0 * f_3_11) * utof(fs_cbuf15[28].x))));
	// 0  <=>  clamp(({pf_0_8 : -0.87073493} * 2. + (0. - 1.)), 0.0, 1.0)
	f_4_8 = clamp((pf_0_8 * 2. + (0. - 1.)), 0.0, 1.0);
	
	// 0  <=>  (({f_4_8 : 0} * {in_attr5.y : 175.44524}) * 0.005)
	pf_0_11 = ((f_4_8 * in_attr5.y) * 0.005);
	// (0. - (1.0 / {pf_0_11 : 0}))
	f_6_1 = (0. - (1.0 / pf_0_11));
	
	// 一个与tex4.w有关的系数，这里用到 in_attr8.z * in_attr0.w 与 in_attr5.y
	// 1 - (1 - f4_0_4.w * in_attr8.z * in_attr0.w) / (f_4_8 * in_attr5.y * 0.005)
	// ((1.0 / {pf_0_11 : 0}) * ({pf_0_11 : 0} + (({f4_0_4.w : 0.75} * {in_attr8.z : 1}) * {in_attr0.w : 1})) + {f_6_1 : })
	pf_0_12 = ((1.0 / pf_0_11) * (pf_0_11 + ((f4_0_4.w * in_attr8.z) * in_attr0.w)) + f_6_1);
	
	// 1 - f_4_8
	// 1  <=>  ((0. - {f_4_8 : 0}) + 1.)
	pf_0_13 = ((0. - f_4_8) + 1.);
	
	// 某种混合，pf_0_13 = (1 - f_4_8)， 表达式的值后面作为指数
	// (pf_0_12 + pf_0_13 * (1 - pf_0_12)) * -5
	// ((clamp({pf_0_12 : }, 0.0, 1.0) + ({pf_0_13 : 1} * (0. - clamp({pf_0_12 : }, 0.0, 1.0)) + {pf_0_13 : 1})) * -5.)
	pf_2_3 = ((clamp(pf_0_12, 0.0, 1.0) + (pf_0_13 * (0. - clamp(pf_0_12, 0.0, 1.0)) + pf_0_13)) * -5.);
	
	// 这里使用 in_attr8.x, 整个表达式的值后面作为指数
	// ((fs_cbuf9[190].y - fs_cbuf9[189].y) * in_attr8.x + fs_cbuf9[189].y) * log2(abs(f4_0_4.x))
	// -2.5  <=>  ((((0. - {utof(fs_cbuf9[189].y) : 3.5}) + {utof(fs_cbuf9[190].y) : 2.5}) * {in_attr8.x : 1} + {utof(fs_cbuf9[189].y) : 3.5}) * log2(abs({f4_0_4.x : 0.5})))
	pf_1_19 = ((((0. - utof(fs_cbuf9[189].y)) + utof(fs_cbuf9[190].y)) * in_attr8.x + utof(fs_cbuf9[189].y)) * log2(abs(f4_0_4.x)));
	
	// 看起来也是一种混合，pf_0_13 = (1 - f_4_8)
	// f_4_8 * pf_0_12 + pf_0_13 * (1 - pf_0_12)
	// ({f_4_8 : 0} * (clamp({pf_0_12 : }, 0.0, 1.0) + ({pf_0_13 : 1} * (0. - clamp({pf_0_12 : }, 0.0, 1.0)) + {pf_0_13 : 1})))
	pf_0_16 = (f_4_8 * (clamp(pf_0_12, 0.0, 1.0) + (pf_0_13 * (0. - clamp(pf_0_12, 0.0, 1.0)) + pf_0_13)));
	
	// 指数运算（指数雾？）
	// max(0., (exp2({pf_2_3 : }) + -0.03125))
	f_3_20 = max(0., (exp2(pf_2_3) + -0.03125));
	
	// 这句相当于 fs_cbuf15[43].y - pf_0_18
	// 0.11000007749999996  <=>  (((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * (0. - {utof(fs_cbuf15[44].y) : 0.775}) + {utof(fs_cbuf15[43].y) : 0.885})
	pf_4_2 = (((clamp(f4_0_4.x, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * (0. - utof(fs_cbuf15[44].y)) + utof(fs_cbuf15[43].y));
	// 0.7749999225  <=>  (((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * {utof(fs_cbuf15[44].y) : 0.775})
	pf_0_18 = (((clamp(f4_0_4.x, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * utof(fs_cbuf15[44].y));
	
	// 这里使用 in_attr8.x 与指数运算
	// (in_attr8.x * (fs_cbuf9[190].w - fs_cbuf9[190].z) + fs_cbuf9[190].z) * exp2(pf_1_19)
	// 0.70710676  <=>  (({in_attr8.x : 1} * ((0. - {utof(fs_cbuf9[190].z) : 20}) + {utof(fs_cbuf9[190].w) : 4}) + {utof(fs_cbuf9[190].z) : 20}) * exp2({pf_1_19 : -2.5}))
	pf_3_3 = ((in_attr8.x * ((0. - utof(fs_cbuf9[190].z)) + utof(fs_cbuf9[190].w)) + utof(fs_cbuf9[190].z)) * exp2(pf_1_19));
	
	// 0.89999991  <=>  (((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * {utof(fs_cbuf15[44].x) : 0.9})
	pf_5_1 = (((clamp(f4_0_4.x, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * utof(fs_cbuf15[44].x));
	
	// 0.5749999425  <=>  (((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * {utof(fs_cbuf15[44].z) : 0.575})
	pf_6_0 = (((clamp(f4_0_4.x, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * utof(fs_cbuf15[44].z));
	// 这句相当于 fs_cbuf15[43].z - pf_6_0
	// 0.07500005750000005  <=>  (((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * (0. - {utof(fs_cbuf15[44].z) : 0.575}) + {utof(fs_cbuf15[43].z) : 0.65})
	pf_4_3 = (((clamp(f4_0_4.x, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * (0. - utof(fs_cbuf15[44].z)) + utof(fs_cbuf15[43].z));
	
	// 这句相当于 fs_cbuf15[43].x - pf_5_1
	// 0.10000008999999999  <=>  (((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * (0. - {utof(fs_cbuf15[44].x) : 0.9}) + {utof(fs_cbuf15[43].x) : 1})
	pf_2_6 = (((clamp(f4_0_4.x, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33) * (0. - utof(fs_cbuf15[44].x)) + utof(fs_cbuf15[43].x));
	// 0.949999945  <=>  ({f4_0_4.x : 0.5} * {pf_2_6 : 0.10000009} + {pf_5_1 : 0.8999999})
	pf_2_7 = (f4_0_4.x * pf_2_6 + pf_5_1);
	
	// 2.022325305  <=>  (({pf_3_3 : 0.70710677} * {utof(fs_cbuf15[42].x) : 4.4}) * {utof(fs_cbuf15[42].w) : 0.65})
	pf_5_2 = ((pf_3_3 * utof(fs_cbuf15[42].x)) * utof(fs_cbuf15[42].w));
	// 1.59010293  <=>  (({pf_3_3 : 0.70710677} * {utof(fs_cbuf15[42].y) : 3.4596078}) * {utof(fs_cbuf15[42].w) : 0.65})
	pf_6_1 = ((pf_3_3 * utof(fs_cbuf15[42].y)) * utof(fs_cbuf15[42].w));
	// 1.21240418  <=>  (({pf_3_3 : 0.70710677} * {utof(fs_cbuf15[42].z) : 2.6378438}) * {utof(fs_cbuf15[42].w) : 0.65})
	pf_3_5 = ((pf_3_3 * utof(fs_cbuf15[42].z)) * utof(fs_cbuf15[42].w));
	
	// (min((((0. - {f_4_8 : 0}) + 1.05) * (1.0 / ({pf_0_16 : } * {f_3_20 : } + 1.))), 1.) * (0. - {utof(fs_cbuf15[57].w) : 1}) + {utof(fs_cbuf15[57].w) : 1})
	pf_6_2 = (min((((0. - f_4_8) + 1.05) * (1.0 / (pf_0_16 * f_3_20 + 1.))), 1.) * (0. - utof(fs_cbuf15[57].w)) + utof(fs_cbuf15[57].w));
	
	// pf_5_2 * (1 - fs_cbuf15[1].x) + f4_0_4.x * fs_cbuf15[43].x + (1 - f4_0_4.x) * pf_5_1
	// 2.9723252  <=>  (({pf_5_2 : 2.0223253} * (0. - {utof(fs_cbuf15[1].x) : 0}) + {pf_5_2 : 2.0223253}) + {pf_2_7 : 0.9499999})
	pf_1_23 = ((pf_5_2 * (0. - utof(fs_cbuf15[1].x)) + pf_5_2) + pf_2_7);
	// pf_6_1 * (1 - fs_cbuf15[1].x) + f4_0_4.x * fs_cbuf15[43].y + (1 - f4_0_4.x) * pf_0_18
	// 2.4201028  <=>  (({pf_6_1 : 1.5901029} * (0. - {utof(fs_cbuf15[1].x) : 0}) + {pf_6_1 : 1.5901029}) + ({f4_0_4.x : 0.5} * {pf_4_2 : 0.110000074} + {pf_0_18 : 0.7749999}))
	pf_0_20 = ((pf_6_1 * (0. - utof(fs_cbuf15[1].x)) + pf_6_1) + (f4_0_4.x * pf_4_2 + pf_0_18));
	// pf_3_5 * (1 - fs_cbuf15[1].x) + f4_0_4.x * fs_cbuf15[43].z + (1 - f4_0_4.x) * pf_6_0
	// 1.8249040500000002  <=>  (({pf_3_5 : 1.2124041} * (0. - {utof(fs_cbuf15[1].x) : 0}) + {pf_3_5 : 1.2124041}) + ({f4_0_4.x : 0.5} * {pf_4_3 : 0.075000055} + {pf_6_0 : 0.5749999}))
	pf_2_8 = ((pf_3_5 * (0. - utof(fs_cbuf15[1].x)) + pf_3_5) + (f4_0_4.x * pf_4_3 + pf_6_0));
	
	// ({pf_6_2 : } * -0.9 + 1.)
	pf_3_7 = (pf_6_2 * -0.9 + 1.);
	
	// (0. - ({pf_3_7 : } * {pf_1_23 : 2.972325}))
	f_8_2 = (0. - (pf_3_7 * pf_1_23));
	// (0. - ({pf_3_7 : } * {pf_0_20 : 2.4201028}))
	f_9_2 = (0. - (pf_3_7 * pf_0_20));
	// (0. - ({pf_3_7 : } * {pf_2_8 : 1.8249041}))
	f_9_3 = (0. - (pf_3_7 * pf_2_8));
	
	//下面三句像是在几个颜色间混合（其中tex4.x可视为系数，这部分其实包含了它的一阶、二阶以及指数形式）
	// 颜色：fs_cbuf15[26]、fs_cbuf15[42]、fs_cbuf15[43]、fs_cbuf15[44]、in_attr9
	// 系数：in_attr7.y、fs_cbuf15[42].w、fs_cbuf15[1].x、in_attr9.w
	/*
	- ((fs_cbuf15[26] * in_attr7.y + 
	pf_3_7 * (
	pf_3_3 * fs_cbuf15[42] * fs_cbuf15[42].w * (1 - fs_cbuf15[1].x) + 
	f4_0_4.x * fs_cbuf15[43] + (1 - f4_0_4.x) * ((clamp(f4_0_4.x, 0.1, 0.3) - 0.1) * 3.3499994 + 0.33) * fs_cbuf15[44]
	) * (1 - in_attr7.y)) * in_attr9.w + 
	in_attr9)
	*/
	
	// - ((fs_cbuf15[26].z * in_attr7.y + pf_3_7* pf_2_8 * (1 - in_attr7.y)) * in_attr9.w + in_attr9.z)
	// (0. - ((({f_9_3 : } + {utof(fs_cbuf15[26].z) : 0.66605}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_2_8 : 1.8249041})) * {in_attr9.w : 0.52491} + {in_attr9.z : 0.50397}))
	f_5_11 = (0. - (((f_9_3 + utof(fs_cbuf15[26].z)) * in_attr7.y + (pf_3_7 * pf_2_8)) * in_attr9.w + in_attr9.z));
	
	// - ((fs_cbuf15[26].y * in_attr7.y + pf_3_7* pf_0_20 * (1 - in_attr7.y)) * in_attr9.w + in_attr9.y)
	// (0. - ((({f_9_2 : } + {utof(fs_cbuf15[26].y) : 1.3145001}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_0_20 : 2.4201028})) * {in_attr9.w : 0.52491} + {in_attr9.y : 0.39195}))
	f_6_7 = (0. - (((f_9_2 + utof(fs_cbuf15[26].y)) * in_attr7.y + (pf_3_7 * pf_0_20)) * in_attr9.w + in_attr9.y));
	
	// - ((fs_cbuf15[26].x * in_attr7.y + pf_3_7* pf_1_23 * (1 - in_attr7.y)) * in_attr9.w + in_attr9.x)
	// (0. - ((({f_8_2 : } + {utof(fs_cbuf15[26].x) : 1.12035}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_1_23 : 2.972325})) * {in_attr9.w : 0.52491} + {in_attr9.x : 0.40435}))
	f_7_5 = (0. - (((f_8_2 + utof(fs_cbuf15[26].x)) * in_attr7.y + (pf_3_7 * pf_1_23)) * in_attr9.w + in_attr9.x));
	
	// 下面三句在前面5个颜色的基础上再叠加进一个颜色 in_attr11，系数 in_attr11.w
	
	// 这里的拆分有点问题，实际是一个比较简单的表达式（其实应该是用 - f_5_11 作为基本表达式）
	// in_attr11.z * in_attr11.w + f_5_11 * (in_attr11.w - 1) 
	// (({f_5_11 : } + {in_attr11.z : 0.8335}) * {in_attr11.w : 0} + ((({f_9_3 : } + {utof(fs_cbuf15[26].z) : 0.66605}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_2_8 : 1.8249041})) * {in_attr9.w : 0.52491} + {in_attr9.z : 0.50397}))
	pf_2_12 = ((f_5_11 + in_attr11.z) * in_attr11.w + (((f_9_3 + utof(fs_cbuf15[26].z)) * in_attr7.y + (pf_3_7 * pf_2_8)) * in_attr9.w + in_attr9.z));
	// (({f_6_7 : } + {in_attr11.y : 0.44214}) * {in_attr11.w : 0} + ((({f_9_2 : } + {utof(fs_cbuf15[26].y) : 1.3145001}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_0_20 : 2.4201028})) * {in_attr9.w : 0.52491} + {in_attr9.y : 0.39195}))
	pf_0_24 = ((f_6_7 + in_attr11.y) * in_attr11.w + (((f_9_2 + utof(fs_cbuf15[26].y)) * in_attr7.y + (pf_3_7 * pf_0_20)) * in_attr9.w + in_attr9.y));
	// (({f_7_5 : } + {in_attr11.x : 0.20251}) * {in_attr11.w : 0} + ((({f_8_2 : } + {utof(fs_cbuf15[26].x) : 1.12035}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_1_23 : 2.972325})) * {in_attr9.w : 0.52491} + {in_attr9.x : 0.40435}))
	pf_1_27 = ((f_7_5 + in_attr11.x) * in_attr11.w + (((f_8_2 + utof(fs_cbuf15[26].x)) * in_attr7.y + (pf_3_7 * pf_1_23)) * in_attr9.w + in_attr9.x));
	
	// 下面三句在前面6个颜色基础上又叠加进2个颜色fs_cbuf15[25]、in_attr10，系数 in_attr7.x
	
	// ((0. - (((0. - {pf_1_27 : }) + {utof(fs_cbuf15[25].x) : 0.68200004}) * {in_attr7.x : 0.12} + {pf_1_27 : })) + {in_attr10.x : 4.77344})
	pf_3_11 = ((0. - (((0. - pf_1_27) + utof(fs_cbuf15[25].x)) * in_attr7.x + pf_1_27)) + in_attr10.x);
	// ((0. - (((0. - {pf_0_24 : }) + {utof(fs_cbuf15[25].y) : 0.99055004}) * {in_attr7.x : 0.12} + {pf_0_24 : })) + {in_attr10.y : 3.10352})
	pf_4_8 = ((0. - (((0. - pf_0_24) + utof(fs_cbuf15[25].y)) * in_attr7.x + pf_0_24)) + in_attr10.y);
	// ((0. - (((0. - {pf_2_12 : }) + {utof(fs_cbuf15[25].z) : 0.63965}) * {in_attr7.x : 0.12} + {pf_2_12 : })) + {in_attr10.z : 1.75391})
	pf_5_7 = ((0. - (((0. - pf_2_12) + utof(fs_cbuf15[25].z)) * in_attr7.x + pf_2_12)) + in_attr10.z);
	
	// 最终颜色是在前面8个颜色基础上再叠加进1个颜色fs_cbuf15[25]，系数 in_attr10.w、in_attr7.x
	
	// ({pf_3_11 : } * {in_attr10.w : 0} + (((0. - {pf_1_27 : }) + {utof(fs_cbuf15[25].x) : 0.68200004}) * {in_attr7.x : 0.12} + {pf_1_27 : }))
	frag_color0.x = (pf_3_11 * in_attr10.w + (((0. - pf_1_27) + utof(fs_cbuf15[25].x)) * in_attr7.x + pf_1_27));
	// ({pf_4_8 : } * {in_attr10.w : 0} + (((0. - {pf_0_24 : }) + {utof(fs_cbuf15[25].y) : 0.99055004}) * {in_attr7.x : 0.12} + {pf_0_24 : }))
	frag_color0.y = (pf_4_8 * in_attr10.w + (((0. - pf_0_24) + utof(fs_cbuf15[25].y)) * in_attr7.x + pf_0_24));
	// ({pf_5_7 : } * {in_attr10.w : 0} + (((0. - {pf_2_12 : }) + {utof(fs_cbuf15[25].z) : 0.63965}) * {in_attr7.x : 0.12} + {pf_2_12 : }))
	frag_color0.z = (pf_5_7 * in_attr10.w + (((0. - pf_2_12) + utof(fs_cbuf15[25].z)) * in_attr7.x + pf_2_12));
	// 0.75  <=>  {f_2_16 : 0.75}
	frag_color0.w = f_2_16;
	return;
}
