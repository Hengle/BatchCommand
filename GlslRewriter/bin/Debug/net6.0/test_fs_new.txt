vec4 gl_FragCoord;
layout(location = 0 )in vec4 in_attr0;
layout(location = 1 )in vec4 in_attr1;
layout(location = 2 )in vec4 in_attr2;
layout(location = 3 )in vec4 in_attr3;
layout(location = 4 )in vec4 in_attr4;
layout(location = 5 )flat in vec4 in_attr5;
layout(location = 6 )flat in vec4 in_attr6;
layout(location = 7 )in vec4 in_attr7;
layout(location = 8 )in vec4 in_attr8;
layout(location = 9 )in vec4 in_attr9;
layout(location = 10 )in vec4 in_attr10;
layout(location = 11 )in vec4 in_attr11;
layout(location = 0 )out vec4 frag_color0;
layout(std140, binding = 5 )uniform fs_cbuf_8
{
	uvec4 fs_cbuf8[4096 ];
};
layout(std140, binding = 6 )uniform fs_cbuf_9
{
	uvec4 fs_cbuf9[4096 ];
};
layout(std140, binding = 7 )uniform fs_cbuf_15
{
	uvec4 fs_cbuf15[4096 ];
};
layout(binding = 3 )uniform sampler2D tex3;			//序列帧纹理云中的一张
layout(binding = 4 )uniform sampler2DArray tex4;	//序列帧云
layout(binding = 5 )uniform sampler2D tex5;			//512*512云纹理
layout(binding = 6 )uniform sampler2D depthTex;		//场景深度
void main()
{
	bool b_0 = bool(0 );	// False
	bool b_1 = bool(0 );	// False
	uint u_0 = uint(0 );	// 0
	uint u_1 = uint(0 );	// 0
	float f_0 = float(0 );	// 0
	float f_1 = float(0 );	// 0
	float f_2 = float(0 );	// 0
	float f_3 = float(0 );	// 0
	float f_4 = float(0 );	// 0
	float f_5 = float(0 );	// 0
	float f_6 = float(0 );	// 0
	float f_7 = float(0 );	// 0
	float f_8 = float(0 );	// 0
	float f_9 = float(0 );	// 0
	vec2 f2_0 = vec2(0 );	// vec2(0,0)
	vec3 f3_0 = vec3(0 );	// vec3(0,0,0)
	vec4 f4_0 = vec4(0 );	// vec4(0,0,0,0)
	precise float pf_0 = float(0 );	// 0
	precise float pf_1 = float(0 );	// 0
	precise float pf_2 = float(0 );	// 0
	precise float pf_3 = float(0 );	// 0
	precise float pf_4 = float(0 );	// 0
	precise float pf_5 = float(0 );	// 0
	precise float pf_6 = float(0 );	// 0
	precise float pf_7 = float(0 );	// 0
	precise float pf_8 = float(0 );	// 0
	
	// gl_FragCoord_0 = vec4(320, 240, 0.5, 1.0 );	// vec4(320,240,0.5,1)  <=>  vec4(320, 240, 0.5, 1.0)
	// in_attr0.x  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr0.y  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr0.z  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr0.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr1.x  = float(0.50 );	// 0.5  <=>  float(0.50)
	// in_attr1.y  = float(0.50 );	// 0.5  <=>  float(0.50)
	// in_attr1.z  = float(1.46396 );	// 1.46396  <=>  float(1.46396)
	// in_attr1.w  = float(3.26268 );	// 3.26268  <=>  float(3.26268)
	// in_attr2.x  = float(714.15204 );	// 714.15204  <=>  float(714.15204)
	// in_attr2.y  = float(242.01749 );	// 242.01749  <=>  float(242.01749)
	// in_attr2.z  = float(1260.89624 );	// 1260.89624  <=>  float(1260.89624)
	// in_attr2.w  = float(1261.84583 );	// 1261.84583  <=>  float(1261.84583)
	// in_attr3.x  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr3.y  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr3.z  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr3.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr4.x  = float(564.69989 );	// 564.69989  <=>  float(564.69989)
	// in_attr4.y  = float(1268.1571 );	// 1268.1571  <=>  float(1268.1571)
	// in_attr4.z  = float(170.82373 );	// 170.82373  <=>  float(170.82373)
	// in_attr4.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr5.x  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr5.y  = float(175.44524 );	// 175.44524  <=>  float(175.44524)
	// in_attr5.z  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr5.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr6.x  = float(2.00 );	// 2  <=>  float(2.00)
	// in_attr6.y  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr6.z  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr6.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr7.x  = float(0.12 );	// 0.12  <=>  float(0.12)
	// in_attr7.y  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr7.z  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr7.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr8.x  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr8.y  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr8.z  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr8.w  = float(1.00 );	// 1  <=>  float(1.00)
	// in_attr9.x  = float(0.40435 );	// 0.40435  <=>  float(0.40435)
	// in_attr9.y  = float(0.39195 );	// 0.39195  <=>  float(0.39195)
	// in_attr9.z  = float(0.50397 );	// 0.50397  <=>  float(0.50397)
	// in_attr9.w  = float(0.52491 );	// 0.52491  <=>  float(0.52491)
	// in_attr10.x  = float(4.77344 );	// 4.77344  <=>  float(4.77344)
	// in_attr10.y  = float(3.10352 );	// 3.10352  <=>  float(3.10352)
	// in_attr10.z  = float(1.75391 );	// 1.75391  <=>  float(1.75391)
	// in_attr10.w  = float(0.00 );	// 0  <=>  float(0.00)
	// in_attr11.x  = float(0.20251 );	// 0.20251  <=>  float(0.20251)
	// in_attr11.y  = float(0.44214 );	// 0.44214  <=>  float(0.44214)
	// in_attr11.z  = float(0.8335 );	// 0.8335  <=>  float(0.8335)
	// in_attr11.w  = float(0.00 );	// 0  <=>  float(0.00)
	// fs_cbuf8[29] = vec4(287.31113, 1672.1437, 1396.6694, 0);
	// fs_cbuf8[30] = vec4(1, 25000, 25000, 24999);
	// fs_cbuf9[139] = vec4(1, 0, 0, 0);
	// fs_cbuf9[140] = vec4(3, 5, 0, 0);
	// fs_cbuf9[189] = vec4(0.035, 3.5, 1, 10);
	// fs_cbuf9[190] = vec4(0.75, 2.5, 20, 4);
	// fs_cbuf15[1] = vec4(0, 1, 1.8954816, 1);
	// fs_cbuf15[25] = vec4(0.68200004, 0.99055004, 0.63965, 0.12);
	// fs_cbuf15[26] = vec4(1.12035, 1.3145001, 0.66605, 0.45199007);
	// fs_cbuf15[28] = vec4(0.52265936, -0.57410127, -0.63026583, 0);
	// fs_cbuf15[42] = vec4(4.4, 3.4596078, 2.6378438, 0.65);
	// fs_cbuf15[43] = vec4(1, 0.885, 0.65, 1);
	// fs_cbuf15[44] = vec4(0.9, 0.775, 0.575, 1);
	// fs_cbuf15[57] = vec4(-4731.44, 907.7282, 3000, 1);
	
	//in_attr1.zw是tex5的纹理坐标
	//vec4(4,1,0,0)  <=>  vec4(textureQueryLod({tex5 : }, vec2({in_attr1.z : 1.46396}, {in_attr1.w : 3.26268})), 0.0, 0.0)
	f4_0_0 = vec4(textureQueryLod(tex5, vec2(in_attr1.z, in_attr1.w)), 0.0, 0.0);
	//vec4(0.5,0.5,0.5,1)  <=>  textureLod({tex5 : }, vec2({in_attr1.z : 1.46396}, {in_attr1.w : 3.26268}), min((float((uint({f4_0_0.y : 1}) << 8u)) / 256.0), 2.))
	f4_0_1 = textureLod(tex5, vec2(in_attr1.z, in_attr1.w), min((float((uint(f_2_0) << 8u)) / 256.0), 2.));
	//tex3采样坐标(这张纹理只用来取lod信息，应该就是tex4数组里的一张) in_attr1.xy + (tex5.xw  * fs_cbuf9[189 ].x * 2 - fs_cbuf9[189 ].x)
	//看起来是使用tex5的xw微调输入uv （in_attr1.xy可认为是tex3/tex4的采样坐标基准值）
	//vec4(4,1,0,0)  <=>  vec4(textureQueryLod({tex3 : }, vec2(((({f4_0_1.x : 0.5} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.x : 0.5}), ((({f4_0_1.w : 1} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.y : 0.5}))), 0.0, 0.0)
	f4_0_2 = vec4(textureQueryLod(tex3, vec2((((f4_0_1.x * utof(fs_cbuf9[189].x)) * 2. - utof(fs_cbuf9[189].x)) + in_attr1.x), (((f4_0_1.w * utof(fs_cbuf9[189].x)) * 2. - utof(fs_cbuf9[189].x)) + in_attr1.y))), 0.0, 0.0);
	//深度纹理坐标计算 in_attr2.xy * gl_FragCoord_0.w * 1 / (in_attr2.w * gl_FragCoord_0.w) （gl_FragCoord_0.w是直接能消去的，不知道为啥这样写）
	//vec4(0.5,0.5,0.5,1)  <=>  texture({depthTex : }, vec2((({in_attr2.x : 714.15204} * {gl_FragCoord_0.w : 1}) * (1.0 / ({in_attr2.w : 1261.8458} * {gl_FragCoord_0.w : 1}))), (({in_attr2.y : 242.01749} * {gl_FragCoord_0.w : 1}) * (1.0 / ({in_attr2.w : 1261.8458} * {gl_FragCoord_0.w : 1})))))
	f4_0_3 = texture(depthTex, vec2(((in_attr2.x * gl_FragCoord_0.w) / (in_attr2.w * gl_FragCoord_0.w)), ((in_attr2.y * gl_FragCoord_0.w) / (in_attr2.w * gl_FragCoord_0.w))));
	//使用与tex3纹理相同的uv与在tex3上查询到的lod数据采样，第三个采样坐标数据来自in_attr6.x，应该是序列帧的索引
	//采样坐标：(tex5.xw * 2 - vec(1)) * fs_cbuf9[189].x + in_attr1.xy
	//vec4(0.5,0.5,0.5,1)  <=>  textureLod({tex4 : }, vec3(((({f4_0_1.x : 0.5} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.x : 0.5}), ((({f4_0_1.w : 1} * {utof(fs_cbuf9[189].x) : 0.035}) * 2. + (0. - {utof(fs_cbuf9[189].x) : 0.035})) + {in_attr1.y : 0.5}), float((uint(clamp(roundEven({in_attr6.x : 2}), float(0.), float(65535.))) & 0xffff))), min((float((uint({f4_0_2.y : 1}) << 8u)) / 256.0), 2.))
	f4_0_4 = textureLod(tex4, vec3((((f4_0_1.x * utof(fs_cbuf9[189].x)) * 2. + (0. - utof(fs_cbuf9[189].x))) + in_attr1.x), (((f4_0_1.w * utof(fs_cbuf9[189].x)) * 2. + (0. - utof(fs_cbuf9[189].x))) + in_attr1.y), float((uint(clamp(roundEven(in_attr6.x), float(0.), float(65535.))) & 0xffff))), min((float((uint(f4_0_2.y)<<8u))/256.0), 2.));
	
	//这里计算的是最终输出颜色的alpha值，分解为如下语句
	//1  <=>  clamp((((1.0 / (({in_attr2.z : 1260.8962} * (1.0 / {in_attr2.w : 1261.8458})) * {utof(fs_cbuf8[30].w) : 24999} + (0. - {utof(fs_cbuf8[30].y) : 25000}))) * {utof(fs_cbuf8[30].z) : 25000} + ({f4_0_3.x : 0.5} * {utof(fs_cbuf8[30].w) : 24999} + {utof(fs_cbuf8[30].x) : 1})) * (1.0 / {utof(fs_cbuf9[140].y) : 5})), 0.0, 1.0)
	f_2_11 = clamp(((1 / (in_attr2.z / in_attr2.w * utof(fs_cbuf8[30].w) - utof(fs_cbuf8[30].y))) * utof(fs_cbuf8[30].z) + (f4_0_3.x * utof(fs_cbuf8[30].w) + utof(fs_cbuf8[30].x))) * (1 / utof(fs_cbuf9[140].y)), 0, 1);
	//1  <=>  clamp(((({f4_0_4.w : 1} * {in_attr8.z : 1}) * {in_attr0.w : 1}) + (0. - 0.)), 0.0, 1.0)
	f_5_2 = clamp(f4_0_4.w * in_attr8.z * in_attr0.w + 0, 0, 1);
	//False  <=>  (((((({f_2_11 : 1} * {f_5_2 : 1}) * {in_attr3.x : 1}) <= {utof(fs_cbuf9[139].z) : 0}) && (! isnan((({f_2_11 : 1} * {f_5_2 : 1}) * {in_attr3.x : 1})))) && (! isnan({utof(fs_cbuf9[139].z) : 0}))) ? true : false)
	b_1_0 = ((((((f_2_11 * f_5_2) * in_attr3.x) <= utof(fs_cbuf9[139].z)) && (! isnan(((f_2_11 * f_5_2) * in_attr3.x)))) && (! isnan(utof(fs_cbuf9[139].z)))) ? true : false);
	if(b_1_0 )
	{
		discard;
	}
	//1  <=>  clamp(((({f_2_11 : 1} * {f_5_2 : 1}) * {in_attr3.x : 1}) + (0. - 0.)), 0.0, 1.0)
	f_2_16 = clamp(f_2_11 * f_5_2 * in_attr3.x + 0, 0, 1);


	//可能是三维空间距离 length(fs_cbuf8[29] - in_attr4), inversesqrt用于后续计算单位向量
	//0.0007574785  <=>  inversesqrt((((0. - {in_attr4.z : 170.82373}) + {utof(fs_cbuf8[29].z) : 1396.6694}) * ((0. - {in_attr4.z : 170.82373}) + {utof(fs_cbuf8[29].z) : 1396.6694}) + (((0. - {in_attr4.y : 1268.1571}) + {utof(fs_cbuf8[29].y) : 1672.1437}) * ((0. - {in_attr4.y : 1268.1571}) + {utof(fs_cbuf8[29].y) : 1672.1437}) + (((0. - {in_attr4.x : 564.6999}) + {utof(fs_cbuf8[29].x) : 287.31113}) * ((0. - {in_attr4.x : 564.6999}) + {utof(fs_cbuf8[29].x) : 287.31113})))))
	f_3_11 = inversesqrt((((0. - in_attr4.z) + utof(fs_cbuf8[29].z)) * ((0. - in_attr4.z) + utof(fs_cbuf8[29].z)) + (((0. - in_attr4.y) + utof(fs_cbuf8[29].y)) * ((0. - in_attr4.y) + utof(fs_cbuf8[29].y)) + (((0. - in_attr4.x) + utof(fs_cbuf8[29].x)) * ((0. - in_attr4.x) + utof(fs_cbuf8[29].x))))));
	//dot((dx/dist, dy/dist, dz/dist), fs_cbuf15[28]) (dx/dist, dy/dist, dz/dist)是单位矢量，从in_attr4指向fs_cbuf8[29]的矢量
	//dot((dx/dist, dy/dist, dz/dist), fs_cbuf15[28]) * 2 - 1
	//0  <=>  clamp((((((0. - {in_attr4.z : 170.82373}) + {utof(fs_cbuf8[29].z) : 1396.6694}) * {f_3_11 : 0.0007574785}) * {utof(fs_cbuf15[28].z) : -0.63026583} + ((((0. - {in_attr4.y : 1268.1571}) + {utof(fs_cbuf8[29].y) : 1672.1437}) * {f_3_11 : 0.0007574785}) * {utof(fs_cbuf15[28].y) : -0.57410127} + ((((0. - {in_attr4.x : 564.6999}) + {utof(fs_cbuf8[29].x) : 287.31113}) * {f_3_11 : 0.0007574785}) * {utof(fs_cbuf15[28].x) : 0.52265936}))) * 2. + (0. - 1.)), 0.0, 1.0)
	f_4_8 = clamp((((((0. - in_attr4.z) + utof(fs_cbuf8[29].z)) * f_3_11) * utof(fs_cbuf15[28].z) + ((((0. - in_attr4.y) + utof(fs_cbuf8[29].y)) * f_3_11) * utof(fs_cbuf15[28].y) + ((((0. - in_attr4.x) + utof(fs_cbuf8[29].x)) * f_3_11) * utof(fs_cbuf15[28].x)))) * 2. + (0. - 1.)), 0.0, 1.0);
	//(1.0 / (({f_4_8 : 0} * {in_attr5.y : 175.44524}) * 0.005))
	f_5_3 = 1.0 / (f_4_8 * in_attr5.y * 0.005); //难道是迭代步数？
	
	//单句全部展开太复杂，分解成如下语句
	//0.9999998800000001  <=>  ((clamp({f4_0_4.x : 0.5}, 0.1, 0.3) + -0.1) * 3.3499994 + 0.33)
	pf_2_5 = (clamp(f4_0_4.x, 0.1, 0.3) - 0.1) * 3.3499994 + 0.33;
	//这句看起来是个特殊混合操作，tex4.x * (1 - pf_2_5 * 90%) + pf_2_5 * 90%
	//0.949999945  <=>  ({f4_0_4.x : 0.5} * ({pf_2_5 : 0.9999999} * (0. - {utof(fs_cbuf15[44].x) : 0.9}) + {utof(fs_cbuf15[43].x) : 1}) + ({pf_2_5 : 0.9999999} * {utof(fs_cbuf15[44].x) : 0.9}))
	pf_2_7 = f4_0_4.x * (pf_2_5 * (0 - utof(fs_cbuf15[44].x)) + utof(fs_cbuf15[43].x)) + (pf_2_5 * utof(fs_cbuf15[44].x));
	//使用in_attr8.x来选择fs_cbuf9[190].w与fs_cbuf9[190].z之间的一个值，0对应最大值，1对应最小值
	//4  <=>  ({in_attr8.x : 1} * ((0. - {utof(fs_cbuf9[190].z) : 20}) + {utof(fs_cbuf9[190].w) : 4}) + {utof(fs_cbuf9[190].z) : 20})
	pf_3_2 = in_attr8.x * (0 - utof(fs_cbuf9[190].z) + utof(fs_cbuf9[190].w)) + utof(fs_cbuf9[190].z);
	//0.082085  <=>  exp2(((((0. - {utof(fs_cbuf9[189].y) : 3.5}) + {utof(fs_cbuf9[190].y) : 2.5}) * {in_attr8.x : 1} + {utof(fs_cbuf9[189].y) : 3.5}) * log2(abs({f4_0_4.x : 0.5}))))
	f_0_12 = exp2(((utof(fs_cbuf9[190].y) - utof(fs_cbuf9[189].y)) * in_attr8.x + utof(fs_cbuf9[189].y)) * log2(abs(f4_0_4.x)));
	//0.32834  <=>  ({pf_3_2 : 4} * {f_0_12 : 0.082085})
	pf_3_3 = pf_3_2 * f_0_12;
	
	//0.9390524  <=>  (({pf_3_3 : 0.32834} * {utof(fs_cbuf15[42].x) : 4.4}) * {utof(fs_cbuf15[42].w) : 0.65})
	pf_5_2 = pf_3_3 * utof(fs_cbuf15[42].x) * utof(fs_cbuf15[42].w);
	//1.8890523  <=>  (({pf_5_2 : 0.9390524} * (0. - {utof(fs_cbuf15[1].x) : 0}) + {pf_5_2 : 0.9390524}) + {pf_2_7 : 0.9499999})
	pf_1_23 = pf_5_2 * (0 - utof(fs_cbuf15[1].x)) + pf_5_2 + pf_2_7;

	//单句全部展开太复杂，分解成如下几句
	//0.7383530050000001  <=>  (({pf_3_3 : 0.32834} * {utof(fs_cbuf15[42].y) : 3.4596078}) * {utof(fs_cbuf15[42].w) : 0.65})
	pf_6_1 = pf_3_3 * utof(fs_cbuf15[42].y) * utof(fs_cbuf15[42].w);
	//0.829999937  <=>  ({f4_0_4.x : 0.5} * ({pf_2_5 : 0.9999999} * (0. - {utof(fs_cbuf15[44].y) : 0.775}) + {utof(fs_cbuf15[43].y) : 0.885}) + ({pf_2_5 : 0.9999999} * {utof(fs_cbuf15[44].y) : 0.775}))
	pf_0_19 = f4_0_4.x * (pf_2_5 * (0 - utof(fs_cbuf15[44].y)) + utof(fs_cbuf15[43].y)) + pf_2_5 * utof(fs_cbuf15[44].y);
	//1.5683529  <=>  (({pf_6_1 : 0.738353} * (0. - {utof(fs_cbuf15[1].x) : 0}) + {pf_6_1 : 0.738353}) + {pf_0_19 : 0.8299999})
	pf_0_20 = pf_6_1 * (0 - utof(fs_cbuf15[1].x)) + pf_6_1 + pf_0_19;

	//单句全部展开太复杂，分解成如下语句
	//0.5629712400000001  <=>  (({pf_3_3 : 0.32834} * {utof(fs_cbuf15[42].z) : 2.6378438}) * {utof(fs_cbuf15[42].w) : 0.65})
	pf_3_5 = pf_3_3 * utof(fs_cbuf15[42].z) * utof(fs_cbuf15[42].w);
	//0.6124999275  <=>  ({f4_0_4.x : 0.5} * ({pf_2_5 : 0.9999999} * (0. - {utof(fs_cbuf15[44].z) : 0.575}) + {utof(fs_cbuf15[43].z) : 0.65}) + ({pf_2_5 : 0.9999999} * {utof(fs_cbuf15[44].z) : 0.575}))
	pf_4_4 = f4_0_4.x * (pf_2_5 * (0 - utof(fs_cbuf15[44].z)) + utof(fs_cbuf15[43].z)) + pf_2_5 * utof(fs_cbuf15[44].z);
	//1.1754711800000002  <=>  (({pf_3_5 : 0.56297123} * (0. - {utof(fs_cbuf15[1].x) : 0}) + {pf_3_5 : 0.56297123}) + {pf_4_4 : 0.61249995})
	pf_2_8 = pf_3_5 * (0 - utof(fs_cbuf15[1].x)) + pf_3_5 + pf_4_4;

	//单句全部展开太复杂，分解为如下语句
	//clamp(({f_5_3 : } * ((({f_4_8 : 0} * {in_attr5.y : 175.44524}) * 0.005) + (({f4_0_4.w : 1} * {in_attr8.z : 1}) * {in_attr0.w : 1})) + (0. - {f_5_3 : })), 0.0, 1.0)
	f_5_4 = clamp((f_5_3 * ((f_4_8 * in_attr5.y * 0.005) + (f4_0_4.w * in_attr8.z * in_attr0.w)) + (0. - f_5_3)), 0.0, 1.0);
	//({f_5_4 : } + (((0. - {f_4_8 : 0}) + 1.) * (0. - {f_5_4 : }) + ((0. - {f_4_8 : 0}) + 1.)))
	pf_0_15 = f_5_4 + ((1. - f_4_8) * (0. - f_5_4) + (1. - f_4_8));
	//(1.0 / (({f_4_8 : 0} * {pf_0_15 : }) * max(0., (exp2(({pf_0_15 : } * -5.)) + -0.03125)) + 1.))
	f_3_22 = 1 / (f_4_8 * pf_0_15 * max(0, exp2(pf_0_15 * -5) - 0.03125) + 1);
	//((min((((0. - {f_4_8 : 0}) + 1.05) * {f_3_22 : }), 1.) * (0. - {utof(fs_cbuf15[57].w) : 1}) + {utof(fs_cbuf15[57].w) : 1}) * -0.9 + 1.)
	pf_3_7 = (min(((0 - f_4_8) + 1.05) * f_3_22, 1) * (0 - utof(fs_cbuf15[57].w)) + utof(fs_cbuf15[57].w)) * -0.9 + 1;

	//单句全部展开太复杂，分解为如下语句
	//((((0. - ({pf_3_7 : } * {pf_1_23 : 1.8890523})) + {utof(fs_cbuf15[26].x) : 1.12035}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_1_23 : 1.8890523})) * {in_attr9.w : 0.52491} + {in_attr9.x : 0.40435})
	pf_1_26 = (((0. - (pf_3_7 * pf_1_23)) + utof(fs_cbuf15[26].x)) * in_attr7.y + (pf_3_7 * pf_1_23)) * in_attr9.w + in_attr9.x;
	//(((0. - {pf_1_26 : }) + {in_attr11.x : 0.20251}) * {in_attr11.w : 0} + {pf_1_26 : })
	pf_1_27 = ((0. - pf_1_26) + in_attr11.x) * in_attr11.w + pf_1_26;
	//(((0. - {pf_1_27 : }) + {utof(fs_cbuf15[25].x) : 0.68200004}) * {in_attr7.x : 0.12} + {pf_1_27 : })
	pf_1_28 = ((0. - pf_1_27) + utof(fs_cbuf15[25].x)) * in_attr7.x + pf_1_27;
	//(((0. - {pf_1_28 : }) + {in_attr10.x : 4.77344}) * {in_attr10.w : 0} + {pf_1_28 : })
	pf_1_29 = ((0. - pf_1_28) + in_attr10.x) * in_attr10.w + pf_1_28;
	frag_color0.x = pf_1_29;

	//单句全部展开太复杂，分解为如下语句
	//((((0. - ({pf_3_7 : } * {pf_0_20 : 1.5683529})) + {utof(fs_cbuf15[26].y) : 1.3145001}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_0_20 : 1.5683529})) * {in_attr9.w : 0.52491} + {in_attr9.y : 0.39195})
	pf_0_23 = (((0. - (pf_3_7 * pf_0_20)) + utof(fs_cbuf15[26].y)) * in_attr7.y + (pf_3_7 * pf_0_20)) * in_attr9.w + in_attr9.y;
	//(((0. - {pf_0_23 : }) + {in_attr11.y : 0.44214}) * {in_attr11.w : 0} + {pf_0_23 : })
	pf_0_24 = ((0. - pf_0_23) + in_attr11.y) * in_attr11.w + pf_0_23;
	//(((0. - {pf_0_24 : }) + {utof(fs_cbuf15[25].y) : 0.99055004}) * {in_attr7.x : 0.12} + {pf_0_24 : })
	pf_0_25 = ((0. - pf_0_24) + utof(fs_cbuf15[25].y)) * in_attr7.x + pf_0_24;
	//(((0. - {pf_0_25 : }) + {in_attr10.y : 3.10352}) * {in_attr10.w : 0} + {pf_0_25 : })
	pf_0_26 = ((0. - pf_0_25) + in_attr10.y) * in_attr10.w + pf_0_25;
	frag_color0.y = pf_0_26;

	//单句全部展开太复杂，分解为如下语句
	//((((0. - ({pf_3_7 : } * {pf_2_8 : 1.1754712})) + {utof(fs_cbuf15[26].z) : 0.66605}) * {in_attr7.y : 0} + ({pf_3_7 : } * {pf_2_8 : 1.1754712})) * {in_attr9.w : 0.52491} + {in_attr9.z : 0.50397})
	pf_2_11 = (((0. - (pf_3_7 * pf_2_8)) + utof(fs_cbuf15[26].z)) * in_attr7.y + (pf_3_7 * pf_2_8)) * in_attr9.w + in_attr9.z;
	//(((0. - {pf_2_11 : }) + {in_attr11.z : 0.8335}) * {in_attr11.w : 0} + {pf_2_11 : })
	pf_2_12 = ((0. - pf_2_11) + in_attr11.z) * in_attr11.w + pf_2_11;
	//(((0. - {pf_2_12 : }) + {utof(fs_cbuf15[25].z) : 0.63965}) * {in_attr7.x : 0.12} + {pf_2_12 : })
	pf_2_13 = ((0. - pf_2_12) + utof(fs_cbuf15[25].z)) * in_attr7.x + pf_2_12;
	//(((0. - {pf_2_13 : }) + {in_attr10.z : 1.75391}) * {in_attr10.w : 0} + {pf_2_13 : })
	pf_2_14 = ((0. - pf_2_13) + in_attr10.z) * in_attr10.w + pf_2_13;
	frag_color0.z = pf_2_14;

	frag_color0.w  = f_2_16;
	return;
} 
