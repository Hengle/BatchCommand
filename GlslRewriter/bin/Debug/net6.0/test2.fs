#version 460
#pragma optionNV(fastmath off)
#extension GL_ARB_separate_shader_objects : enable
layout(location = 0) in vec4 in_attr0;
layout(location = 1) in vec4 in_attr1;
layout(location = 2) in vec4 in_attr2;
layout(location = 3) in vec4 in_attr3;
layout(location = 4) in vec4 in_attr4;
layout(location = 5) flat in vec4 in_attr5;
layout(location = 6) flat in vec4 in_attr6;
layout(location = 7) in vec4 in_attr7;
layout(location = 8) in vec4 in_attr8;
layout(location = 9) in vec4 in_attr9;
layout(location = 10) in vec4 in_attr10;
layout(location = 11) in vec4 in_attr11;
layout(location = 12) in vec4 in_attr12;
layout(location = 0) out vec4 frag_color0;
layout(location = 1) out vec4 frag_color1;
layout(location = 2) out vec4 frag_color2;
layout(location = 3) out vec4 frag_color3;
layout(location = 4) out vec4 frag_color4;
layout(location = 5) out vec4 frag_color5;
layout(location = 6) out vec4 frag_color6;
layout(location = 7) out vec4 frag_color7;
layout(std140, binding = 5) uniform fs_cbuf_8 { uvec4 fs_cbuf8[4096]; };
layout(std140, binding = 6) uniform fs_cbuf_9 { uvec4 fs_cbuf9[4096]; };
layout(std140, binding = 7) uniform fs_cbuf_15 { uvec4 fs_cbuf15[4096]; };
layout(binding = 3) uniform sampler2D tex3;
layout(binding = 4) uniform sampler2DArray tex4;
layout(binding = 5) uniform sampler2D tex5;
layout(binding = 6) uniform sampler2D tex6;
#define ftoi floatBitsToInt
#define ftou floatBitsToUint
#define itof intBitsToFloat
#define utof uintBitsToFloat
void main() {
  bool b_0 = bool(0);
  bool b_1 = bool(0);
  uint u_0 = uint(0);
  uint u_1 = uint(0);
  float f_0 = float(0);
  float f_1 = float(0);
  float f_2 = float(0);
  float f_3 = float(0);
  float f_4 = float(0);
  float f_5 = float(0);
  float f_6 = float(0);
  float f_7 = float(0);
  float f_8 = float(0);
  float f_9 = float(0);
  float f_10 = float(0);
  vec2 f2_0 = vec2(0);
  vec3 f3_0 = vec3(0);
  vec4 f4_0 = vec4(0);
  precise float pf_0 = float(0);
  precise float pf_1 = float(0);
  precise float pf_2 = float(0);
  precise float pf_3 = float(0);
  precise float pf_4 = float(0);
  precise float pf_5 = float(0);
  precise float pf_6 = float(0);
  f_0 = in_attr1.z;
  f_1 = in_attr1.w;
  f2_0 = vec2(f_0, f_1);
  f4_0 = vec4(textureQueryLod(tex5, f2_0), 0.0, 0.0);
  f_2 = f4_0.y;
  u_0 = uint(f_2);
  u_0 = u_0 << 8u;
  f_2 = float(u_0);
  pf_0 = f_2 * 0.00390625f;
  f_2 = min(pf_0, 2.f);
  f2_0 = vec2(f_0, f_1);
  f4_0 = textureLod(tex5, f2_0, f_2);
  f_0 = f4_0.x;
  f_1 = f4_0.w;
  f_2 = in_attr1.x;
  f_3 = in_attr1.y;
  f_4 = utof(fs_cbuf9[189].x);
  pf_0 = f_0 * f_4;
  f_0 = utof(fs_cbuf9[189].x);
  pf_1 = f_1 * f_0;
  f_0 = utof(fs_cbuf9[189].x);
  f_0 = 0.f - (f_0);
  pf_0 = fma(pf_0, 2.f, f_0);
  f_0 = utof(fs_cbuf9[189].x);
  f_0 = 0.f - (f_0);
  pf_1 = fma(pf_1, 2.f, f_0);
  pf_0 = pf_0 + f_2;
  pf_1 = pf_1 + f_3;
  f2_0 = vec2(pf_0, pf_1);
  f4_0 = vec4(textureQueryLod(tex3, f2_0), 0.0, 0.0);
  f_0 = f4_0.y;
  u_0 = uint(f_0);
  u_0 = u_0 << 8u;
  f_0 = in_attr2.w;
  f_1 = gl_FragCoord.w;
  f_0 = f_0 * f_1;
  f_1 = in_attr6.x;
  f_0 = (1.0f) / f_0;
  f_1 = roundEven(f_1);
  f_1 = min(max(f_1, float(0.f)), float(65535.f));
  u_1 = uint(f_1);
  f_1 = in_attr2.x;
  f_2 = gl_FragCoord.w;
  f_1 = f_1 * f_2;
  f_1 = f_1 * f_0;
  f_2 = in_attr2.y;
  f_3 = gl_FragCoord.w;
  f_2 = f_2 * f_3;
  f_0 = f_2 * f_0;
  f_2 = float(u_0);
  pf_2 = f_2 * 0.00390625f;
  f_2 = min(pf_2, 2.f);
  f_3 = float(u_1 & 0xffff);
  f3_0 = vec3(pf_0, pf_1, f_3);
  f4_0 = textureLod(tex4, f3_0, f_2);
  f_2 = f4_0.x;
  f_3 = f4_0.w;
  f2_0 = vec2(f_1, f_0);
  f4_0 = texture(tex6, f2_0);
  f_0 = f4_0.x;
  f_1 = in_attr2.w;
  f_4 = in_attr0.w;
  f_5 = in_attr2.z;
  f_6 = in_attr10.y;
  f_7 = in_attr10.x;
  f_1 = (1.0f) / f_1;
  f_8 = 0.f - (f_7);
  pf_0 = f_6 + f_8;
  f_8 = (1.0f) / pf_0;
  pf_0 = f_5 * f_1;
  f_1 = utof(fs_cbuf9[140].y);
  f_1 = (1.0f) / f_1;
  f_5 = utof(fs_cbuf8[30].y);
  f_9 = utof(fs_cbuf8[30].w);
  f_5 = 0.f - (f_5);
  pf_0 = fma(pf_0, f_9, f_5);
  f_5 = (1.0f) / pf_0;
  pf_0 = f_3 * f_4;
  f_3 = in_attr8.z;
  f_4 = min(pf_0, f_6);
  f_6 = in_attr3.x;
  f_4 = max(f_4, f_7);
  f_9 = utof(fs_cbuf8[30].x);
  f_10 = utof(fs_cbuf8[30].w);
  pf_1 = fma(f_0, f_10, f_9);
  f_0 = 0.f - (f_7);
  pf_2 = f_0 + f_4;
  f_0 = in_attr4.x;
  f_4 = utof(fs_cbuf8[30].z);
  pf_1 = fma(f_5, f_4, pf_1);
  pf_2 = pf_2 * f_8;
  pf_1 = pf_1 * f_1;
  f_1 = min(max(pf_1, 0.0), 1.0);
  pf_1 = pf_2 * f_3;
  f_3 = min(max(pf_1, 0.0), 1.0);
  f_4 = in_attr5.y;
  pf_1 = f_1 * f_3;
  f_1 = in_attr4.y;
  pf_1 = pf_1 * f_6;
  f_3 = in_attr4.z;
  f_5 = utof(fs_cbuf9[139].z);
  b_0 = pf_1 <= f_5 && !isnan(pf_1) && !isnan(f_5);
  b_1 = b_0 ? true : false;
  if (b_1) {
    discard;
  }
  f_5 = utof(fs_cbuf8[29].x);
  f_0 = 0.f - (f_0);
  pf_2 = f_0 + f_5;
  f_0 = utof(fs_cbuf8[29].y);
  f_1 = 0.f - (f_1);
  pf_3 = f_1 + f_0;
  f_0 = 0.f - (0.f);
  pf_1 = pf_1 + f_0;
  f_0 = min(max(pf_1, 0.0), 1.0);
  pf_1 = pf_2 * pf_2;
  f_1 = utof(fs_cbuf8[29].z);
  f_3 = 0.f - (f_3);
  pf_4 = f_3 + f_1;
  f_1 = utof(fs_cbuf9[190].w);
  f_3 = utof(fs_cbuf9[190].z);
  f_3 = 0.f - (f_3);
  pf_5 = f_3 + f_1;
  pf_1 = fma(pf_3, pf_3, pf_1);
  pf_1 = fma(pf_4, pf_4, pf_1);
  f_1 = inversesqrt(pf_1);
  pf_1 = pf_2 * f_1;
  pf_2 = pf_3 * f_1;
  pf_3 = pf_4 * f_1;
  f_1 = utof(fs_cbuf15[28].x);
  pf_1 = pf_1 * f_1;
  f_1 = utof(fs_cbuf9[190].y);
  f_3 = utof(fs_cbuf9[189].y);
  f_3 = 0.f - (f_3);
  pf_4 = f_3 + f_1;
  f_1 = utof(fs_cbuf15[28].y);
  pf_1 = fma(pf_2, f_1, pf_1);
  f_1 = utof(fs_cbuf15[28].z);
  pf_1 = fma(pf_3, f_1, pf_1);
  f_1 = in_attr8.x;
  f_3 = 0.f - (1.f);
  pf_1 = fma(pf_1, 2.f, f_3);
  f_3 = min(max(pf_1, 0.0), 1.0);
  pf_1 = f_3 * f_4;
  pf_1 = pf_1 * 0.005f;
  f_4 = (1.0f) / pf_1;
  pf_0 = pf_1 + pf_0;
  f_5 = utof(fs_cbuf9[189].y);
  pf_1 = fma(pf_4, f_1, f_5);
  f_5 = utof(fs_cbuf9[190].z);
  pf_2 = fma(f_1, pf_5, f_5);
  f_1 = 0.f - (f_3);
  pf_3 = f_1 + 1.f;
  f_1 = 0.f - (f_4);
  pf_0 = fma(f_4, pf_0, f_1);
  f_1 = min(max(pf_0, 0.0), 1.0);
  f_4 = 0.f - (pf_3);
  pf_0 = fma(f_1, f_4, pf_3);
  pf_0 = f_1 + pf_0;
  f_1 = min(f_2, 0.3f);
  pf_3 = pf_0 * -5.f;
  f_1 = max(f_1, 0.1f);
  f_4 = abs(f_2);
  f_4 = log2(f_4);
  pf_4 = f_1 + -0.1f;
  f_1 = exp2(pf_3);
  pf_3 = fma(pf_4, 3.3499994f, 0.33f);
  pf_1 = pf_1 * f_4;
  f_4 = utof(fs_cbuf15[43].x);
  f_5 = utof(fs_cbuf15[44].x);
  f_5 = 0.f - (f_5);
  pf_4 = fma(pf_3, f_5, f_4);
  pf_5 = f_1 + -0.03125f;
  f_1 = utof(fs_cbuf15[44].x);
  pf_6 = pf_3 * f_1;
  pf_0 = f_3 * pf_0;
  f_1 = max(0.f, pf_5);
  f_4 = exp2(pf_1);
  pf_1 = fma(f_2, pf_4, pf_6);
  f_5 = in_attr9.y;
  pf_0 = fma(f_1, pf_0, 1.f);
  f_1 = utof(fs_cbuf15[43].y);
  f_6 = utof(fs_cbuf15[44].y);
  f_6 = 0.f - (f_6);
  pf_4 = fma(pf_3, f_6, f_1);
  f_1 = (1.0f) / pf_0;
  f_6 = utof(fs_cbuf15[44].y);
  pf_0 = pf_3 * f_6;
  pf_2 = pf_2 * f_4;
  f_3 = 0.f - (f_3);
  pf_5 = f_3 + 1.05f;
  f_3 = utof(fs_cbuf15[44].z);
  pf_6 = pf_3 * f_3;
  pf_0 = fma(f_2, pf_4, pf_0);
  f_3 = utof(fs_cbuf15[42].w);
  pf_2 = pf_2 * f_3;
  pf_4 = pf_5 * f_1;
  f_1 = utof(fs_cbuf15[43].z);
  f_3 = utof(fs_cbuf15[44].z);
  f_3 = 0.f - (f_3);
  pf_3 = fma(pf_3, f_3, f_1);
  f_1 = utof(fs_cbuf15[42].x);
  pf_5 = pf_2 * f_1;
  f_1 = min(pf_4, 1.f);
  pf_3 = fma(f_2, pf_3, pf_6);
  f_2 = in_attr7.y;
  f_3 = utof(fs_cbuf15[42].y);
  pf_4 = pf_2 * f_3;
  f_3 = utof(fs_cbuf15[42].z);
  pf_2 = pf_2 * f_3;
  f_3 = utof(fs_cbuf15[1].x);
  f_3 = 0.f - (f_3);
  pf_5 = fma(pf_5, f_3, pf_5);
  f_3 = utof(fs_cbuf15[57].w);
  f_4 = utof(fs_cbuf15[57].w);
  f_4 = 0.f - (f_4);
  pf_6 = fma(f_1, f_4, f_3);
  f_1 = utof(fs_cbuf15[1].x);
  f_1 = 0.f - (f_1);
  pf_4 = fma(pf_4, f_1, pf_4);
  f_1 = utof(fs_cbuf15[1].x);
  f_1 = 0.f - (f_1);
  pf_2 = fma(pf_2, f_1, pf_2);
  pf_1 = pf_1 + pf_5;
  f_1 = in_attr9.w;
  pf_5 = fma(pf_6, -0.8f, 1.f);
  pf_0 = pf_0 + pf_4;
  f_3 = in_attr9.x;
  pf_2 = pf_3 + pf_2;
  pf_1 = pf_1 * pf_5;
  f_4 = in_attr12.z;
  pf_0 = pf_0 * pf_5;
  pf_2 = pf_2 * pf_5;
  f_6 = in_attr9.z;
  f_7 = utof(fs_cbuf15[26].x);
  f_8 = 0.f - (pf_1);
  pf_3 = f_8 + f_7;
  f_7 = utof(fs_cbuf15[26].y);
  f_8 = 0.f - (pf_0);
  pf_4 = f_8 + f_7;
  f_7 = utof(fs_cbuf15[26].z);
  f_8 = 0.f - (pf_2);
  pf_5 = f_8 + f_7;
  pf_1 = fma(pf_3, f_2, pf_1);
  f_7 = in_attr12.x;
  pf_0 = fma(pf_4, f_2, pf_0);
  f_8 = in_attr12.w;
  pf_2 = fma(pf_5, f_2, pf_2);
  f_2 = in_attr12.y;
  pf_0 = fma(pf_0, f_1, f_5);
  f_5 = in_attr11.x;
  pf_1 = fma(pf_1, f_1, f_3);
  f_3 = in_attr7.x;
  pf_2 = fma(pf_2, f_1, f_6);
  f_1 = in_attr11.y;
  f_6 = 0.f - (pf_2);
  pf_3 = f_6 + f_4;
  f_4 = in_attr11.z;
  f_6 = 0.f - (pf_1);
  pf_4 = f_6 + f_7;
  f_6 = in_attr11.w;
  f_7 = 0.f - (pf_0);
  pf_5 = f_7 + f_2;
  pf_2 = fma(pf_3, f_8, pf_2);
  pf_1 = fma(pf_4, f_8, pf_1);
  pf_0 = fma(pf_5, f_8, pf_0);
  f_2 = utof(fs_cbuf15[25].z);
  f_7 = 0.f - (pf_2);
  pf_3 = f_7 + f_2;
  f_2 = utof(fs_cbuf15[25].x);
  f_7 = 0.f - (pf_1);
  pf_4 = f_7 + f_2;
  f_2 = utof(fs_cbuf15[25].y);
  f_7 = 0.f - (pf_0);
  pf_5 = f_7 + f_2;
  pf_1 = fma(pf_4, f_3, pf_1);
  pf_0 = fma(pf_5, f_3, pf_0);
  pf_2 = fma(pf_3, f_3, pf_2);
  f_2 = 0.f - (pf_1);
  pf_3 = f_2 + f_5;
  f_2 = 0.f - (pf_0);
  pf_4 = f_2 + f_1;
  f_1 = 0.f - (pf_2);
  pf_5 = f_1 + f_4;
  pf_1 = fma(pf_3, f_6, pf_1);
  pf_0 = fma(pf_4, f_6, pf_0);
  pf_2 = fma(pf_5, f_6, pf_2);
  frag_color0.x = pf_1;
  frag_color0.y = pf_0;
  frag_color0.z = pf_2;
  frag_color0.w = f_0;
  return;
}