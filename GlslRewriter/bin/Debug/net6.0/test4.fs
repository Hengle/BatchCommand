#version 460
#pragma optionNV(fastmath off)
#extension GL_ARB_separate_shader_objects : enable
layout(location = 0) in vec4 in_attr0;
layout(location = 1) in vec4 in_attr1;
layout(location = 2) in vec4 in_attr2;
layout(location = 3) in vec4 in_attr3;
layout(location = 4) in vec4 in_attr4;
layout(location = 5) in vec4 in_attr5;
layout(location = 6) in vec4 in_attr6;
layout(location = 7) in vec4 in_attr7;
layout(location = 8) in vec4 in_attr8;
layout(location = 9) in vec4 in_attr9;
layout(location = 0) out vec4 frag_color0;
layout(location = 1) out vec4 frag_color1;
layout(location = 2) out vec4 frag_color2;
layout(location = 3) out vec4 frag_color3;
layout(location = 4) out vec4 frag_color4;
layout(location = 5) out vec4 frag_color5;
layout(location = 6) out vec4 frag_color6;
layout(location = 7) out vec4 frag_color7;
layout(std140, binding = 7) uniform fs_cbuf_9 { uvec4 fs_cbuf9[4096]; };
layout(std140, binding = 8) uniform fs_cbuf_10 { uvec4 fs_cbuf10[4096]; };
layout(std140, binding = 9) uniform fs_cbuf_13 { uvec4 fs_cbuf13[4096]; };
layout(std140, binding = 10) uniform fs_cbuf_15 { uvec4 fs_cbuf15[4096]; };
layout(binding = 1) uniform sampler2D tex1;
layout(binding = 2) uniform sampler2D tex2;
layout(binding = 3) uniform samplerCube tex3;
#define ftoi floatBitsToInt
#define ftou floatBitsToUint
#define itof intBitsToFloat
#define utof uintBitsToFloat
void main() {
  bool b_0 = bool(0);
  bool b_1 = bool(0);
  float f_0 = float(0);
  float f_1 = float(0);
  float f_2 = float(0);
  float f_3 = float(0);
  float f_4 = float(0);
  float f_5 = float(0);
  float f_6 = float(0);
  float f_7 = float(0);
  float f_8 = float(0);
  float f_9 = float(0);
  float f_10 = float(0);
  float f_11 = float(0);
  float f_12 = float(0);
  vec2 f2_0 = vec2(0);
  vec3 f3_0 = vec3(0);
  vec4 f4_0 = vec4(0);
  precise float pf_0 = float(0);
  precise float pf_1 = float(0);
  precise float pf_2 = float(0);
  precise float pf_3 = float(0);
  precise float pf_4 = float(0);
  precise float pf_5 = float(0);
  precise float pf_6 = float(0);
  f_0 = in_attr2.z;
  f_1 = in_attr2.w;
  f2_0 = vec2(f_0, f_1);
  f4_0 = texture(tex2, f2_0);
  f_0 = f4_0.w;
  f_1 = in_attr5.x;
  f_2 = in_attr5.y;
  f_3 = in_attr5.z;
  f_4 = utof(fs_cbuf10[8].w);
  f_5 = 0.f - (f_1);
  pf_0 = f_5 + f_4;
  f_4 = in_attr2.x;
  f_5 = utof(fs_cbuf10[9].w);
  f_6 = 0.f - (f_2);
  pf_1 = f_6 + f_5;
  f_5 = utof(fs_cbuf15[39].x);
  f_5 = 0.f - (f_5);
  pf_2 = f_1 + f_5;
  f_1 = utof(fs_cbuf15[39].y);
  f_1 = 0.f - (f_1);
  pf_3 = f_2 + f_1;
  pf_0 = pf_0 * pf_0;
  pf_2 = pf_2 * pf_2;
  pf_0 = fma(pf_1, pf_1, pf_0);
  f_1 = utof(fs_cbuf10[10].w);
  f_2 = 0.f - (f_3);
  pf_1 = f_2 + f_1;
  pf_2 = fma(pf_3, pf_3, pf_2);
  f_1 = in_attr4.w;
  f_2 = utof(fs_cbuf15[39].z);
  f_2 = 0.f - (f_2);
  pf_3 = f_3 + f_2;
  pf_0 = fma(pf_1, pf_1, pf_0);
  f_2 = sqrt(pf_0);
  pf_0 = fma(pf_3, pf_3, pf_2);
  f_3 = sqrt(pf_0);
  f_2 = min(f_2, 3300.f);
  f_2 = max(f_2, 500.f);
  f_5 = in_attr0.w;
  f_3 = min(f_3, 1200.f);
  pf_0 = f_2 + -500.f;
  f_2 = in_attr1.w;
  f_3 = max(0.f, f_3);
  pf_0 = fma(pf_0, -0.00035714285f, 0.9f);
  f_6 = in_attr3.x;
  pf_1 = f_3 * 0.0010416667f;
  f_3 = min(max(pf_1, 0.0), 1.0);
  pf_0 = pf_0 * 1.1111112f;
  f_7 = min(max(pf_0, 0.0), 1.0);
  pf_0 = f_3 * f_3;
  pf_1 = fma(f_3, -2.f, 3.f);
  pf_2 = fma(f_7, -2.f, 3.f);
  pf_3 = f_7 * f_7;
  pf_0 = pf_1 * pf_0;
  pf_1 = pf_2 * pf_3;
  f_3 = 0.f - (f_5);
  pf_2 = fma(f_0, f_1, f_3);
  f_0 = in_attr6.y;
  pf_2 = pf_2 * f_2;
  f_1 = in_attr6.z;
  pf_1 = pf_1 * pf_2;
  f_2 = in_attr6.x;
  pf_0 = pf_0 * pf_1;
  f_3 = min(max(pf_0, 0.0), 1.0);
  pf_0 = f_3 * f_6;
  f_3 = utof(fs_cbuf9[139].z);
  b_0 = pf_0 <= f_3 && !isnan(pf_0) && !isnan(f_3);
  b_1 = b_0 ? true : false;
  if (b_1) {
    discard;
  }
  pf_1 = f_2 * f_2;
  pf_1 = fma(f_0, f_0, pf_1);
  pf_1 = fma(f_1, f_1, pf_1);
  f_3 = inversesqrt(pf_1);
  pf_1 = f_1 * f_3;
  f_1 = in_attr2.y;
  pf_2 = f_0 * f_3;
  pf_3 = f_2 * f_3;
  f_0 = abs(pf_2);
  f_2 = abs(pf_3);
  f_0 = max(f_0, f_2);
  f_2 = abs(pf_1);
  f_0 = max(f_2, f_0);
  f_0 = (1.0f) / f_0;
  pf_3 = pf_3 * f_0;
  pf_2 = pf_2 * f_0;
  f_0 = 0.f - (f_0);
  pf_1 = pf_1 * f_0;
  f_0 = utof(fs_cbuf15[1].x);
  f3_0 = vec3(pf_3, pf_2, pf_1);
  f4_0 = textureLod(tex3, f3_0, f_0);
  f_0 = f4_0.x;
  f_2 = f4_0.y;
  f_3 = f4_0.z;
  f2_0 = vec2(f_4, f_1);
  f4_0 = texture(tex1, f2_0);
  f_1 = f4_0.x;
  f_4 = f4_0.y;
  f_5 = f4_0.z;
  f_6 = in_attr1.x;
  f_7 = in_attr1.y;
  f_8 = in_attr0.x;
  f_9 = in_attr7.w;
  f_10 = in_attr0.y;
  f_11 = 0.f - (0.f);
  pf_0 = pf_0 + f_11;
  f_11 = min(max(pf_0, 0.0), 1.0);
  f_12 = 0.f - (f_6);
  pf_0 = fma(f_1, f_12, f_6);
  f_6 = 0.f - (f_7);
  pf_1 = fma(f_4, f_6, f_7);
  f_6 = 0.f - (f_9);
  pf_2 = fma(f_0, f_6, f_0);
  f_0 = in_attr8.x;
  f_6 = 0.f - (f_9);
  pf_3 = fma(f_2, f_6, f_2);
  f_2 = in_attr0.z;
  f_6 = 0.f - (f_9);
  pf_4 = fma(f_3, f_6, f_3);
  f_3 = in_attr8.z;
  pf_0 = fma(f_8, f_1, pf_0);
  f_1 = in_attr1.z;
  pf_1 = fma(f_10, f_4, pf_1);
  f_4 = in_attr8.y;
  f_6 = utof(fs_cbuf13[0].y);
  pf_2 = pf_2 * f_6;
  f_6 = utof(fs_cbuf13[0].y);
  pf_3 = pf_3 * f_6;
  f_6 = 0.f - (f_1);
  pf_5 = fma(f_5, f_6, f_1);
  f_1 = utof(fs_cbuf13[0].y);
  pf_4 = pf_4 * f_1;
  f_1 = utof(fs_cbuf15[1].w);
  pf_2 = fma(pf_2, f_1, f_0);
  f_0 = in_attr7.y;
  f_1 = utof(fs_cbuf15[1].w);
  pf_3 = fma(pf_3, f_1, f_4);
  pf_5 = fma(f_2, f_5, pf_5);
  f_1 = in_attr9.y;
  f_2 = utof(fs_cbuf15[1].w);
  pf_4 = fma(pf_4, f_2, f_3);
  pf_6 = pf_0 * pf_2;
  f_2 = utof(fs_cbuf15[26].x);
  f_3 = 0.f - (pf_2);
  pf_0 = fma(pf_0, f_3, f_2);
  f_2 = in_attr9.x;
  pf_2 = pf_1 * pf_3;
  f_3 = utof(fs_cbuf15[26].y);
  f_4 = 0.f - (pf_3);
  pf_1 = fma(pf_1, f_4, f_3);
  f_3 = in_attr9.z;
  pf_3 = pf_5 * pf_4;
  f_4 = utof(fs_cbuf15[26].z);
  f_5 = 0.f - (pf_4);
  pf_4 = fma(pf_5, f_5, f_4);
  f_4 = in_attr9.w;
  f_5 = in_attr7.x;
  pf_0 = fma(pf_0, f_0, pf_6);
  pf_1 = fma(pf_1, f_0, pf_2);
  pf_2 = fma(pf_4, f_0, pf_3);
  f_0 = 0.f - (pf_0);
  pf_3 = f_0 + f_2;
  f_0 = 0.f - (pf_1);
  pf_4 = f_0 + f_1;
  f_0 = 0.f - (pf_2);
  pf_5 = f_0 + f_3;
  pf_0 = fma(pf_3, f_4, pf_0);
  pf_1 = fma(pf_4, f_4, pf_1);
  pf_2 = fma(pf_5, f_4, pf_2);
  f_0 = utof(fs_cbuf15[25].x);
  f_1 = 0.f - (pf_0);
  pf_3 = f_1 + f_0;
  f_0 = utof(fs_cbuf15[25].y);
  f_1 = 0.f - (pf_1);
  pf_4 = f_1 + f_0;
  f_0 = utof(fs_cbuf15[25].z);
  f_1 = 0.f - (pf_2);
  pf_5 = f_1 + f_0;
  pf_0 = fma(pf_3, f_5, pf_0);
  pf_1 = fma(pf_4, f_5, pf_1);
  pf_2 = fma(pf_5, f_5, pf_2);
  frag_color0.x = pf_0;
  frag_color0.y = pf_1;
  frag_color0.z = pf_2;
  frag_color0.w = f_11;
  return;
}