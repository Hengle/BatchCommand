#version 460
#pragma optionNV(fastmath off)
#extension GL_ARB_separate_shader_objects : enable

out gl_PerVertex {
    vec4 gl_Position;
};
layout(location = 0) in vec4 in_attr0; //顶点坐标（位于xy平面，z始终为0，w为1），只用于计算out_attr1.xy，没用于计算输出顶点的位置
layout(location = 1) in vec4 in_attr1; //UV（xy是UV，z是从6点开始逆时针方向的顶点序号，中心点为12，w为1），xy配合in_attr0用来计算out_attr1，z用于计算tex0采样y像素坐标
layout(location = 4) in vec4 in_attr4; //固定值 277.38879	-253.98657	-1225.84583	1000 （xyzw全用），xyz可能是某个原始坐标，使用in_attr9\10\11作为变换矩阵变换到另一个坐标系，w小于0会提前结束shader
layout(location = 5) in vec4 in_attr5; //固定值 0	0	0	1060.5 （只用w）shader需符合条件 (in_attr5.w > vs_cbuf10[2].x) || (vs_cbuf10[2].x - in_attr5.w) > in_attr4.w 才会继续执行，
									   //后续会使用 (vs_cbuf10[2].x - in_attr5.w) / in_attr4.w
									   //或者 (in_attr7.x * vs_cbuf9[12].z * vs_cbuf_9[11].y + vs_cbuf10[2].x - in_attr5.w) * vs_cbuf9[11].y的小数部分
layout(location = 6) in vec4 in_attr6; //固定值 256.74911	175.44524	175.44524	1 (用xyz)，tex0的纵向12个像素是顶点动画的12个顶点坐标，xyz分别用于缩放坐标的xyz，y也用于计算out_attr5.y
layout(location = 7) in vec4 in_attr7; //固定值 0.33394	0.62269	0.01691	0.7787 （xyzw全用）,x是序列帧动画进度[0,1], xy分别是计算out_attr1.zw的系数，zw是乘系数前的叠加值
//下面3个输入参数的xyz构成3x3单位矩阵，代码里用于变换in_attr4.xyz，w分量像是用来计算平移的值（先旋转缩放再平移）
layout(location = 9) in vec4 in_attr9; //固定值 1	0	0	287.3111 （xyzw全用）
layout(location = 10) in vec4 in_attr10; //固定值 0	1	0	1522.14368 （xyzw全用）
layout(location = 11) in vec4 in_attr11; //固定值 0	0	1	1396.66956 （xyzw全用）

layout(location = 0) out vec4 out_attr0; //只写w，用作系数，参与输出颜色与alpha的计算
layout(location = 1) out vec4 out_attr1; //xyzw全写，zw是大的云纹理采样坐标，xy是小的纹理数组的采样坐标
layout(location = 2) out vec4 out_attr2; //xyzw全写，xy/w是深度纹理的采样坐标，z/w参与输出alpha的计算
layout(location = 3) out vec4 out_attr3; //只写x，用作最终alpha值的乘数
layout(location = 4) out vec4 out_attr4; //写xyz，是一个坐标，用于与一个固定点计算单位向量
layout(location = 5) out vec4 out_attr5; //只写y，参与计算输出颜色一部分的系数的指数
layout(location = 6) out vec4 out_attr6; //只写x，用作小的纹理数组的下标
layout(location = 7) out vec4 out_attr7; //写xy，x与y分别用作系数
layout(location = 8) out vec4 out_attr8; //写xz，x参与颜色分量的计算，z参与颜色分量与alpha的计算
layout(location = 9) out vec4 out_attr9; //xyzw全写，xyz是颜色，w用作混合系数
layout(location = 10) out vec4 out_attr10; //xyzw全写，xyz是颜色，w用作混合系数
layout(location = 11) out vec4 out_attr11; //xyzw全写，xyz是颜色，w用作混合系数

layout(std140, binding = 0) uniform vs_cbuf_8 {
    uvec4 vs_cbuf8[4096];
};

layout(std140, binding = 1) uniform vs_cbuf_9 {
    uvec4 vs_cbuf9[4096];
};

layout(std140, binding = 2) uniform vs_cbuf_10 {
    uvec4 vs_cbuf10[4096];
};

layout(std140, binding = 3) uniform vs_cbuf_13 {
    uvec4 vs_cbuf13[4096];
};

layout(std140, binding = 4) uniform vs_cbuf_15 {
    uvec4 vs_cbuf15[4096];
};

layout(binding = 0) uniform sampler2D tex0; //8*13
layout(binding = 1) uniform sampler2D tex1; //256*256
layout(binding = 2) uniform sampler2D tex2; //256*256

#define ftoi floatBitsToInt
#define ftou floatBitsToUint
#define itof intBitsToFloat
#define utof uintBitsToFloat

void main()
{
	// 1065353216 = 1.00f;
	// 0、1、2、3的xyz用于将原始xyz变换为xyzw
	// vs_cbuf8[0] = vec4(0.9936762, 0.00, 0.1122834, -442.3171);		//0、1、2、3的w分别是xyzw坐标的加数
	// vs_cbuf8[1] = vec4(0.0627182, 0.829457, -0.5550383, -629.7858);
	// vs_cbuf8[2] = vec4(-0.0931343, 0.5585706, 0.8242117, -2058.403);
	// vs_cbuf8[3] = vec4(0.00, 0.00, 0.00, 1.00);
	// vs_cbuf8[4] = vec4(1.206285, 0.00, 0.00, 0.00);					//4、5、6、7就矩阵的4列
	// vs_cbuf8[5] = vec4(0.00, 2.144507, 0.00, 0.00);
	// vs_cbuf8[6] = vec4(0.00, 0.00, -1.00008, -2.00008);
	// vs_cbuf8[7] = vec4(0.00, 0.00, -1.00, 0.00);
	// vs_cbuf8[29] = vec4(287.3111, 1672.144, 1396.669, 0.00);			//可能是相机位置
	// vs_cbuf8[30] = vec4(1.00, 25000.00, 25000.00, 24999.00);
	// vs_cbuf9[11] = vec4(0.00, 0.00, 0.00, 0.00);
	// vs_cbuf9[12] = vec4(0.00, 0.00, 0.00, 0.00);
	// vs_cbuf9[16] = vec4(0.00, 0.00, 0.00, 1.00);
	// vs_cbuf9[113] = vec4(0.00, 0.00, 0.00, 0.00);
	// vs_cbuf9[114] = vec4(1.00, 1.00, 1.00, 0.10);
	// vs_cbuf9[115] = vec4(1.00, 1.00, 1.00, 0.90);
	// vs_cbuf9[116] = vec4(0.00, 0.00, 0.00, 1.00);
	// vs_cbuf9[141] = vec4(1.00, 1.00, 1.00, 0.00);
	// vs_cbuf10[0] = vec4(1.00, 1.00, 1.00, 1.00);
	// vs_cbuf10[2] = vec4(1638.50, 159.00, 1.00, 1.00);
	// vs_cbuf10[3] = vec4(0.999997, 1.00, 1.00, 1.00);
	// vs_cbuf13[6] = vec4(1.00, 1.00, 10.00, 0.00);
	// vs_cbuf15[1] = vec4(0.00, 1.00, 1.895482, 1.00);
	// vs_cbuf15[22] = vec4(0.0000418, 0.0029252, 0.00, 0.00);
	// vs_cbuf15[23] = vec4(42.50, 2.50, 0.85, -0.0229271);
	// vs_cbuf15[24] = vec4(0.0033333, 0.00, 0.576, 4.00);
	// vs_cbuf15[25] = vec4(0.682, 0.99055, 0.63965, 0.12);
	// vs_cbuf15[26] = vec4(1.12035, 1.3145, 0.66605, 0.4519901);
	// vs_cbuf15[27] = vec4(-0.0909091, 0.0045455, 250.00, 0.00);
	// vs_cbuf15[28] = vec4(0.5226594, -0.5741013, -0.6302658, 0.00);	//一个单位向量
	// vs_cbuf15[54] = vec4(0.8137476, 1.689872, 75.00, 2000.00);
	// vs_cbuf15[55] = vec4(0.8511029, 0.825, 1.060784, 0.70);
	// vs_cbuf15[57] = vec4(-4731.44, 907.7282, 3000.00, 1.00);
	// vs_cbuf15[60] = vec4(0.75, 0.50, 4.00, 1672.144);
	// vs_cbuf15[61] = vec4(1.00, 0.00, 0.00, 0.00);

	bool b_0_2;
	bool b_0_5;
	bool b_1_10;
	bool b_1_11;
	bool b_1_12;
	bool b_1_13;
	bool b_1_14;
	bool b_1_8;
	bool b_1_9;
	float f_0_12;
	float f_1_10;
	float f_1_18;
	float f_1_51;
	float f_1_56;
	float f_1_65;
	float f_1_70;
	float f_11_3;
	float f_11_4;
	float f_15_12;
	float f_15_15;
	float f_15_17;
	float f_16_12;
	float f_16_6;
	float f_16_8;
	float f_17_0;
	float f_17_10;
	float f_2_42;
	float f_2_50;
	float f_2_63;
	float f_2_64;
	float f_3_32;
	float f_3_42;
	float f_3_44;
	float f_3_49;
	float f_3_57;
	float f_3_61;
	float f_4_28;
	float f_4_43;
	float f_4_45;
	float f_4_46;
	float f_4_52;
	float f_4_57;
	float f_4_58;
	float f_4_70;
	float f_4_79;
	float f_4_8;
	float f_4_81;
	float f_5_13;
	float f_5_18;
	float f_5_21;
	float f_5_25;
	float f_5_28;
	float f_5_29;
	float f_6_12;
	float f_6_7;
	float f_8_1;
	float f_9_2;
	vec2 f2_0_1;
	vec2 f2_0_2;
	vec4 f4_0_0;
	vec4 f4_0_1;
	vec4 f4_0_2;
	vec4 f4_0_3;
	vec4 f4_0_4;
	vec4 f4_0_5;
	precise float pf_0_1;
	precise float pf_0_11;
	precise float pf_0_12;
	precise float pf_0_25;
	precise float pf_0_29;
	precise float pf_0_3;
	precise float pf_0_31;
	precise float pf_0_33;
	precise float pf_0_34;
	precise float pf_0_4;
	precise float pf_1_11;
	precise float pf_1_15;
	precise float pf_1_16;
	precise float pf_1_24;
	precise float pf_1_25;
	precise float pf_1_26;
	precise float pf_1_4_y;
	precise float pf_1_5;
	precise float pf_1_6_z;
	precise float pf_1_8;
	precise float pf_1_9;
	precise float pf_10_1;
	precise float pf_10_10;
	precise float pf_10_14;
	precise float pf_10_17;
	precise float pf_10_18;
	precise float pf_10_4;
	precise float pf_10_6;
	precise float pf_10_7;
	precise float pf_10_9;
	precise float pf_11_10;
	precise float pf_11_13;
	precise float pf_11_15;
	precise float pf_11_3;
	precise float pf_11_4;
	precise float pf_11_5;
	precise float pf_11_8;
	precise float pf_11_9;
	precise float pf_12_2;
	precise float pf_12_6;
	precise float pf_12_8;
	precise float pf_13_1;
	precise float pf_13_10;
	precise float pf_13_11;
	precise float pf_13_15;
	precise float pf_13_5;
	precise float pf_13_6;
	precise float pf_13_7;
	precise float pf_14_13;
	precise float pf_14_2;
	precise float pf_14_4;
	precise float pf_14_6;
	precise float pf_14_7;
	precise float pf_14_9;
	precise float pf_15_11;
	precise float pf_15_14;
	precise float pf_15_2;
	precise float pf_15_20;
	precise float pf_15_6;
	precise float pf_15_8;
	precise float pf_16_10;
	precise float pf_16_2;
	precise float pf_16_3;
	precise float pf_16_4;
	precise float pf_17_3;
	precise float pf_17_5;
	precise float pf_17_6;
	precise float pf_17_9;
	precise float pf_18_1;
	precise float pf_18_10;
	precise float pf_18_2;
	precise float pf_18_6;
	precise float pf_18_9;
	precise float pf_19_3;
	precise float pf_19_6;
	precise float pf_19_7;
	precise float pf_2_0;
	precise float pf_2_3_x;
	precise float pf_2_4;
	precise float pf_2_5_x;
	precise float pf_20_0;
	precise float pf_20_11;
	precise float pf_20_17;
	precise float pf_20_19;
	precise float pf_20_5;
	precise float pf_20_6;
	precise float pf_20_9;
	precise float pf_21_7;
	precise float pf_22_0;
	precise float pf_23_0;
	precise float pf_23_6;
	precise float pf_24_1;
	precise float pf_25_0;
	precise float pf_25_1;
	precise float pf_25_3;
	precise float pf_26_1;
	precise float pf_3_11;
	precise float pf_3_12;
	precise float pf_3_2_z;
	precise float pf_3_4;
	precise float pf_4_10;
	precise float pf_4_11;
	precise float pf_4_13_y;
	precise float pf_4_2;
	precise float pf_4_21;
	precise float pf_4_4;
	precise float pf_4_6;
	precise float pf_5_3;
	precise float pf_5_5;
	precise float pf_5_6;
	precise float pf_6_11;
	precise float pf_6_19;
	precise float pf_6_4;
	precise float pf_6_6;
	precise float pf_6_7;
	precise float pf_6_8;
	precise float pf_7_0;
	precise float pf_7_11;
	precise float pf_7_12;
	precise float pf_7_13;
	precise float pf_7_15;
	precise float pf_7_17;
	precise float pf_7_19;
	precise float pf_7_27;
	precise float pf_7_5;
	precise float pf_7_6;
	precise float pf_7_7;
	precise float pf_8_0;
	precise float pf_8_10;
	precise float pf_8_2;
	precise float pf_8_4;
	precise float pf_8_5;
	precise float pf_8_6;
	precise float pf_8_8;
	precise float pf_9_11;
	precise float pf_9_13;
	precise float pf_9_14;
	precise float pf_9_15;
	precise float pf_9_17;
	precise float pf_9_2;
	precise float pf_9_21;
	precise float pf_9_3;
	precise float pf_9_4;
	precise float pf_9_5;
	precise float pf_9_9;
	uint u_0_1;
	uint u_0_11;
	uint u_0_12;
	uint u_0_13;
	uint u_0_2;
	uint u_0_4;
	uint u_0_5;
	uint u_0_6;
	uint u_0_7;
	uint u_0_phi_11;
	uint u_0_phi_15;
	uint u_0_phi_4;
	uint u_1_1;
	uint u_1_3;
	uint u_1_4;
	uint u_1_phi_16;
	uint u_2_0;
	uint u_2_1;
	uint u_2_5;
	uint u_2_6;
	uint u_2_phi_2;
	uint u_3_2;
	uint u_3_3;
	uint u_3_4;
	uint u_3_5;
	uint u_3_7;
	uint u_3_phi_15;
	uint u_3_phi_9;
	uint u_4_2;
	uvec2 u2_0_0;
	// 166.45822  <=>  float(166.45822)
	gl_Position.x = float(166.45822);
	// 777.81085  <=>  float(777.81085)
	gl_Position.y = float(777.81085);
	// 1259.94666  <=>  float(1259.94666)
	gl_Position.z = float(1259.94666);
	// 1261.84583  <=>  float(1261.84583)
	gl_Position.w = float(1261.84583);
	// 0.00  <=>  float(0.00)
	out_attr0.x = float(0.00);
	// 0.00  <=>  float(0.00)
	out_attr0.y = float(0.00);
	// 0.00  <=>  float(0.00)
	out_attr0.z = float(0.00);
	// 1.00  <=>  float(1.00)
	out_attr0.w = float(1.00);
	// 0.50  <=>  float(0.50)
	out_attr1.x = float(0.50);
	// 0.50  <=>  float(0.50)
	out_attr1.y = float(0.50);
	// 1.46396  <=>  float(1.46396)
	out_attr1.z = float(1.46396);
	// 3.26268  <=>  float(3.26268)
	out_attr1.w = float(3.26268);
	// 714.15204  <=>  float(714.15204)
	out_attr2.x = float(714.15204);
	// 242.01749  <=>  float(242.01749)
	out_attr2.y = float(242.01749);
	// 1260.89624  <=>  float(1260.89624)
	out_attr2.z = float(1260.89624);
	// 1261.84583  <=>  float(1261.84583)
	out_attr2.w = float(1261.84583);
	// 1.00  <=>  float(1.00)
	out_attr3.x = float(1.00);
	// 0.00  <=>  float(0.00)
	out_attr3.y = float(0.00);
	// 0.00  <=>  float(0.00)
	out_attr3.z = float(0.00);
	// 1.00  <=>  float(1.00)
	out_attr3.w = float(1.00);
	// 564.69989  <=>  float(564.69989)
	out_attr4.x = float(564.69989);
	// 1268.1571  <=>  float(1268.1571)
	out_attr4.y = float(1268.1571);
	// 170.82373  <=>  float(170.82373)
	out_attr4.z = float(170.82373);
	// 1.00  <=>  float(1.00)
	out_attr4.w = float(1.00);
	// 0.00  <=>  float(0.00)
	out_attr5.x = float(0.00);
	// 175.44524  <=>  float(175.44524)
	out_attr5.y = float(175.44524);
	// 0.00  <=>  float(0.00)
	out_attr5.z = float(0.00);
	// 1.00  <=>  float(1.00)
	out_attr5.w = float(1.00);
	// 2.00  <=>  float(2.00)
	out_attr6.x = float(2.00);
	// 0.00  <=>  float(0.00)
	out_attr6.y = float(0.00);
	// 0.00  <=>  float(0.00)
	out_attr6.z = float(0.00);
	// 1.00  <=>  float(1.00)
	out_attr6.w = float(1.00);
	// 0.12  <=>  float(0.12)
	out_attr7.x = float(0.12);
	// 0.00  <=>  float(0.00)
	out_attr7.y = float(0.00);
	// 0.00  <=>  float(0.00)
	out_attr7.z = float(0.00);
	// 1.00  <=>  float(1.00)
	out_attr7.w = float(1.00);
	// 1.00  <=>  float(1.00)
	out_attr8.x = float(1.00);
	// 0.00  <=>  float(0.00)
	out_attr8.y = float(0.00);
	// 1.00  <=>  float(1.00)
	out_attr8.z = float(1.00);
	// 1.00  <=>  float(1.00)
	out_attr8.w = float(1.00);
	// 0.40435  <=>  float(0.40435)
	out_attr9.x = float(0.40435);
	// 0.39195  <=>  float(0.39195)
	out_attr9.y = float(0.39195);
	// 0.50397  <=>  float(0.50397)
	out_attr9.z = float(0.50397);
	// 0.52491  <=>  float(0.52491)
	out_attr9.w = float(0.52491);
	// 4.77344  <=>  float(4.77344)
	out_attr10.x = float(4.77344);
	// 3.10352  <=>  float(3.10352)
	out_attr10.y = float(3.10352);
	// 1.75391  <=>  float(1.75391)
	out_attr10.z = float(1.75391);
	// 0.00  <=>  float(0.00)
	out_attr10.w = float(0.00);
	// 0.20251  <=>  float(0.20251)
	out_attr11.x = float(0.20251);
	// 0.44214  <=>  float(0.44214)
	out_attr11.y = float(0.44214);
	// 0.8335  <=>  float(0.8335)
	out_attr11.z = float(0.8335);
	// 0.00  <=>  float(0.00)
	out_attr11.w = float(0.00);
	
	// 第一次提前结束判断，in_attr4.w 小于0就会跳过后续计算，包括像素shader也会跳过输出
	// 1000  <=>  (isnan({in_attr4.w : 1000.00}) ? 0u : int(clamp(trunc({in_attr4.w : 1000.00}), float(-2147483600.), float(2147483600.))))
	u_1_1 = (isnan(in_attr4.w) ? 0u : int(clamp(trunc(in_attr4.w), float(-2147483600.), float(2147483600.))));
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		// 0.00  <=>  0.
		gl_Position.x = 0.;
	}
	// 0  <=>  0u
	u_2_0 = 0u;
	u_2_phi_2 = u_2_0;
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		// 这个是直接返回时的z坐标的1/5 25000
		// 1187205120  <=>  {vs_cbuf8[30].y : 1187205120}
		u_2_1 = vs_cbuf8[30].y;
		u_2_phi_2 = u_2_1;
	}
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		// 0.00  <=>  0.
		gl_Position.y = 0.;
	}
	// 0  <=>  {u_2_phi_2 : 0}
	u_0_1 = u_2_phi_2;
	u_0_phi_4 = u_0_1;
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		// 0  <=>  ftou(({utof(u_2_phi_2) : 0.00} * 5.))
		u_0_2 = ftou((utof(u_2_phi_2) * 5.));
		u_0_phi_4 = u_0_2;
	}
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		// 0.00  <=>  0.
		out_attr3.x = 0.;
	}
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		// 直接返回时，z坐标是12500, xy都是0，out_attr3.x也为0，也就是对应像素shader也会因输出alpha值为0提前discard
		// 0.00  <=>  {utof(u_0_phi_4) : 0.00}
		gl_Position.z = utof(u_0_phi_4);
	}
	// False  <=>  if(((int({u_1_1 : 1000}) <= int(0u)) ? true : false))
	if(((int(u_1_1) <= int(0u)) ? true : false))
	{
		return;
	}
	
	// 第二次提前结束判断，(in_attr5.w > vs_cbuf10[2].x) || (vs_cbuf10[2].x - in_attr5.w) > in_attr4.w
	// 578.00  <=>  ((0. - {in_attr5.w : 1060.50}) + {utof(vs_cbuf10[2].x) : 1638.50})
	pf_0_1 = ((0. - in_attr5.w) + utof(vs_cbuf10[2].x));
	// False  <=>  ((({pf_0_1 : 578.00} >= float(int({u_1_1 : 1000}))) && (! isnan({pf_0_1 : 578.00}))) && (! isnan(float(int({u_1_1 : 1000})))))
	b_0_2 = (((pf_0_1 >= float(int(u_1_1))) && (! isnan(pf_0_1))) && (! isnan(float(int(u_1_1)))));
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_8 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// False  <=>  if({b_1_8 : False})
	if(b_1_8)
	{
		// 0.00  <=>  0.
		gl_Position.x = 0.;
	}
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_9 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// 1149538304  <=>  ftou({in_attr5.w : 1060.50})
	u_3_2 = ftou(in_attr5.w);
	u_3_phi_9 = u_3_2;
	// False  <=>  if({b_1_9 : False})
	if(b_1_9)
	{
		// 1187205120  <=>  {vs_cbuf8[30].y : 1187205120}
		u_3_3 = vs_cbuf8[30].y;
		u_3_phi_9 = u_3_3;
	}
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_10 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// False  <=>  if({b_1_10 : False})
	if(b_1_10)
	{
		// 0.00  <=>  0.
		gl_Position.y = 0.;
	}
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_11 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// 1149538304  <=>  {u_3_phi_9 : 1149538304}
	u_0_4 = u_3_phi_9;
	u_0_phi_11 = u_0_4;
	// False  <=>  if({b_1_11 : False})
	if(b_1_11)
	{
		// 1168487424  <=>  ftou(({utof(u_3_phi_9) : 1060.50} * 5.))
		u_0_5 = ftou((utof(u_3_phi_9) * 5.));
		u_0_phi_11 = u_0_5;
	}
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_12 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// False  <=>  if({b_1_12 : False})
	if(b_1_12)
	{
		// 0.00  <=>  0.
		out_attr3.x = 0.;
	}
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_13 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// False  <=>  if({b_1_13 : False})
	if(b_1_13)
	{
		// 这里与前面提前结束一样，z值也是 12500
		// 1060.50  <=>  {utof(u_0_phi_11) : 1060.50}
		gl_Position.z = utof(u_0_phi_11);
	}
	// False  <=>  ((((({in_attr5.w : 1060.50} > {utof(vs_cbuf10[2].x) : 1638.50}) && (! isnan({in_attr5.w : 1060.50}))) && (! isnan({utof(vs_cbuf10[2].x) : 1638.50}))) || {b_0_2 : False}) ? true : false)
	b_1_14 = (((((in_attr5.w > utof(vs_cbuf10[2].x)) && (! isnan(in_attr5.w))) && (! isnan(utof(vs_cbuf10[2].x)))) || b_0_2) ? true : false);
	// False  <=>  if({b_1_14 : False})
	if(b_1_14)
	{
		return;
	}
	
	// 后面是正常计算了，不会再提前结束
	
	// 奇怪的写法，好像结果总是 in_attr6.x
	// 256.7491  <=>  (clamp((min(0., {in_attr7.x : 0.33394}) + (0. - 0.)), 0.0, 1.0) + {in_attr6.x : 256.7491})
	pf_2_0 = (clamp((min(0., in_attr7.x) + (0. - 0.)), 0.0, 1.0) + in_attr6.x);
	// 前面用于第二次提前结束条件判断的差值 vs_cbuf10[2].x - in_attr5.w
	// 1141932032  <=>  ftou({pf_0_1 : 578.00})
	u_0_6 = ftou(pf_0_1);
	// 用于第一次条件判断的值 in_attr4.w
	// 1148846080  <=>  ftou(float(int({u_1_1 : 1000})))
	u_3_4 = ftou(float(int(u_1_1)));
	u_0_phi_15 = u_0_6;
	u_3_phi_15 = u_3_4;
	
	// 条件 vs_cbuf9[11].y > 0
	// False  <=>  if(((((0. < {utof(vs_cbuf9[11].y) : 0.00}) && (! isnan(0.))) && (! isnan({utof(vs_cbuf9[11].y) : 0.00}))) ? true : false))
	if(((((0. < utof(vs_cbuf9[11].y)) && (! isnan(0.))) && (! isnan(utof(vs_cbuf9[11].y)))) ? true : false))
	{
		//对前面二次条件判断使用的值进行调整
		
		// 对in_attr4.w的调整：pf_0_3表示成uint，(in_attr7.x * vs_cbuf9[12].z * vs_cbuf_9[11].y + vs_cbuf10[2].x - in_attr5.w) * vs_cbuf9[11].y
		
		// ((({in_attr7.x : 0.33394} * {utof(vs_cbuf9[12].z) : 0.00}) * {utof(vs_cbuf9[11].y) : 0.00} + {pf_0_1 : 578.00}) * (1.0 / {utof(vs_cbuf9[11].y) : 0.00}))
		pf_0_3 = (((in_attr7.x * utof(vs_cbuf9[12].z)) * utof(vs_cbuf9[11].y) + pf_0_1) * (1.0 / utof(vs_cbuf9[11].y)));
		// ftou({pf_0_3 : })
		u_4_2 = ftou(pf_0_3);
		// floor({pf_0_3 : })
		f_1_10 = floor(pf_0_3);
		
		// 对vs_cbuf10[2].x - in_attr5.w的调整：pf_0_3的小数部分
		
		// ({pf_0_3 : } + (0. - {f_1_10 : }))
		pf_0_4 = (pf_0_3 + (0. - f_1_10));
		// ftou({pf_0_4 : })
		u_0_7 = ftou(pf_0_4);
		// {u_4_2 : }
		u_3_5 = u_4_2;
		u_0_phi_15 = u_0_7;
		u_3_phi_15 = u_3_5;
	}
	
	// True  <=>  ((! (((0. < {utof(vs_cbuf9[11].y) : 0.00}) && (! isnan(0.))) && (! isnan({utof(vs_cbuf9[11].y) : 0.00})))) ? true : false)
	b_0_5 = ((! (((0. < utof(vs_cbuf9[11].y)) && (! isnan(0.))) && (! isnan(utof(vs_cbuf9[11].y))))) ? true : false);
	// 1141932032  <=>  {u_0_phi_15 : 1141932032}
	u_1_3 = u_0_phi_15;
	u_1_phi_16 = u_1_3;
	// True  <=>  if({b_0_5 : True})
	if(b_0_5)
	{
		//计算2个条件的商 (vs_cbuf10[2].x - in_attr5.w) / in_attr4.w 或者如果前一个条件为真的话 (pf_0_3 - floor(pf_0_3)) / pf_0_3
		
		// 1058273231  <=>  ftou(({utof(u_0_phi_15) : 578.00} * (1.0 / {utof(u_3_phi_15) : 1000.00})))
		u_1_4 = ftou((utof(u_0_phi_15) * (1.0 / utof(u_3_phi_15))));
		u_1_phi_16 = u_1_4;
	}
	
	// (vs_cbuf9[114].x - vs_cbuf9[113].x) / (vs_cbuf9[114].w - vs_cbuf9[113].w)
	// 10.00  <=>  (({utof(vs_cbuf9[114].x) : 1.00} + (0. - {utof(vs_cbuf9[113].x) : 0.00})) * (1.0 / ((0. - {utof(vs_cbuf9[113].w) : 0.00}) + {utof(vs_cbuf9[114].w) : 0.10})))
	pf_4_2 = ((utof(vs_cbuf9[114].x) + (0. - utof(vs_cbuf9[113].x))) * (1.0 / ((0. - utof(vs_cbuf9[113].w)) + utof(vs_cbuf9[114].w))));
	
	// 当前序列帧对的uv坐标的u值
	// 0.2858  <=>  clamp((floor(({in_attr7.x : 0.33394} * 8.)) * 0.1429), 0.0, 1.0)
	f_8_1 = clamp((floor((in_attr7.x * 8.)) * 0.1429), 0.0, 1.0);
	// in_attr1.z是从6点开始逆时针方向的顶点序号，中心点为12，这里是用作纹理查询的像素y坐标
	// 12  <=>  (isnan({in_attr1.z : 12.00}) ? 0u : int(clamp(trunc({in_attr1.z : 12.00}), float(-2147483600.), float(2147483600.))))
	u_2_5 = (isnan(in_attr1.z) ? 0u : int(clamp(trunc(in_attr1.z), float(-2147483600.), float(2147483600.))));
	// tex0的size是8*13
	// 7.00  <=>  (float(int({uvec4(uvec2(textureSize({tex0 : tex0}, int(0u))), 0u, 0u).x : 8})) + -1.)
	pf_7_0 = (float(int(uvec4(uvec2(textureSize(tex0, int(0u))), 0u, 0u).x)) + -1.);
	// 计算像素坐标x
	// 2.0006  <=>  ({pf_7_0 : 7.00} * {f_8_1 : 0.2858})
	pf_8_0 = (pf_7_0 * f_8_1);
	// 2  <=>  (isnan({pf_8_0 : 2.0006}) ? 0u : int(clamp(trunc({pf_8_0 : 2.0006}), float(-2147483600.), float(2147483600.))))
	u_3_7 = (isnan(pf_8_0) ? 0u : int(clamp(trunc(pf_8_0), float(-2147483600.), float(2147483600.))));
	// 3  <=>  min(int((isnan({pf_7_0 : 7.00}) ? 0u : int(clamp(trunc({pf_7_0 : 7.00}), float(-2147483600.), float(2147483600.))))), int(({u_3_7 : 2} + 1u)))
	u_0_11 = min(int((isnan(pf_7_0) ? 0u : int(clamp(trunc(pf_7_0), float(-2147483600.), float(2147483600.))))), int((u_3_7 + 1u)));
	// uvec2(2,12)  <=>  uvec2({u_3_7 : 2}, {u_2_5 : 12})
	u2_0_0 = uvec2(u_3_7, u_2_5);
	// 8*13的纹理，列对应动画序列帧，行对应顶点
	// 取第一个像素的R通道值
	// vec4(0.50,0.50,0.50,1.00)  <=>  texelFetch({tex0 : tex0}, ivec2({u2_0_0 : uvec2(2,12)}), int(0u))
	f4_0_0 = texelFetch(tex0, ivec2(u2_0_0), int(0u));
	// 0.50  <=>  {f4_0_0.x : 0.50}
	f_1_18 = f4_0_0.x;
	// 取同一行后面一个像素的G通道值
	// vec4(0.50,0.50,0.50,1.00)  <=>  texelFetch({tex0 : tex0}, ivec2(uvec2({u_0_11 : 3}, {u_2_5 : 12})), int(0u))
	f4_0_1 = texelFetch(tex0, ivec2(uvec2(u_0_11, u_2_5)), int(0u));
	// 0.50  <=>  {f4_0_1.y : 0.50}
	f_9_2 = f4_0_1.y;
	
	// 前面的2个条件的商与vs_cbuf9[113].w比较
	// 1065353216  <=>  (((({utof(u_1_phi_16) : 0.578} >= {utof(vs_cbuf9[113].w) : 0.00}) && (! isnan({utof(u_1_phi_16) : 0.578}))) && (! isnan({utof(vs_cbuf9[113].w) : 0.00}))) ? 1065353216u : 0u)
	u_0_12 = ((((utof(u_1_phi_16) >= utof(vs_cbuf9[113].w)) && (! isnan(utof(u_1_phi_16)))) && (! isnan(utof(vs_cbuf9[113].w)))) ? 1065353216u : 0u);
	
	// 序列帧下标，8是总帧数
	// 2.00  <=>  floor(({in_attr7.x : 0.33394} * 8.))
	out_attr6.x = floor((in_attr7.x * 8.));
	
	// 前面的2个条件的商与vs_cbuf9[114].w比较
	// 1065353216  <=>  (((({utof(u_1_phi_16) : 0.578} >= {utof(vs_cbuf9[114].w) : 0.10}) && (! isnan({utof(u_1_phi_16) : 0.578}))) && (! isnan({utof(vs_cbuf9[114].w) : 0.10}))) ? 1065353216u : 0u)
	u_2_6 = ((((utof(u_1_phi_16) >= utof(vs_cbuf9[114].w)) && (! isnan(utof(u_1_phi_16)))) && (! isnan(utof(vs_cbuf9[114].w)))) ? 1065353216u : 0u);
	// 1.00  <=>  {utof(u_0_12) : 1.00}
	f_4_8 = utof(u_0_12);
	
	// 不清楚这个计算的涵义
	// (vs_cbuf9[116].x - vs_cbuf9[115].x) / (vs_cbuf9[116].w - vs_cbuf9[115].w)
	// -10.00  <=>  (({utof(vs_cbuf9[116].x) : 0.00} + (0. - {utof(vs_cbuf9[115].x) : 1.00})) * (1.0 / ((0. - {utof(vs_cbuf9[115].w) : 0.90}) + {utof(vs_cbuf9[116].w) : 1.00})))
	pf_10_1 = ((utof(vs_cbuf9[116].x) + (0. - utof(vs_cbuf9[115].x))) * (1.0 / ((0. - utof(vs_cbuf9[115].w)) + utof(vs_cbuf9[116].w))));
	
	// 不清楚这个计算的涵义
	// (vs_cbuf9[115].x - vs_cbuf9[114].x) / (vs_cbuf9[115].w - vs_cbuf9[114].w)
	// 0.00  <=>  (((0. - {utof(vs_cbuf9[114].x) : 1.00}) + {utof(vs_cbuf9[115].x) : 1.00}) * (1.0 / ({utof(vs_cbuf9[115].w) : 0.90} + (0. - {utof(vs_cbuf9[114].w) : 0.10}))))
	pf_9_2 = (((0. - utof(vs_cbuf9[114].x)) + utof(vs_cbuf9[115].x)) * (1.0 / (utof(vs_cbuf9[115].w) + (0. - utof(vs_cbuf9[114].w)))));
	
	// 这个计算不知道意图是什么
	// pf_4_2 = (vs_cbuf9[114].x - vs_cbuf9[113].x) / (vs_cbuf9[114].w - vs_cbuf9[113].w)
	// (pf_4_2 * (u_1_phi_16 - vs_cbuf9[113].w) + vs_cbuf9[113].x) * (u_0_12 - u_2_6 * f_4_8) + vs_cbuf9[113].x * (1 - u_0_12)
	// 0.00  <=>  (({pf_4_2 : 10.00} * ({utof(u_1_phi_16) : 0.578} + (0. - {utof(vs_cbuf9[113].w) : 0.00})) + {utof(vs_cbuf9[113].x) : 0.00}) * ({utof(u_2_6) : 1.00} * (0. - {f_4_8 : 1.00}) + {utof(u_0_12) : 1.00}) + ({utof(u_0_12) : 1.00} * (0. - {utof(vs_cbuf9[113].x) : 0.00}) + {utof(vs_cbuf9[113].x) : 0.00}))
	pf_4_4 = ((pf_4_2 * (utof(u_1_phi_16) + (0. - utof(vs_cbuf9[113].w))) + utof(vs_cbuf9[113].x)) * (utof(u_2_6) * (0. - f_4_8) + utof(u_0_12)) + (utof(u_0_12) * (0. - utof(vs_cbuf9[113].x)) + utof(vs_cbuf9[113].x)));
	
	// 2x2代数余子式的值
	// vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z
	// 0.8242117  <=>  ({utof(vs_cbuf8[2].z) : 0.8242117} * {utof(vs_cbuf8[3].w) : 1.00} + (0. - ({utof(vs_cbuf8[2].w) : -2058.403} * {utof(vs_cbuf8[3].z) : 0.00})))
	pf_7_5 = (utof(vs_cbuf8[2].z) * utof(vs_cbuf8[3].w) + (0. - (utof(vs_cbuf8[2].w) * utof(vs_cbuf8[3].z))));
	
	// 2x2代数余子式的值
	// vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x
	// 0.00  <=>  ({utof(vs_cbuf8[2].x) : -0.0931343} * {utof(vs_cbuf8[3].z) : 0.00} + (0. - ({utof(vs_cbuf8[2].z) : 0.8242117} * {utof(vs_cbuf8[3].x) : 0.00})))
	pf_13_1 = (utof(vs_cbuf8[2].x) * utof(vs_cbuf8[3].z) + (0. - (utof(vs_cbuf8[2].z) * utof(vs_cbuf8[3].x))));
	
	// in_attr9.xyz、in_attr10.xyz、in_attr11.xyz可能是3x3矩阵，w是2个坐标系原点偏差
	// 这句像是求in_attr4.xyz坐标转换到新坐标系后的x坐标，(先旋转，再平移)
	// 564.6999  <=>  (({in_attr4.z : -1225.846} * {in_attr9.z : 0.00} + ({in_attr4.y : -253.9866} * {in_attr9.y : 0.00} + ({in_attr4.x : 277.3888} * {in_attr9.x : 1.00}))) + {in_attr9.w : 287.3111})
	pf_6_4 = ((in_attr4.z * in_attr9.z + (in_attr4.y * in_attr9.y + (in_attr4.x * in_attr9.x))) + in_attr9.w);
	
	// 2x2代数余子式的值
	// vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y
	// 0.00  <=>  ({utof(vs_cbuf8[2].y) : 0.5585706} * {utof(vs_cbuf8[3].z) : 0.00} + (0. - ({utof(vs_cbuf8[2].z) : 0.8242117} * {utof(vs_cbuf8[3].y) : 0.00})))
	pf_20_0 = (utof(vs_cbuf8[2].y) * utof(vs_cbuf8[3].z) + (0. - (utof(vs_cbuf8[2].z) * utof(vs_cbuf8[3].y))));
	
	// 前面的2个条件的商与vs_cbuf9[115].w比较
	// 0  <=>  (((({utof(u_1_phi_16) : 0.578} >= {utof(vs_cbuf9[115].w) : 0.90}) && (! isnan({utof(u_1_phi_16) : 0.578}))) && (! isnan({utof(vs_cbuf9[115].w) : 0.90}))) ? 1065353216u : 0u)
	u_0_13 = ((((utof(u_1_phi_16) >= utof(vs_cbuf9[115].w)) && (! isnan(utof(u_1_phi_16)))) && (! isnan(utof(vs_cbuf9[115].w)))) ? 1065353216u : 0u);
	
	// 用代数余子式计算3x3行列式值的其中一个元素
	// (vs_cbuf8[2].z * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].z) * vs_cbuf8[1].y
	// 0.00  <=>  (({utof(vs_cbuf8[2].z) : 0.8242117} * {utof(vs_cbuf8[3].x) : 0.00} + (0. - ({utof(vs_cbuf8[2].x) : -0.0931343} * {utof(vs_cbuf8[3].z) : 0.00}))) * {utof(vs_cbuf8[1].y) : 0.829457})
	pf_11_3 = ((utof(vs_cbuf8[2].z) * utof(vs_cbuf8[3].x) + (0. - (utof(vs_cbuf8[2].x) * utof(vs_cbuf8[3].z)))) * utof(vs_cbuf8[1].y));
	
	// 这句像是求in_attr4.xyz坐标转换到新坐标系后的y坐标，(先旋转，再平移)
	// 1268.1574  <=>  (({in_attr4.z : -1225.846} * {in_attr10.z : 0.00} + ({in_attr4.y : -253.9866} * {in_attr10.y : 1.00} + ({in_attr4.x : 277.3888} * {in_attr10.x : 0.00}))) + {in_attr10.w : 1522.144})
	pf_5_3 = ((in_attr4.z * in_attr10.z + (in_attr4.y * in_attr10.y + (in_attr4.x * in_attr10.x))) + in_attr10.w);
	
	// dx = vs_cbuf8[29].x - pf_6_4
	// -277.3888  <=>  ((0. - {pf_6_4 : 564.6999}) + {utof(vs_cbuf8[29].x) : 287.3111})
	pf_22_0 = ((0. - pf_6_4) + utof(vs_cbuf8[29].x));
	
	// 这个计算不知道意图是什么
	// u_1_phi_16 = (vs_cbuf10[2].x - in_attr5.w) / in_attr4.w
	// pf_9_2 = (vs_cbuf9[115].x - vs_cbuf9[114].x) / (vs_cbuf9[115].w - vs_cbuf9[114].w)
	// (vs_cbuf9[115].x - vs_cbuf9[114].x) * u_1_phi_16 / (vs_cbuf9[115].w - vs_cbuf9[114].w) - (vs_cbuf9[115].x * vs_cbuf9[114].w - vs_cbuf9[115].w * vs_cbuf9[114].x) / (vs_cbuf9[115].w - vs_cbuf9[114].w)
	// 1.00  <=>  ({pf_9_2 : 0.00} * ({utof(u_1_phi_16) : 0.578} + (0. - {utof(vs_cbuf9[114].w) : 0.10})) + {utof(vs_cbuf9[114].x) : 1.00})
	pf_9_3 = (pf_9_2 * (utof(u_1_phi_16) + (0. - utof(vs_cbuf9[114].w))) + utof(vs_cbuf9[114].x));
	
	// 0.00  <=>  {utof(u_0_13) : 0.00}
	f_3_32 = utof(u_0_13);
	// 1.00  <=>  {utof(u_2_6) : 1.00}
	f_4_28 = utof(u_2_6);
	
	// 2x2代数余子式的值
	// vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w
	// 0.0931343  <=>  ({utof(vs_cbuf8[2].w) : -2058.403} * {utof(vs_cbuf8[3].x) : 0.00} + (0. - ({utof(vs_cbuf8[2].x) : -0.0931343} * {utof(vs_cbuf8[3].w) : 1.00})))
	pf_18_1 = (utof(vs_cbuf8[2].w) * utof(vs_cbuf8[3].x) + (0. - (utof(vs_cbuf8[2].x) * utof(vs_cbuf8[3].w))));
	
	// dy = vs_cbuf8[29].y - pf_5_3
	// 403.987  <=>  ((0. - {pf_5_3 : 1268.157}) + {utof(vs_cbuf8[29].y) : 1672.144})
	pf_23_0 = ((0. - pf_5_3) + utof(vs_cbuf8[29].y));
	
	// 这句像是求in_attr4.xyz坐标转换到新坐标系后的z坐标，(先旋转，再平移)
	// 170.824  <=>  (({in_attr4.z : -1225.846} * {in_attr11.z : 1.00} + ({in_attr4.y : -253.9866} * {in_attr11.y : 0.00} + ({in_attr4.x : 277.3888} * {in_attr11.x : 0.00}))) + {in_attr11.w : 1396.67})
	pf_0_11 = ((in_attr4.z * in_attr11.z + (in_attr4.y * in_attr11.y + (in_attr4.x * in_attr11.x))) + in_attr11.w);
	
	// 用代数余子式计算3x3行列式值的其中一个元素
	// (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[1].x
	// 0.03503254260492  <=>  (({utof(vs_cbuf8[2].y) : 0.5585706} * {utof(vs_cbuf8[3].w) : 1.00} + (0. - ({utof(vs_cbuf8[2].w) : -2058.403} * {utof(vs_cbuf8[3].y) : 0.00}))) * {utof(vs_cbuf8[1].x) : 0.0627182})
	pf_9_4 = ((utof(vs_cbuf8[2].y) * utof(vs_cbuf8[3].w) + (0. - (utof(vs_cbuf8[2].w) * utof(vs_cbuf8[3].y)))) * utof(vs_cbuf8[1].x));
	
	// 用代数余子式计算3x3行列式值的其中两个元素的值之和
	// (vs_cbuf8[3].z * vs_cbuf8[2].y - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[1].x + pf_11_3
	// 0.00  <=>  (({utof(vs_cbuf8[3].z) : 0.00} * {utof(vs_cbuf8[2].y) : 0.5585706} + (0. - ({utof(vs_cbuf8[2].z) : 0.8242117} * {utof(vs_cbuf8[3].y) : 0.00}))) * {utof(vs_cbuf8[1].x) : 0.0627182} + {pf_11_3 : 0.00})
	pf_11_4 = ((utof(vs_cbuf8[3].z) * utof(vs_cbuf8[2].y) + (0. - (utof(vs_cbuf8[2].z) * utof(vs_cbuf8[3].y)))) * utof(vs_cbuf8[1].x) + pf_11_3);
	
	// dz = vs_cbuf8[29].z - pf_0_11
	// 1225.845  <=>  ((0. - {pf_0_11 : 170.824}) + {utof(vs_cbuf8[29].z) : 1396.669})
	pf_24_1 = ((0. - pf_0_11) + utof(vs_cbuf8[29].z));
	
	// 用代数余子式计算3x3行列式值的其中一个元素
	// -0.00  <=>  ({pf_13_1 : 0.00} * {utof(vs_cbuf8[1].w) : -629.7858})
	pf_25_0 = (pf_13_1 * utof(vs_cbuf8[1].w));
	
	// 用代数余子式计算3x3行列式值的其中两个元素的值之和
	// (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[1].w + pf_9_4
	// 0.0350325  <=>  (({utof(vs_cbuf8[2].x) : -0.0931343} * {utof(vs_cbuf8[3].y) : 0.00} + (0. - ({utof(vs_cbuf8[3].x) : 0.00} * {utof(vs_cbuf8[2].y) : 0.5585706}))) * {utof(vs_cbuf8[1].w) : -629.7858} + {pf_9_4 : 0.0350325})
	pf_9_5 = ((utof(vs_cbuf8[2].x) * utof(vs_cbuf8[3].y) + (0. - (utof(vs_cbuf8[3].x) * utof(vs_cbuf8[2].y)))) * utof(vs_cbuf8[1].w) + pf_9_4);
	
	// 用代数余子式计算3x3行列式值的其中两个元素的值之和个元素
	// (vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z + pf_7_5 * vs_cbuf8[0].y
	// -0.06271820610804  <=>  (({utof(vs_cbuf8[2].w) : -2058.403} * {utof(vs_cbuf8[3].y) : 0.00} + (0. - ({utof(vs_cbuf8[2].y) : 0.5585706} * {utof(vs_cbuf8[3].w) : 1.00}))) * {utof(vs_cbuf8[0].z) : 0.1122834} + ({pf_7_5 : 0.8242117} * {utof(vs_cbuf8[0].y) : 0.00}))
	pf_12_2 = ((utof(vs_cbuf8[2].w) * utof(vs_cbuf8[3].y) + (0. - (utof(vs_cbuf8[2].y) * utof(vs_cbuf8[3].w)))) * utof(vs_cbuf8[0].z) + (pf_7_5 * utof(vs_cbuf8[0].y)));
	
	// 用代数余子式计算3x3行列式值的其中一个元素
	// (vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[2].w) * vs_cbuf8[1].z
	// 0.31002807625398  <=>  (({utof(vs_cbuf8[2].w) : -2058.403} * {utof(vs_cbuf8[3].y) : 0.00} + (0. - ({utof(vs_cbuf8[3].w) : 1.00} * {utof(vs_cbuf8[2].y) : 0.5585706}))) * {utof(vs_cbuf8[1].z) : -0.5550383})
	pf_15_2 = ((utof(vs_cbuf8[2].w) * utof(vs_cbuf8[3].y) + (0. - (utof(vs_cbuf8[3].w) * utof(vs_cbuf8[2].y)))) * utof(vs_cbuf8[1].z));
	
	// 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// 1742845.964025  <=>  ({pf_24_1 : 1225.845} * {pf_24_1 : 1225.845} + ({pf_23_0 : 403.987} * {pf_23_0 : 403.987} + ({pf_22_0 : -277.3888} * {pf_22_0 : -277.3888})))
	pf_17_3 = (pf_24_1 * pf_24_1 + (pf_23_0 * pf_23_0 + (pf_22_0 * pf_22_0)));
	
	// 用代数余子式计算3x3行列式值的其中一个元素
	// (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	// 0.55503831123972  <=>  (({utof(vs_cbuf8[2].y) : 0.5585706} * {utof(vs_cbuf8[3].w) : 1.00} + (0. - ({utof(vs_cbuf8[2].w) : -2058.403} * {utof(vs_cbuf8[3].y) : 0.00}))) * {utof(vs_cbuf8[0].x) : 0.9936762})
	pf_16_2 = ((utof(vs_cbuf8[2].y) * utof(vs_cbuf8[3].w) + (0. - (utof(vs_cbuf8[2].w) * utof(vs_cbuf8[3].y)))) * utof(vs_cbuf8[0].x));
	
	// 用代数余子式计算3x3行列式值（三个元素之和）
	// (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[1].z + pf_11_4
	// 0.00  <=>  (({utof(vs_cbuf8[2].x) : -0.0931343} * {utof(vs_cbuf8[3].y) : 0.00} + (0. - ({utof(vs_cbuf8[2].y) : 0.5585706} * {utof(vs_cbuf8[3].x) : 0.00}))) * {utof(vs_cbuf8[1].z) : -0.5550383} + {pf_11_4 : 0.00})
	pf_11_5 = ((utof(vs_cbuf8[2].x) * utof(vs_cbuf8[3].y) + (0. - (utof(vs_cbuf8[2].y) * utof(vs_cbuf8[3].x)))) * utof(vs_cbuf8[1].z) + pf_11_4);
	
	// 用代数余子式计算3x3行列式值（三个元素之和）
	// pf_7_5 * vs_cbuf8[1].x + pf_18_1 * vs_cbuf8[1].z + pf_25_0
	// -0.00000002575706  <=>  ({pf_7_5 : 0.8242117} * {utof(vs_cbuf8[1].x) : 0.0627182} + ({pf_18_1 : 0.0931343} * {utof(vs_cbuf8[1].z) : -0.5550383} + {pf_25_0 : -0.00}))
	pf_7_6 = (pf_7_5 * utof(vs_cbuf8[1].x) + (pf_18_1 * utof(vs_cbuf8[1].z) + pf_25_0));
	
	// 用代数余子式计算3x3行列式值的其中两个元素的值之和
	// pf_18_1 * vs_cbuf8[0].y + pf_16_2
	// 0.5550383  <=>  ({pf_18_1 : 0.0931343} * {utof(vs_cbuf8[0].y) : 0.00} + {pf_16_2 : 0.5550383})
	pf_16_3 = (pf_18_1 * utof(vs_cbuf8[0].y) + pf_16_2);
	
	// dy/r
	// pf_23_0 = dy = vs_cbuf8[29].y - pf_5_3
	// 0.3060201525  <=>  ({pf_23_0 : 403.987} * inversesqrt({pf_17_3 : 1742846.00}))
	pf_17_5 = (pf_23_0 * inversesqrt(pf_17_3));
	
	// 参与计算输出颜色一部分的系数的指数
	// 175.4452  <=>  (({in_attr6.y : 175.4452} * {utof(vs_cbuf9[141].y) : 1.00}) * {utof(vs_cbuf10[3].z) : 1.00})
	out_attr5.y = ((in_attr6.y * utof(vs_cbuf9[141].y)) * utof(vs_cbuf10[3].z));
	
	// dz/r
	// 0.9285775875  <=>  ({pf_24_1 : 1225.845} * inversesqrt({pf_17_3 : 1742846.00}))
	pf_18_2 = (pf_24_1 * inversesqrt(pf_17_3));
	
	// dx/r
	// -0.210122016  <=>  ({pf_22_0 : -277.3888} * inversesqrt({pf_17_3 : 1742846.00}))
	pf_19_3 = (pf_22_0 * inversesqrt(pf_17_3));
	
	// 用代数余子式计算3x3行列式值（三个元素之和）[2,3][0].wyx
	// (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y + (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	/*
	(
		(vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y +
		(vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	)
	*/
	// 0.5550383  <=>  (({utof(vs_cbuf8[2].x) : -0.0931343} * {utof(vs_cbuf8[3].y) : 0.00} + (0. - ({utof(vs_cbuf8[2].y) : 0.5585706} * {utof(vs_cbuf8[3].x) : 0.00}))) * {utof(vs_cbuf8[0].w) : -442.3171} + {pf_16_3 : 0.5550383})
	pf_14_2 = ((utof(vs_cbuf8[2].x) * utof(vs_cbuf8[3].y) + (0. - (utof(vs_cbuf8[2].y) * utof(vs_cbuf8[3].x)))) * utof(vs_cbuf8[0].w) + pf_16_3);
	
	// -dz/r
	// -0.9285776  <=>  (0. * {pf_17_5 : 0.3060201} + (0. - {pf_18_2 : 0.9285776}))
	pf_16_4 = (0. * pf_17_5 + (0. - pf_18_2));
	
	// 用代数余子式计算4x4行列式值的其中两个元素之和
	// (pf_20_0 * vs_cbuf8[1].w + pf_7_5 * vs_cbuf8[1].y + pf_15_2) * vs_cbuf8[0].x - pf_7_6 * vs_cbuf8[0].y
	// 0.9873924  <=>  ({pf_7_6 : -0.00} * (0. - {utof(vs_cbuf8[0].y) : 0.00}) + (({pf_20_0 : 0.00} * {utof(vs_cbuf8[1].w) : -629.7858} + ({pf_7_5 : 0.8242117} * {utof(vs_cbuf8[1].y) : 0.829457} + {pf_15_2 : 0.3100281})) * {utof(vs_cbuf8[0].x) : 0.9936762}))
	pf_7_7 = (pf_7_6 * (0. - utof(vs_cbuf8[0].y)) + ((pf_20_0 * utof(vs_cbuf8[1].w) + (pf_7_5 * utof(vs_cbuf8[1].y) + pf_15_2)) * utof(vs_cbuf8[0].x)));
	
	// dx/r
	// -0.210122  <=>  ((0. - 0.) + {pf_19_3 : -0.210122})
	pf_15_6 = ((0. - 0.) + pf_19_3);
	
	// inversesqrt((dx*dx + dz*dz) / (r*r))
	// 1.05036  <=>  inversesqrt(({pf_15_6 : -0.210122} * {pf_15_6 : -0.210122} + ({pf_16_4 : -0.9285776} * {pf_16_4 : -0.9285776} + 0.)))
	f_2_42 = inversesqrt((pf_15_6 * pf_15_6 + (pf_16_4 * pf_16_4 + 0.)));
	
	// vs_cbuf8[0\1\2\3]矩阵对应的行列式的值的倒数
	// pf_11_3 = (vs_cbuf8[2].z * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].z) * vs_cbuf8[1].y
	// pf_11_4 = (vs_cbuf8[3].z * vs_cbuf8[2].y - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[1].x + pf_11_3
	// pf_11_5 = (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[1].z + pf_11_4
	// pf_18_1 = vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w
	// pf_9_4 = (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[1].x
	// pf_9_5 = (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[1].w + pf_9_4
	// pf_20_0 = vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y
	// pf_7_5 = vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z
	// pf_15_2 = (vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[2].w) * vs_cbuf8[1].z
	// pf_25_0 = (vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[1].w
	// pf_7_6 = pf_7_5 * vs_cbuf8[1].x + pf_18_1 * vs_cbuf8[1].z + pf_25_0
	// pf_7_7 = (pf_20_0 * vs_cbuf8[1].w + pf_7_5 * vs_cbuf8[1].y + pf_15_2) * vs_cbuf8[0].x - pf_7_6 * vs_cbuf8[0].y
	/* 1 / (
	(
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[1].y +
		(vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[1].w +
		(vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[1].x
	) * vs_cbuf8[0].z +
	(
		(vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[1].w +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[1].y +
		(vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[2].w) * vs_cbuf8[1].z
	) * vs_cbuf8[0].x -
	(
		(vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[1].z +
		(vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[1].x +
		(vs_cbuf8[2].z * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].z) * vs_cbuf8[1].y
	) * vs_cbuf8[0].w -
	(
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[1].x +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[1].z +
		(vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[1].w
	) * vs_cbuf8[0].y
		)
	*/
	// 按行1拆分余子项再按0拆分
	// det(A) = -[1].x * [2,3][0].yzw + [1].y * [2,3][0].xzw - [1].z * [2,3][0].xyw + [1].w * [2,3][0].xyz
	// 1.00000010000001  <=>  (1.0 / ({pf_11_5 : 0.00} * (0. - {utof(vs_cbuf8[0].w) : -442.3171}) + (({pf_18_1 : 0.0931343} * {utof(vs_cbuf8[1].y) : 0.829457} + {pf_9_5 : 0.0350325}) * {utof(vs_cbuf8[0].z) : 0.1122834} + {pf_7_7 : 0.9873924})))
	f_4_43 = (1.0 / (pf_11_5 * (0. - utof(vs_cbuf8[0].w)) + ((pf_18_1 * utof(vs_cbuf8[1].y) + pf_9_5) * utof(vs_cbuf8[0].z) + pf_7_7)));
	
	// 不清楚为啥有这么多用常量0作乘数的乘法， - dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// 0.0675398  <=>  ({pf_18_2 : 0.9285776} * (0. * {f_2_42 : 1.05036}) + (0. - ({pf_17_5 : 0.3060201} * ({pf_15_6 : -0.210122} * {f_2_42 : 1.05036}))))
	pf_15_8 = (pf_18_2 * (0. * f_2_42) + (0. - (pf_17_5 * (pf_15_6 * f_2_42))));
	
	// ((dx*dx + dz*dz)/(r*r)) * inversesqrt((dx*dx+dz*dz)/(r*r))
	// sqrt((dx*dx + dz*dz)/(r*r))
	// 0.9520543238636  <=>  ({pf_19_3 : -0.210122} * ({pf_15_6 : -0.210122} * {f_2_42 : 1.05036}) + (0. - ({pf_18_2 : 0.9285776} * ({pf_16_4 : -0.9285776} * {f_2_42 : 1.05036}))))
	pf_7_11 = (pf_19_3 * (pf_15_6 * f_2_42) + (0. - (pf_18_2 * (pf_16_4 * f_2_42))));
	
	// - dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// -0.29847388915008  <=>  ({pf_17_5 : 0.3060201} * ({pf_16_4 : -0.9285776} * {f_2_42 : 1.05036}) + (0. - ({pf_19_3 : -0.210122} * (0. * {f_2_42 : 1.05036}))))
	pf_9_9 = (pf_17_5 * (pf_16_4 * f_2_42) + (0. - (pf_19_3 * (0. * f_2_42))));
	
	// ((dx*dx + dz*dz) * (dx*dx + dz*dz) /(r*r*r*r)) * ((r*r)/(dx*dx+dz*dz)) + dy*dy * dx*dx /(r*r*r*r) * ((r*r)/(dx*dx+dz*dz))
	// ((dx*dx + dz*dz) * (dx*dx + dz*dz) + dy*dy * dx*dx) / (r*r*(dx*dx+dz*dz))
	// 0.91096899014849  <=>  ({pf_7_11 : 0.9520543} * {pf_7_11 : 0.9520543} + ({pf_15_8 : 0.0675398} * {pf_15_8 : 0.0675398}))
	pf_11_8 = (pf_7_11 * pf_7_11 + (pf_15_8 * pf_15_8));
	
	// ((dx*dx + dz*dz) * (dx*dx + dz*dz) + dy*dy * dx*dx) / (r*r*(dx*dx+dz*dz)) + dy*dy * dz*dz / (r*r*r*r) * ((r*r)/(dx*dx+dz*dz))
	// ((dx*dx + dz*dz) * (dx*dx + dz*dz) + dy*dy * dx*dx + dy*dy * dz*dz) / ((r*r)*(dx*dx+dz*dz))
	// ((dx*dx + dz*dz) + dy*dy) * (dx*dx + dz*dz) / ((r*r)*(dx*dx+dz*dz))
	// (dx*dx + dy*dy + dz*dz) / (r*r)
	// => 1
	// 1.00005566898121  <=>  ({pf_9_9 : -0.2984739} * {pf_9_9 : -0.2984739} + {pf_11_8 : 0.910969})
	pf_11_9 = (pf_9_9 * pf_9_9 + pf_11_8);
	
	// 奇怪的计算过程，最后算出来全抵消了。。
	// 0.999972  <=>  inversesqrt({pf_11_9 : 1.000056})
	f_2_50 = inversesqrt(pf_11_9);
	
	// 4x4矩阵按代数余子式计算的其中一个3x3代数余子式的值（[2,3][0].xzw）除以整个行列式的值
	// (pf_13_1 * vs_cbuf8[0].w + pf_18_1 * vs_cbuf8[0].z + pf_7_5 * vs_cbuf8[0].x) * f_4_43
	/*
	(
		(vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x
	) * f_4_43
	*/
	// 简写成 f_4_43 * [2,3][0].xzw
	// 0.8294569  <=>  (({pf_13_1 : 0.00} * {utof(vs_cbuf8[0].w) : -442.3171} + ({pf_18_1 : 0.0931343} * {utof(vs_cbuf8[0].z) : 0.1122834} + ({pf_7_5 : 0.8242117} * {utof(vs_cbuf8[0].x) : 0.9936762}))) * {f_4_43 : 1.00})
	pf_11_10 = ((pf_13_1 * utof(vs_cbuf8[0].w) + (pf_18_1 * utof(vs_cbuf8[0].z) + (pf_7_5 * utof(vs_cbuf8[0].x)))) * f_4_43);
	
	// 0.00  <=>  {utof(u_0_13) : 0.00}
	f_4_45 = utof(u_0_13);
	
	// 前面的2个条件的商与vs_cbuf9[116].w比较
	// 0.00  <=>  {utof((((({utof(u_1_phi_16) : 0.578} >= {utof(vs_cbuf9[116].w) : 1.00}) && (! isnan({utof(u_1_phi_16) : 0.578}))) && (! isnan({utof(vs_cbuf9[116].w) : 1.00}))) ? 1065353216u : 0u)) : 0.00}
	f_5_13 = utof(((((utof(u_1_phi_16) >= utof(vs_cbuf9[116].w)) && (! isnan(utof(u_1_phi_16)))) && (! isnan(utof(vs_cbuf9[116].w)))) ? 1065353216u : 0u));
	
	// 0.00  <=>  {utof(u_0_13) : 0.00}
	f_11_3 = utof(u_0_13);
	
	// 4x4矩阵按代数余子式计算的其中一个3x3代数余子式的值（[2,3][0].yzw）除以整个行列式的值再乘上dy/r
	// pf_17_5 = dy/r
	// pf_20_0 = vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y
	// pf_7_5 = vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z
	// pf_12_2 = (vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z + pf_7_5 * vs_cbuf8[0].y
	// pf_17_5 * (pf_20_0 * vs_cbuf8[0].w + pf_12_2) * f_4_43
	/*
	dy/r * f_4_43 * (
		(vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].y
	)
	*/
	// 简写成 dy/r * f_4_43 * [2,3][0].yzw
	// -0.019193  <=>  (0. - ({pf_17_5 : 0.3060201} * (({pf_20_0 : 0.00} * {utof(vs_cbuf8[0].w) : -442.3171} + {pf_12_2 : -0.0627182}) * (0. - {f_4_43 : 1.00}))))
	f_4_46 = (0. - (pf_17_5 * ((pf_20_0 * utof(vs_cbuf8[0].w) + pf_12_2) * (0. - f_4_43))));
	
	// 不知道这个计算的涵义，这个值只在out_attr0.w的计算里使用了一次
	// u_1_phi_16 = (vs_cbuf10[2].x - in_attr5.w) / in_attr4.w
	// pf_10_1 = (vs_cbuf9[116].x - vs_cbuf9[115].x) / (vs_cbuf9[116].w - vs_cbuf9[115].w)
	// pf_9_2 = (vs_cbuf9[115].x - vs_cbuf9[114].x) / (vs_cbuf9[115].w - vs_cbuf9[114].w)
	// pf_4_2 = (vs_cbuf9[114].x - vs_cbuf9[113].x) / (vs_cbuf9[114].w - vs_cbuf9[113].w)
	// pf_4_2_1 = pf_4_2 * (u_1_phi_16 - vs_cbuf9[113].w) + vs_cbuf9[113].x
	// pf_4_4 = pf_4_2_1 * (u_0_12 - u_2_6 * f_4_8) + vs_cbuf9[113].x * (1 - u_0_12)
	// pf_9_3 = pf_9_2 * (u_1_phi_16 - vs_cbuf9[114].w) + vs_cbuf9[114].x
	// pf_10_1_1 = pf_10_1 * (u_1_phi_16 - vs_cbuf9[115].w) + vs_cbuf9[115].x
	// 括号内的各变量均为0或1，是相应的条件判断结果
	// pf_10_1_1 * (f_4_45 - f_11_3 * f_5_13) + pf_9_3 * (u_2_6 - f_4_28 * f_3_32) + pf_4_2_1 * (u_0_12 - u_2_6 * f_4_8) + vs_cbuf9[113].x * (1 - u_0_12)
	// 1.00  <=>  (({pf_10_1 : -10.00} * ({utof(u_1_phi_16) : 0.578} + (0. - {utof(vs_cbuf9[115].w) : 0.90})) + {utof(vs_cbuf9[115].x) : 1.00}) * ({f_11_3 : 0.00} * (0. - {f_5_13 : 0.00}) + {f_4_45 : 0.00}) + ({pf_9_3 : 1.00} * ({f_4_28 : 1.00} * (0. - {f_3_32 : 0.00}) + {utof(u_2_6) : 1.00}) + {pf_4_4 : 0.00}))
	pf_4_6 = ((pf_10_1 * (utof(u_1_phi_16) + (0. - utof(vs_cbuf9[115].w))) + utof(vs_cbuf9[115].x)) * (f_11_3 * (0. - f_5_13) + f_4_45) + (pf_9_3 * (f_4_28 * (0. - f_3_32) + utof(u_2_6)) + pf_4_4));
	
	// f_2_50恒为1
	// sqrt((dx*dx + dz*dz)/(r*r))
	// 0.9520276424796  <=>  ({pf_7_11 : 0.9520543} * {f_2_50 : 0.999972})
	pf_7_12 = (pf_7_11 * f_2_50);
	
	// 4x4矩阵按代数余子式计算的其中两个3x3代数余子式的值（[2,3][0].xyw，-[2,3][0].yzw）除以整个行列式的值再分别乘上dx/r与dz/r后相加
	// 看起来是作为3D距离的一个分量
	// pf_19_3 = dx/r
	// pf_18_2 = dz/r
	// pf_14_2 = 用代数余子式计算3x3行列式值（三个元素之和）[2,3][0].xyw
	// pf_14_2 = (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y + (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	// pf_20_0 = vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y
	// pf_7_5 = vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z
	// pf_12_2 = (vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z + pf_7_5 * vs_cbuf8[0].y
	// pf_19_3 * pf_14_2 * f_4_43 - pf_18_2 * ((pf_20_0 * vs_cbuf8[0].w + pf_12_2) * f_4_43)
	/*
	dx/r * f_4_43 * (
		(vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y +
		(vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	) -
	dz/r * f_4_43 * (
		(vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].y
	)
	*/
	// 简写为 dx/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].yzw
	// -0.05838708436768  <=>  ({pf_18_2 : 0.9285776} * (({pf_20_0 : 0.00} * {utof(vs_cbuf8[0].w) : -442.3171} + {pf_12_2 : -0.0627182}) * (0. - {f_4_43 : 1.00})) + (0. - ({pf_19_3 : -0.210122} * ({pf_14_2 : 0.5550383} * (0. - {f_4_43 : 1.00})))))
	pf_14_4 = (pf_18_2 * ((pf_20_0 * utof(vs_cbuf8[0].w) + pf_12_2) * (0. - f_4_43)) + (0. - (pf_19_3 * (pf_14_2 * (0. - f_4_43)))));
	
	// 4x4矩阵按代数余子式计算的其中两个3x3代数余子式的值（-[2,3][0].xyw，-[2,3][0].xzw）除以整个行列式的值再分别乘上dy/r与dz/r后相加
	// 看起来是作为3D距离的一个分量
	// pf_17_5 = dy/r
	// pf_18_2 = dz/r
	// pf_14_2 = (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y + (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	// pf_11_10 = ((vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z + (vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x) * f_4_43
	// -pf_17_5 * pf_14_2 * f_4_43 - pf_18_2 * pf_11_10
	/*
	-dy/r * f_4_43 * (
		(vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y +
		(vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	) -
	dz/r * f_4_43 * (
		((vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x)
	)
	*/
	// 简写为 -dy/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].xzw
	// -0.94006797606983  <=>  ({pf_17_5 : 0.3060201} * ({pf_14_2 : 0.5550383} * (0. - {f_4_43 : 1.00})) + (0. - ({pf_18_2 : 0.9285776} * {pf_11_10 : 0.8294569})))
	pf_10_4 = (pf_17_5 * (pf_14_2 * (0. - f_4_43)) + (0. - (pf_18_2 * pf_11_10)));
	
	// 1 - clamp(pf_7_12, 0, 1)
	// 0.0479724  <=>  ((0. - clamp(({pf_7_12 : 0.9520276} + (0. - 0.)), 0.0, 1.0)) + 1.)
	pf_20_5 = ((0. - clamp((pf_7_12 + (0. - 0.)), 0.0, 1.0)) + 1.);
	
	// 前面的2个条件的商与vs_cbuf9[116].w比较
	// 0.00  <=>  {utof((((({utof(u_1_phi_16) : 0.578} >= {utof(vs_cbuf9[116].w) : 1.00}) && (! isnan({utof(u_1_phi_16) : 0.578}))) && (! isnan({utof(vs_cbuf9[116].w) : 1.00}))) ? 1065353216u : 0u)) : 0.00}
	f_11_4 = utof(((((utof(u_1_phi_16) >= utof(vs_cbuf9[116].w)) && (! isnan(utof(u_1_phi_16)))) && (! isnan(utof(vs_cbuf9[116].w)))) ? 1065353216u : 0u));
	
	// 0.88713675344641  <=>  ({pf_14_4 : -0.0583871} * {pf_14_4 : -0.0583871} + ({pf_10_4 : -0.9400679} * {pf_10_4 : -0.9400679}))
	pf_20_6 = (pf_14_4 * pf_14_4 + (pf_10_4 * pf_10_4));
	
	//经由vs_cbuf8[0~3]类矩阵计算的三个平方和开方的倒数
	// pf_19_3 = dx/r
	// pf_11_10 = ((vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z + (vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x) * f_4_43
	/*
	f_4_43 * (
		(vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x
	)
	*/
	// 4x4矩阵按代数余子式计算的其中两个3x3代数余子式的值（[2,3][0].xzw，[2,3][0].yzw）除以整个行列式的值再分别乘上dx/r与dy/r后相加
	// 看起来是作为3D距离的一个分量
	// pf_19_3 * pf_11_10 + f_4_46 = 
	/*
	dx/r * f_4_43 * (
		(vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x
	) +
	dy/r * f_4_43 * (
		(vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].y
	)
	*/
	// 简写为 dx/r * f_4_43 * [2,3][0].xzw + dy/r * f_4_43 * [2,3][0].yzw
	// 三项平方和
	/*
	pow(dx/r * f_4_43 * [2,3][0].xzw + dy/r * f_4_43 * [2,3][0].yzw, 2) +
	pow(dx/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].yzw, 2) +
	pow(-dy/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].xzw, 2)
	*/
	// 1.039991  <=>  inversesqrt((({pf_19_3 : -0.210122} * {pf_11_10 : 0.8294569} + {f_4_46 : -0.019193}) * ({pf_19_3 : -0.210122} * {pf_11_10 : 0.8294569} + {f_4_46 : -0.019193}) + {pf_20_6 : 0.8871368}))
	f_4_52 = inversesqrt(((pf_19_3 * pf_11_10 + f_4_46) * (pf_19_3 * pf_11_10 + f_4_46) + pf_20_6));
	
	// exp2(log2(1 - sqrt((dx*dx + dz*dz)/(r*r))) * vs_cbuf13[6].y)
	// 0.0479724  <=>  exp2((log2({pf_20_5 : 0.0479724}) * {utof(vs_cbuf13[6].y) : 1.00}))
	f_5_18 = exp2((log2(pf_20_5) * utof(vs_cbuf13[6].y)));
	
	// 1 - f_5_18
	// 0.9520276  <=>  ((0. - {f_5_18 : 0.0479724}) + 1.)
	pf_25_1 = ((0. - f_5_18) + 1.);
	
	// 2D平面内 -dz/rxz
	// pf_17_5 = dy/r
	// pf_18_2 = dz/r
	// pf_9_9 = - dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// f_2_50 = 1
	// pf_7_12 = sqrt((dx*dx + dz*dz)/(r*r))
	// -dz/r * inversesqrt((dx*dx + dz*dz)/(r*r))
	// -0.97536794215655  <=>  ({pf_17_5 : 0.3060201} * ({pf_9_9 : -0.2984739} * {f_2_50 : 0.999972}) + (0. - ({pf_18_2 : 0.9285776} * {pf_7_12 : 0.9520276})))
	pf_20_9 = (pf_17_5 * (pf_9_9 * f_2_50) + (0. - (pf_18_2 * pf_7_12)));
	
	//经由vs_cbuf8[0~3]类矩阵计算的分量1
	// f_5_18 * f_4_52 * (-dy/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].xzw)
	// -0.04690079732604  <=>  (({pf_10_4 : -0.9400679} * {f_4_52 : 1.039991}) * {f_5_18 : 0.0479724})
	pf_10_6 = ((pf_10_4 * f_4_52) * f_5_18);
	
	//经由vs_cbuf8[0~3]类矩阵计算的分量2
	// f_5_18 * f_4_52 * (dx/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].yzw)
	// -0.00291298487004  <=>  (({pf_14_4 : -0.0583871} * {f_4_52 : 1.039991}) * {f_5_18 : 0.0479724})
	pf_14_6 = ((pf_14_4 * f_4_52) * f_5_18);
	
	// 两项相同，相减结果为0
	// pf_19_3 = dx/r
	// pf_18_2 = dz/r
	// pf_15_8 = - dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// pf_9_9 = - dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// f_2_50 = 1
	// -dz/r * dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r)) + dx/r * dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// => 0
	// -0.00000001890896  <=>  ({pf_18_2 : 0.9285776} * ({pf_15_8 : 0.0675398} * {f_2_50 : 0.999972}) + (0. - ({pf_19_3 : -0.210122} * ({pf_9_9 : -0.2984739} * {f_2_50 : 0.999972}))))
	pf_21_7 = (pf_18_2 * (pf_15_8 * f_2_50) + (0. - (pf_19_3 * (pf_9_9 * f_2_50))));
	
	// 后面三个平方和的其中一个数，涵义不明
	// pf_15_8 = - dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// f_2_50 = 1
	// f_5_18 = exp2(log2(1 - sqrt((dx*dx + dz*dz)/(r*r))) * vs_cbuf13[6].y)
	// pf_25_1 = 1 - f_5_18
	// pf_20_0 = vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y
	// pf_7_5 = vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z
	// pf_12_2 = (vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z + pf_7_5 * vs_cbuf8[0].y
	/*
	(pf_20_0 * utof(vs_cbuf8[0].w) + pf_12_2) = 
	(
		(vs_cbuf8[2].y * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].y) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].y
	)
	*/
	// 简写为 [2,3][0].yzw
	// (-dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))) * (1 - f_5_18) - [2,3][0].yzw * f_4_43 * f_5_18
	// 0.06730664484604  <=>  (({pf_15_8 : 0.0675398} * {f_2_50 : 0.999972}) * {pf_25_1 : 0.9520276} + ((({pf_20_0 : 0.00} * {utof(vs_cbuf8[0].w) : -442.3171} + {pf_12_2 : -0.0627182}) * (0. - {f_4_43 : 1.00})) * {f_5_18 : 0.0479724}))
	pf_12_6 = ((pf_15_8 * f_2_50) * pf_25_1 + (((pf_20_0 * utof(vs_cbuf8[0].w) + pf_12_2) * (0. - f_4_43)) * f_5_18));
	
	//经由vs_cbuf8[0~3]类矩阵计算的分量3
	// f_5_18 * f_4_52 * (dx/r * f_4_43 * [2,3][0].xzw + dy/r * f_4_43 * [2,3][0].yzw)
	// -0.00965289119424  <=>  ((({pf_19_3 : -0.210122} * {pf_11_10 : 0.8294569} + {f_4_46 : -0.019193}) * {f_4_52 : 1.039991}) * {f_5_18 : 0.0479724})
	pf_16_10 = (((pf_19_3 * pf_11_10 + f_4_46) * f_4_52) * f_5_18);
	
	// 2D平面内 dx/rxz
	// pf_19_3 = dx/r
	// pf_7_12 = sqrt((dx*dx + dz*dz)/(r*r))
	// pf_17_5 = dy/r
	// pf_15_8 = - dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// f_2_50 = 1
	// dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// -0.2207099433672  <=>  ({pf_19_3 : -0.210122} * {pf_7_12 : 0.9520276} + (0. - ({pf_17_5 : 0.3060201} * ({pf_15_8 : 0.0675398} * {f_2_50 : 0.999972}))))
	pf_15_11 = (pf_19_3 * pf_7_12 + (0. - (pf_17_5 * (pf_15_8 * f_2_50))));
	
	// 实际2D平面按3D计算的平方和里的两个平方和
	// pf_21_7 = 0
	// pf_20_9 = -dz/rxz
	// 0.9513428  <=>  ({pf_21_7 : -0.00} * {pf_21_7 : -0.00} + ({pf_20_9 : -0.975368} * {pf_20_9 : -0.975368}))
	pf_26_1 = (pf_21_7 * pf_21_7 + (pf_20_9 * pf_20_9));
	
	// 后面三个平方和的其中一个数，涵义不明
	// f_5_18 = exp2(log2(1 - sqrt((dx*dx + dz*dz)/(r*r))) * vs_cbuf13[6].y)
	// pf_25_1 = 1 - f_5_18
	// pf_14_2 = (vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y + (vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	/*
	(
		(vs_cbuf8[2].x * vs_cbuf8[3].y - vs_cbuf8[2].y * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].y +
		(vs_cbuf8[2].y * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].y) * vs_cbuf8[0].x
	)
	*/
	// 简写为 [2,3][0].xyw
	// pf_9_9 = - dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))
	// f_2_50 = 1
	// (-dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))) * (1 - f_5_18) - [2,3][0].xyw * f_4_43 * f_5_18 
	// -0.3107738936478  <=>  (({pf_9_9 : -0.2984739} * {f_2_50 : 0.999972}) * {pf_25_1 : 0.9520276} + (({pf_14_2 : 0.5550383} * (0. - {f_4_43 : 1.00})) * {f_5_18 : 0.0479724}))
	pf_9_11 = ((pf_9_9 * f_2_50) * pf_25_1 + ((pf_14_2 * (0. - f_4_43)) * f_5_18));
	
	// 实际是2D平面内的平方和，有一项为0，结果恒为1
	// 1.00005565995801  <=>  ({pf_15_11 : -0.2207099} * {pf_15_11 : -0.2207099} + {pf_26_1 : 0.9513428})
	// (dx*dx + dz*dz)/rxz
	// => 1
	pf_13_5 = (pf_15_11 * pf_15_11 + pf_26_1);
	
	// 仍然还是2D平面内 dx/rxz
	// -0.2207037201228  <=>  ({pf_15_11 : -0.2207099} * inversesqrt({pf_13_5 : 1.000056}))
	pf_13_6 = (pf_15_11 * inversesqrt(pf_13_5));
	
	// 后面三个平方和的其中一个数，涵义不明
	// pf_7_12 = sqrt((dx*dx + dz*dz)/(r*r))
	// pf_11_10 = ((vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w + (vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z + (vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x) * f_4_43
	/*
	f_4_43 * (
		(vs_cbuf8[2].x * vs_cbuf8[3].z - vs_cbuf8[2].z * vs_cbuf8[3].x) * vs_cbuf8[0].w +
		(vs_cbuf8[2].w * vs_cbuf8[3].x - vs_cbuf8[2].x * vs_cbuf8[3].w) * vs_cbuf8[0].z +
		(vs_cbuf8[2].z * vs_cbuf8[3].w - vs_cbuf8[2].w * vs_cbuf8[3].z) * vs_cbuf8[0].x
	)
	*/
	// 简写为 [2,3][0].xzw * f_4_43
	// f_5_18 = exp2(log2(1 - sqrt((dx*dx + dz*dz)/(r*r))) * vs_cbuf13[6].y)
	// pf_25_1 = 1 - f_5_18
	// sqrt((dx*dx + dz*dz)/(r*r)) * (1 - f_5_18) + [2,3][0].xzw * f_4_43 * f_5_18
	// 0.94614755116176  <=>  ({pf_7_12 : 0.9520276} * {pf_25_1 : 0.9520276} + ({pf_11_10 : 0.8294569} * {f_5_18 : 0.0479724}))
	pf_7_13 = (pf_7_12 * pf_25_1 + (pf_11_10 * f_5_18));
	
	// 后面平方和的某个分量
	// pf_13_6 = dx/rxz
	// f_5_18 = exp2(log2(1 - sqrt((dx*dx + dz*dz)/(r*r))) * vs_cbuf13[6].y)
	// pf_25_1 = 1 - f_5_18
	// pf_16_10是经由vs_cbuf8[0~3]类矩阵计算的分量3，涵义不明
	// pf_16_10 = (((pf_19_3 * pf_11_10 + f_4_46) * f_4_52) * f_5_18);
	// -0.21976891382212  <=>  ({pf_13_6 : -0.2207037} * {pf_25_1 : 0.9520276} + {pf_16_10 : -0.0096529})
	// dx/rxz + (分量3 - dx/rxz) * f_5_18
	pf_13_7 = (pf_13_6 * pf_25_1 + pf_16_10);
	
	// 结果就是pf_14_6，是经由vs_cbuf8[0~3]类矩阵计算的分量2，另一项恒为0，是后面平方和的某个分量
	// -0.002913  <=>  (({pf_21_7 : -0.00} * inversesqrt({pf_13_5 : 1.000056})) * {pf_25_1 : 0.9520276} + {pf_14_6 : -0.002913})
	pf_14_7 = ((pf_21_7 * inversesqrt(pf_13_5)) * pf_25_1 + pf_14_6);
	
	// 结果就是pf_19_3，也是后面平方和的某个分量
	// pf_19_3 = dx/r
	// pf_25_1 = 1 - f_5_18
	// -0.2101220433672  <=>  ({pf_19_3 : -0.210122} * {pf_25_1 : 0.9520276} + ({pf_19_3 : -0.210122} * {f_5_18 : 0.0479724}))
	pf_11_13 = (pf_19_3 * pf_25_1 + (pf_19_3 * f_5_18));
	
	// 1.00  <=>  (({f_11_4 : 0.00} * {utof(vs_cbuf9[116].x) : 0.00} + {pf_4_6 : 1.00}) * {utof(vs_cbuf10[0].w) : 1.00})
	out_attr0.w = ((f_11_4 * utof(vs_cbuf9[116].x) + pf_4_6) * utof(vs_cbuf10[0].w));
	
	// 后面平方和的某个分量
	// pf_10_6是经由vs_cbuf8[0~3]类矩阵计算的分量1
	// pf_20_9 = -dz/rxz
	// pf_13_5恒为1
	// f_5_18 = exp2(log2(1 - sqrt((dx*dx + dz*dz)/(r*r))) * vs_cbuf13[6].y)
	// pf_25_1 = 1 - f_5_18
	// -0.97545206580332  <=>  (({pf_20_9 : -0.975368} * inversesqrt({pf_13_5 : 1.000056})) * {pf_25_1 : 0.9520276} + {pf_10_6 : -0.0469008})
	// -dz/rxz + (分量1 + dz/rxz) * f_5_18
	pf_10_7 = ((pf_20_9 * inversesqrt(pf_13_5)) * pf_25_1 + pf_10_6);
	
	// 结果就是pf_18_2，2部分系数之和恒为1，也是后面平方和的某个分量
	// pf_18_2 = dz/r
	// pf_25_1 = 1 - f_5_18
	// 0.92857760394176  <=>  ({pf_18_2 : 0.9285776} * {pf_25_1 : 0.9520276} + ({pf_18_2 : 0.9285776} * {f_5_18 : 0.0479724}))
	pf_15_14 = (pf_18_2 * pf_25_1 + (pf_18_2 * f_5_18));
	
	// pf_9_11、pf_7_13、pf_12_6三个平方和
	// 0.99630591692121  <=>  ({pf_9_11 : -0.3107739} * {pf_9_11 : -0.3107739} + ({pf_7_13 : 0.9461476} * {pf_7_13 : 0.9461476} + ({pf_12_6 : 0.0673067} * {pf_12_6 : 0.0673067})))
	pf_4_10 = (pf_9_11 * pf_9_11 + (pf_7_13 * pf_7_13 + (pf_12_6 * pf_12_6)));
	
	// 结果就是pf_17_5，2部分系数之和恒为1，也是后面平方和的某个分量
	// pf_17_5 = dy/r
	// pf_25_1 = 1 - f_5_18
	// 0.30602008135476  <=>  ({pf_17_5 : 0.3060201} * {pf_25_1 : 0.9520276} + ({pf_17_5 : 0.3060201} * {f_5_18 : 0.0479724}))
	pf_4_11 = (pf_17_5 * pf_25_1 + (pf_17_5 * f_5_18));
	
	// pf_14_7、pf_10_7两个平方和
	// pf_14_7 = 分量2 * f_5_18
	// pf_10_7 = -dz/rxz + (分量1 + dz/rxz) * f_5_18
	// 0.951515285569  <=>  ({pf_14_7 : -0.002913} * {pf_14_7 : -0.002913} + ({pf_10_7 : -0.9754521} * {pf_10_7 : -0.9754521}))
	pf_17_6 = (pf_14_7 * pf_14_7 + (pf_10_7 * pf_10_7));
	
	// tex0的第一次采样y的负值
	// -0.50  <=>  (0. - {f4_0_0.y : 0.50})
	f_5_21 = (0. - f4_0_0.y);
	
	// tex0的第二次采样z减第一次采样z
	// 0.00  <=>  ((0. - {f4_0_0.z : 0.50}) + {f4_0_1.z : 0.50})
	pf_20_11 = ((0. - f4_0_0.z) + f4_0_1.z);
	
	// pf_8_0是tex0第一次采样的像素坐标，f_1_18 = f4_0_0.x，这句看起来是一个插值tex0.x，计算像素坐标（包含小数部分）对应的采样值
	// 这是在[0,1]范围内的顶点x坐标
	// f4_0_0.x + (f4_0_1.x - f4_0_0.x) * (pf_8_0 - floor(pf_8_0))
	// 0.50  <=>  (((0. - {f_1_18 : 0.50}) + {f4_0_1.x : 0.50}) * ({pf_8_0 : 2.0006} + (0. - floor({pf_8_0 : 2.0006}))) + {f_1_18 : 0.50})
	pf_17_9 = (((0. - f_1_18) + f4_0_1.x) * (pf_8_0 + (0. - floor(pf_8_0))) + f_1_18);
	
	// f_9_2 = f4_0_1.y，与上一句一样，这句计算插值的tex0.y，在[0,1]范围内的顶点y坐标
	// f4_0_0.y + (f4_0_1.y - f4_0_0.y) * (pf_8_0 - floor(pf_8_0))
	// 0.50  <=>  (({f_5_21 : -0.50} + {f_9_2 : 0.50}) * ({pf_8_0 : 2.0006} + (0. - floor({pf_8_0 : 2.0006}))) + {f4_0_0.y : 0.50})
	pf_19_6 = ((f_5_21 + f_9_2) * (pf_8_0 + (0. - floor(pf_8_0))) + f4_0_0.y);
	
	// pf_15_14、pf_4_11、pf_11_13三个平方和
	// dx*dx/(r*r)+dy*dy/(r*r)+dz*dz/(r*r)
	// => 1
	// 1.00005595922176  <=>  ({pf_15_14 : 0.9285776} * {pf_15_14 : 0.9285776} + ({pf_4_11 : 0.3060201} * {pf_4_11 : 0.3060201} + ({pf_11_13 : -0.210122} * {pf_11_13 : -0.210122})))
	pf_18_6 = (pf_15_14 * pf_15_14 + (pf_4_11 * pf_4_11 + (pf_11_13 * pf_11_13)));
	
	// 这句计算插值的tex0.z，在[0,1]范围内的顶点z坐标
	// f4_0_0.z + (f4_0_1.z - f4_0_0.z) * (pf_8_0 - floor(pf_8_0))
	// 0.50  <=>  ({pf_20_11 : 0.00} * ({pf_8_0 : 2.0006} + (0. - floor({pf_8_0 : 2.0006}))) + {f4_0_0.z : 0.50})
	pf_8_2 = (pf_20_11 * (pf_8_0 + (0. - floor(pf_8_0))) + f4_0_0.z);
	
	//in_attr6.xyz用于缩放顶点坐标的xyz
	
	// 缩放后的顶点x坐标
	// pf_17_9是插值后的tex0.x
	// in_attr6.x * vs_cbuf9[141].x * vs_cbuf10[3].y * (0.5 * vs_cbuf9[16].x + pf_17_9)
	// 128.37455  <=>  ((({pf_2_0 : 256.7491} * {utof(vs_cbuf9[141].x) : 1.00}) * {utof(vs_cbuf10[3].y) : 1.00}) * (0.5 * {utof(vs_cbuf9[16].x) : 0.00} + {pf_17_9 : 0.50}))
	pf_2_3_x = (((pf_2_0 * utof(vs_cbuf9[141].x)) * utof(vs_cbuf10[3].y)) * (0.5 * utof(vs_cbuf9[16].x) + pf_17_9));
	
	// 缩放后的顶点y坐标
	// pf_19_6是插值后的tex0.y
	// in_attr6.y * vs_cbuf9[141].y * vs_cbuf10[3].z * (0.5 * vs_cbuf9[16].y + pf_19_6)
	// 87.7226  <=>  ((({in_attr6.y : 175.4452} * {utof(vs_cbuf9[141].y) : 1.00}) * {utof(vs_cbuf10[3].z) : 1.00}) * (0.5 * {utof(vs_cbuf9[16].y) : 0.00} + {pf_19_6 : 0.50}))
	pf_1_4_y = (((in_attr6.y * utof(vs_cbuf9[141].y)) * utof(vs_cbuf10[3].z)) * (0.5 * utof(vs_cbuf9[16].y) + pf_19_6));

	// 缩放后的顶点z坐标
	// pf_8_2是插值后的tex0.z
	// in_attr6.z * vs_cbuf9[141].z * vs_cbuf10[3].w * pf_8_2
	// 87.7226  <=>  ({pf_8_2 : 0.50} * (({in_attr6.z : 175.4452} * {utof(vs_cbuf9[141].z) : 1.00}) * {utof(vs_cbuf10[3].w) : 1.00}))
	pf_3_2_z = (pf_8_2 * ((in_attr6.z * utof(vs_cbuf9[141].z)) * utof(vs_cbuf10[3].w)));
	
	/*	
	det(A) = -[1].x * [2,3][0].yzw + [1].y * [2,3][0].xzw - [1].z * [2,3][0].xyw + [1].w * [2,3][0].xyz
	
	f_4_43 = 1 / det(A)
	
	f_4_52 = inversesqrt(
		pow(dx/r * f_4_43 * [2,3][0].xzw + dy/r * f_4_43 * [2,3][0].yzw, 2) +
		pow(dx/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].yzw, 2) +
		pow(-dy/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].xzw, 2)
	)
	
	分量1 = f_4_52 * (-dy/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].xzw)
	分量2 = f_4_52 * (dx/r * f_4_43 * [2,3][0].xyw - dz/r * f_4_43 * [2,3][0].yzw)
	分量3 = f_4_52 * (dx/r * f_4_43 * [2,3][0].xzw + dy/r * f_4_43 * [2,3][0].yzw)
	
	pf_10_7 = -dz/rxz + (分量1 + dz/rxz) * f_5_18
	pf_14_7 = 分量2 * f_5_18
	pf_13_7 = dx/rxz + (分量3 - dx/rxz) * f_5_18
	
	pf_12_6 = (-dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))) * (1 - f_5_18) - [2,3][0].yzw * f_4_43 * f_5_18
	pf_7_13 = 					  (sqrt((dx*dx + dz*dz)/(r*r))) * (1 - f_5_18) + [2,3][0].xzw * f_4_43 * f_5_18
	pf_9_11 = (-dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))) * (1 - f_5_18) - [2,3][0].xyw * f_4_43 * f_5_18
	
	pf_11_13 = dx/r
	pf_4_11 = dy/r
	pf_15_14 = dz/r

	三组平方和构成一个变换矩阵，也就是下面矩阵的每列的平方和都是1，有点像是单位向量
	pf_10_7		pf_12_6		pf_11_13		pf_2_3_x
	pf_14_7		pf_7_13		pf_4_11		X 	pf_1_4_y
	pf_13_7		pf_9_11		pf_15_14		pf_3_2_z
	
	从后面的代码来看，这个矩阵不是MVP中的任何一种，可能是对体积云顶点的一种扰动，让云的形态有一些变化
	*/
	
	// pf_14_7、pf_10_7、pf_13_7三个平方和的三个分量与系数乘积
	// pf_13_7 = dx/rxz + (分量3 - dx/rxz) * f_5_18
	// pf_14_7 = 分量2 * f_5_18
	// pf_10_7 = -dz/rxz + (分量1 + dz/rxz) * f_5_18
	// pf_17_6 = (pf_14_7 * pf_14_7 + (pf_10_7 * pf_10_7));
	// -125.23491673288  <=>  ({pf_2_3 : 128.3746} * (inversesqrt(({pf_13_7 : -0.2197689} * {pf_13_7 : -0.2197689} + {pf_17_6 : 0.9515153})) * {pf_10_7 : -0.9754521}))
	pf_10_9 = (pf_2_3_x * (inversesqrt((pf_13_7 * pf_13_7 + pf_17_6)) * pf_10_7));
	// -0.37399372218  <=>  ({pf_2_3 : 128.3746} * (inversesqrt(({pf_13_7 : -0.2197689} * {pf_13_7 : -0.2197689} + {pf_17_6 : 0.9515153})) * {pf_14_7 : -0.002913}))
	pf_14_9 = (pf_2_3_x * (inversesqrt((pf_13_7 * pf_13_7 + pf_17_6)) * pf_14_7));
	// -28.21536347178  <=>  ({pf_2_3 : 128.3746} * (inversesqrt(({pf_13_7 : -0.2197689} * {pf_13_7 : -0.2197689} + {pf_17_6 : 0.9515153})) * {pf_13_7 : -0.2197689}))
	pf_2_4 = (pf_2_3_x * (inversesqrt((pf_13_7 * pf_13_7 + pf_17_6)) * pf_13_7));
	
	// pf_9_11、pf_7_13、pf_12_6三个平方和的三个分量与系数乘积并累加到前面计算结果
	// pf_12_6 = (-dy/r * dx/r * inversesqrt((dx*dx+dz*dz)/(r*r))) * (1 - f_5_18) - [2,3][0].yzw * f_4_43 * f_5_18
	// pf_9_11 = (-dy/r * dz/r * inversesqrt((dx*dx+dz*dz)/(r*r))) * (1 - f_5_18) - [2,3][0].xyw * f_4_43 * f_5_18
	// pf_7_13 = 					 (sqrt((dx*dx + dz*dz)/(r*r))) * (1 - f_5_18) + [2,3][0].xzw * f_4_43 * f_5_18
	// -119.31964227036  <=>  ({pf_1_4 : 87.7226} * (inversesqrt({pf_4_10 : 0.9963059}) * {pf_12_6 : 0.0673067}) + {pf_10_9 : -125.2349})
	pf_8_4 = (pf_1_4_y * (inversesqrt(pf_4_10) * pf_12_6) + pf_10_9);
	// 82.77825006774  <=>  ({pf_1_4 : 87.7226} * (inversesqrt({pf_4_10 : 0.9963059}) * {pf_7_13 : 0.9461476}) + {pf_14_9 : -0.3739937})
	pf_7_15 = (pf_1_4_y * (inversesqrt(pf_4_10) * pf_7_13) + pf_14_9);
	// -55.5277476487  <=>  ({pf_1_4 : 87.7226} * (inversesqrt({pf_4_10 : 0.9963059}) * {pf_9_11 : -0.3107739}) + {pf_2_4 : -28.21536})
	pf_1_5 = (pf_1_4_y * (inversesqrt(pf_4_10) * pf_9_11) + pf_2_4);
	
	// pf_15_14、pf_4_11、pf_11_13三个平方和(恒为1)的三个分量与系数乘积并累加到前面计算结果	
	// pf_15_14 = dz/r
	// pf_4_11 = dy/r
	// pf_11_13 = dx/r
	// -137.75153059386  <=>  ({pf_3_2 : 87.7226} * (inversesqrt({pf_18_6 : 1.000056}) * {pf_11_13 : -0.210122}) + {pf_8_4 : -119.3196})
	pf_2_5_x = (pf_3_2_z * (inversesqrt(pf_18_6) * pf_11_13) + pf_8_4);
	// 109.6223744099  <=>  ({pf_3_2 : 87.7226} * (inversesqrt({pf_18_6 : 1.000056}) * {pf_4_11 : 0.3060201}) + {pf_7_15 : 82.77825})
	pf_4_13_y = (pf_3_2_z * (inversesqrt(pf_18_6) * pf_4_11) + pf_7_15);
	// 25.92721058616  <=>  ({pf_3_2 : 87.7226} * (inversesqrt({pf_18_6 : 1.000056}) * {pf_15_14 : 0.9285776}) + {pf_1_5 : -55.52775})
	pf_1_6_z = (pf_3_2_z * (inversesqrt(pf_18_6) * pf_15_14) + pf_1_5);
	
	// pf_0_11是in_attr4.z坐标变换后的值
	// pf_0_11 + pf_1_6_z
	// 196.75121  <=>  ({pf_0_11 : 170.824} + ({pf_1_6 : 25.92721} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724}))))
	pf_0_12 = (pf_0_11 + (pf_1_6_z + (0. * pf_25_1 + (0. * f_5_18))));
	
	// pf_6_4是in_attr4.x坐标变换后的值
	// (pf_6_4 + pf_2_5_x) * vs_cbuf8[0].x
	// 424.24846370808  <=>  (({pf_6_4 : 564.6999} + ({pf_2_5 : -137.7515} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[0].x) : 0.9936762})
	pf_1_8 = ((pf_6_4 + (pf_2_5_x + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[0].x));
	
	// pf_6_4是in_attr4.x坐标变换后的值
	// (pf_6_4 + pf_2_5_x) * vs_cbuf8[1].x
	// 26.77743514088  <=>  (({pf_6_4 : 564.6999} + ({pf_2_5 : -137.7515} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[1].x) : 0.0627182})
	pf_8_5 = ((pf_6_4 + (pf_2_5_x + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[1].x));
	
	// pf_22_0 = dx = vs_cbuf8[29].x - pf_6_4
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// dx/r * vs_cbuf15[28].x
	// -0.1098222384468  <=>  (({pf_22_0 : -277.3888} * (1.0 / (sqrt({pf_17_3 : 1742846.00}) + float(1e-05)))) * {utof(vs_cbuf15[28].x) : 0.5226594})
	pf_6_6 = ((pf_22_0 * (1.0 / (sqrt(pf_17_3) + float(1e-05)))) * utof(vs_cbuf15[28].x));
	
	// pf_6_4是in_attr4.x坐标变换后的值
	// (pf_6_4 + pf_2_5_x) * vs_cbuf8[2].x
	// -39.76354037012  <=>  (({pf_6_4 : 564.6999} + ({pf_2_5 : -137.7515} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[2].x) : -0.0931343})
	pf_9_13 = ((pf_6_4 + (pf_2_5_x + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[2].x));
	
	// 与f_4_58相同，可合并
	// pf_5_3是in_attr4.y坐标变换后的值
	// - pf_5_3 - pf_4_13_y
	// -1377.779  <=>  (0. - ({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))))
	f_4_57 = (0. - (pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18)))));
	
	// 新dw，用于计算点积，dw/nr还用于计算tex2的第二次采样的v坐标
	// vs_cbuf15[60].w - (pf_5_3 + pf_4_13_y)
	// 294.365  <=>  ({f_4_57 : -1377.779} + {utof(vs_cbuf15[60].w) : 1672.144})
	pf_10_10 = (f_4_57 + utof(vs_cbuf15[60].w));
	
	// 与f_4_57相同，可合并
	// - pf_5_3 - pf_4_13_y
	// -1377.779  <=>  (0. - ({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))))
	f_4_58 = (0. - (pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18)))));
	
	// 新dy
	// vs_cbuf8[29].y - (pf_5_3 + pf_4_13_y)
	// 294.365  <=>  ({f_4_58 : -1377.779} + {utof(vs_cbuf8[29].y) : 1672.144})
	pf_11_15 = (f_4_58 + utof(vs_cbuf8[29].y));
	
	// (pf_5_3 + pf_4_13_y) * vs_cbuf8[0].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[0].x
	// 424.2485  <=>  (({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[0].y) : 0.00} + {pf_1_8 : 424.2485})
	pf_1_9 = ((pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[0].y) + pf_1_8);
	
	// (pf_5_3 + pf_4_13_y) * vs_cbuf8[1].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[1].x
	// 1169.585876003  <=>  (({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[1].y) : 0.829457} + {pf_8_5 : 26.77744})
	pf_8_6 = ((pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[1].y) + pf_8_5);
	
	// pf_5_3是in_attr4.y坐标变换后的值，tex2第一次采样的v坐标
	// pf_23_0 = dy = vs_cbuf8[29].y - pf_5_3
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// dy/r * 0.5
	// 0.15301005  <=>  (({pf_23_0 : 403.987} * (1.0 / (sqrt({pf_17_3 : 1742846.00}) + float(1e-05)))) * 0.5)
	pf_12_8 = ((pf_23_0 * (1.0 / (sqrt(pf_17_3) + float(1e-05)))) * 0.5);
	
	// pf_6_4是in_attr4.x坐标变换后的值
	// (pf_6_4 + pf_2_5_x) * vs_cbuf8[3].x
	// 0.00  <=>  (({pf_6_4 : 564.6999} + ({pf_2_5 : -137.7515} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[3].x) : 0.00})
	pf_13_10 = ((pf_6_4 + (pf_2_5_x + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[3].x));
	
	// pf_5_3是in_attr4.y坐标变换后的值
	// pf_9_13 = (pf_6_4 + pf_2_5_x) * vs_cbuf8[2].x
	// (pf_5_3 + pf_4_13_y) * vs_cbuf8[2].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[2].x
	// 729.8233026974  <=>  (({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[2].y) : 0.5585706} + {pf_9_13 : -39.76354})
	pf_9_14 = ((pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[2].y) + pf_9_13);
	
	// pf_5_3是in_attr4.y坐标变换后的值,pf_6_4是in_attr4.x坐标变换后的值
	// dy = vs_cbuf8[29].y - pf_5_3
	// pf_12_8 = dy/r * 0.5
	// dx = vs_cbuf8[29].x - pf_6_4
	// pf_6_6 = dx/r * vs_cbuf15[28].x
	// dy/r * 0.5 * vs_cbuf15[28].y + dx/r * vs_cbuf15[28].x
	// -0.19766549732313  <=>  ({pf_12_8 : 0.1530101} * {utof(vs_cbuf15[28].y) : -0.5741013} + {pf_6_6 : -0.1098222})
	pf_6_7 = (pf_12_8 * utof(vs_cbuf15[28].y) + pf_6_6);
	
	// pf_5_3是in_attr4.y坐标变换后的值,pf_6_4是in_attr4.x坐标变换后的值
	// (pf_5_3 + pf_4_13_y) * vs_cbuf8[3].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[3].x
	// 0.00  <=>  (({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))) * {utof(vs_cbuf8[3].y) : 0.00} + {pf_13_10 : 0.00})
	pf_13_11 = ((pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18)))) * utof(vs_cbuf8[3].y) + pf_13_10);
	
	// 最终变换前的x值
	// pf_0_11是in_attr4.z坐标变换后的值,pf_5_3是in_attr4.y坐标变换后的值,pf_6_4是in_attr4.x坐标变换后的值
	// pf_0_12 = pf_0_11 + pf_1_6_z
	// pf_1_9 = (pf_5_3 + pf_4_13_y) * vs_cbuf8[0].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[0].x
	// (pf_0_11 + pf_1_6_z) * vs_cbuf8[0].z + (pf_5_3 + pf_4_13_y) * vs_cbuf8[0].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[0].x + vs_cbuf8[0].w
	// 4.02330000000001  <=>  (({pf_0_12 : 196.7512} * {utof(vs_cbuf8[0].z) : 0.1122834} + {pf_1_9 : 424.2485}) + {utof(vs_cbuf8[0].w) : -442.3171})
	pf_1_11 = ((pf_0_12 * utof(vs_cbuf8[0].z) + pf_1_9) + utof(vs_cbuf8[0].w));
	
	// 最终变换前的z值
	// pf_0_11是in_attr4.z坐标变换后的值,pf_5_3是in_attr4.y坐标变换后的值,pf_6_4是in_attr4.x坐标变换后的值
	// pf_0_12 = pf_0_11 + pf_1_6_z
	// pf_9_14 = (pf_5_3 + pf_4_13_y) * vs_cbuf8[2].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[2].x
	// (pf_0_11 + pf_1_6_z) * vs_cbuf8[2].z + (pf_5_3 + pf_4_13_y) * vs_cbuf8[2].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[2].x
	// 891.98794102904  <=>  ({pf_0_12 : 196.7512} * {utof(vs_cbuf8[2].z) : 0.8242117} + {pf_9_14 : 729.8233})
	pf_9_15 = (pf_0_12 * utof(vs_cbuf8[2].z) + pf_9_14);
	
	// 最终变换前的y值
	// pf_0_11是in_attr4.z坐标变换后的值,pf_5_3是in_attr4.y坐标变换后的值,pf_6_4是in_attr4.x坐标变换后的值
	// pf_0_12 = pf_0_11 + pf_1_6_z
	// pf_8_6 = (pf_5_3 + pf_4_13_y) * vs_cbuf8[1].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[1].x
	// (pf_0_11 + pf_1_6_z) * vs_cbuf8[1].z + (pf_5_3 + pf_4_13_y) * vs_cbuf8[1].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[1].x + vs_cbuf8[1].w
	// 430.5962  <=>  (({pf_0_12 : 196.7512} * {utof(vs_cbuf8[1].z) : -0.5550383} + {pf_8_6 : 1169.586}) + {utof(vs_cbuf8[1].w) : -629.7858})
	pf_8_8 = ((pf_0_12 * utof(vs_cbuf8[1].z) + pf_8_6) + utof(vs_cbuf8[1].w));
	
	// pf_24_1 = dz = vs_cbuf8[29].z - pf_0_11
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// pf_6_7 = dy/r * 0.5 * vs_cbuf15[28].y + dx/r * vs_cbuf15[28].x
	// dz/r * vs_cbuf15[28].z + dy/r * 0.5 * vs_cbuf15[28].y + dx/r * vs_cbuf15[28].x
	// -0.78291620392608  <=>  (({pf_24_1 : 1225.845} * (1.0 / (sqrt({pf_17_3 : 1742846.00}) + float(1e-05)))) * {utof(vs_cbuf15[28].z) : -0.6302658} + {pf_6_7 : -0.1976655})
	pf_6_8 = ((pf_24_1 * (1.0 / (sqrt(pf_17_3) + float(1e-05)))) * utof(vs_cbuf15[28].z) + pf_6_7);
	
	// 最终变换前的w值
	// pf_0_11是in_attr4.z坐标变换后的值,pf_5_3是in_attr4.y坐标变换后的值,pf_6_4是in_attr4.x坐标变换后的值
	// pf_0_12 = pf_0_11 + pf_1_6_z
	// pf_13_11 = (pf_5_3 + pf_4_13_y) * vs_cbuf8[3].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[3].x
	// (pf_0_11 + pf_1_6_z) * vs_cbuf8[3].z + (pf_5_3 + pf_4_13_y) * vs_cbuf8[3].y + (pf_6_4 + pf_2_5_x) * vs_cbuf8[3].x
	// 0.00  <=>  ({pf_0_12 : 196.7512} * {utof(vs_cbuf8[3].z) : 0.00} + {pf_13_11 : 0.00})
	pf_7_17 = (pf_0_12 * utof(vs_cbuf8[3].z) + pf_13_11);
	
	/*
	从tex0上采样得到的顶点坐标，经过in_attr6的缩放后，再经过由3组平方和组成的3x3矩阵的变换后，在上面这部分，再经过一次平移与矩阵变换
	平移使用in_attr4经过变换（从数值看只有平移）后的xyz值，然后使用vs_cbuf8[0,1,2,3]构成的矩阵变换（无透视）
	
	vs_cbuf8[0].x	vs_cbuf8[0].y	vs_cbuf8[0].z		nx		pf_1_11 - vs_cbuf8[0].w
	vs_cbuf8[1].x	vs_cbuf8[1].y	vs_cbuf8[1].z	X	ny	=	pf_8_8 - vs_cbuf8[1].w
	vs_cbuf8[2].x	vs_cbuf8[2].y	vs_cbuf8[2].z		nz		pf_9_15
	vs_cbuf8[3].x	vs_cbuf8[3].y	vs_cbuf8[3].z				pf_7_17
	
	之后再加上vs_cbuf8[0,1,2,3].w引入的平移，然后使用经过一次4x4矩阵vs_cbuf8[4,5,6,7]变换（只有缩放与透视部分）为最终输出坐标
	*/
	
	// 前面若干计算结果的合并，可能是矩阵运算的最后一步，计算输出坐标xy
	// ()
	// 923.4166  <=>  (({pf_7_17 : 0.00} + {utof(vs_cbuf8[3].w) : 1.00}) * {utof(vs_cbuf8[5].w) : 0.00} + (({pf_9_15 : 891.9879} + {utof(vs_cbuf8[2].w) : -2058.403}) * {utof(vs_cbuf8[5].z) : 0.00} + ({pf_8_8 : 430.5962} * {utof(vs_cbuf8[5].y) : 2.144507} + ({pf_1_11 : 4.0233} * {utof(vs_cbuf8[5].x) : 0.00}))))
	pf_13_15 = ((pf_7_17 + utof(vs_cbuf8[3].w)) * utof(vs_cbuf8[5].w) + ((pf_9_15 + utof(vs_cbuf8[2].w)) * utof(vs_cbuf8[5].z) + (pf_8_8 * utof(vs_cbuf8[5].y) + (pf_1_11 * utof(vs_cbuf8[5].x)))));
	// 4.853246  <=>  (({pf_7_17 : 0.00} + {utof(vs_cbuf8[3].w) : 1.00}) * {utof(vs_cbuf8[4].w) : 0.00} + (({pf_9_15 : 891.9879} + {utof(vs_cbuf8[2].w) : -2058.403}) * {utof(vs_cbuf8[4].z) : 0.00} + ({pf_8_8 : 430.5962} * {utof(vs_cbuf8[4].y) : 0.00} + ({pf_1_11 : 4.0233} * {utof(vs_cbuf8[4].x) : 1.206285}))))
	pf_14_13 = ((pf_7_17 + utof(vs_cbuf8[3].w)) * utof(vs_cbuf8[4].w) + ((pf_9_15 + utof(vs_cbuf8[2].w)) * utof(vs_cbuf8[4].z) + (pf_8_8 * utof(vs_cbuf8[4].y) + (pf_1_11 * utof(vs_cbuf8[4].x)))));

	// pf_6_4是in_attr4.x坐标变换后的值
	// - (pf_6_4 + pf_2_5_x)
	// -426.9484  <=>  (0. - ({pf_6_4 : 564.6999} + ({pf_2_5 : -137.7515} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724})))))
	f_5_25 = (0. - (pf_6_4 + (pf_2_5_x + (0. * pf_25_1 + (0. * f_5_18)))));
	
	// 新dx，按之前分析，这应该是世界空间的坐标计算，pf_2_5_x可能是顶点在模型空间的坐标，那vs_cbuf8[0,1,2,3]矩阵应该是view矩阵，vs_cbuf8[4,5,6,7]是project矩阵
	// 可能pf_6_4是模型空间原点的世界坐标，这里计算的是顶点到指定点的x坐标差，vs_cbuf8[29]有可能是相机位置
	// vs_cbuf8[29].x - (pf_6_4 + pf_2_5_x)
	// -139.6373  <=>  ({f_5_25 : -426.9484} + {utof(vs_cbuf8[29].x) : 287.3111})
	pf_9_17 = (f_5_25 + utof(vs_cbuf8[29].x));
	
	// 前面若干计算结果的合并，可能是矩阵运算的最后一步,计算输出坐标zw
	// 1164.50792  <=>  (({pf_7_17 : 0.00} + {utof(vs_cbuf8[3].w) : 1.00}) * {utof(vs_cbuf8[6].w) : -2.00008} + (({pf_9_15 : 891.9879} + {utof(vs_cbuf8[2].w) : -2058.403}) * {utof(vs_cbuf8[6].z) : -1.00008} + ({pf_8_8 : 430.5962} * {utof(vs_cbuf8[6].y) : 0.00} + ({pf_1_11 : 4.0233} * {utof(vs_cbuf8[6].x) : 0.00}))))
	pf_8_10 = ((pf_7_17 + utof(vs_cbuf8[3].w)) * utof(vs_cbuf8[6].w) + ((pf_9_15 + utof(vs_cbuf8[2].w)) * utof(vs_cbuf8[6].z) + (pf_8_8 * utof(vs_cbuf8[6].y) + (pf_1_11 * utof(vs_cbuf8[6].x)))));
	// 1166.415  <=>  (({pf_7_17 : 0.00} + {utof(vs_cbuf8[3].w) : 1.00}) * {utof(vs_cbuf8[7].w) : 0.00} + (({pf_9_15 : 891.9879} + {utof(vs_cbuf8[2].w) : -2058.403}) * {utof(vs_cbuf8[7].z) : -1.00} + ({pf_8_8 : 430.5962} * {utof(vs_cbuf8[7].y) : 0.00} + ({pf_1_11 : 4.0233} * {utof(vs_cbuf8[7].x) : 0.00}))))
	pf_1_15 = ((pf_7_17 + utof(vs_cbuf8[3].w)) * utof(vs_cbuf8[7].w) + ((pf_9_15 + utof(vs_cbuf8[2].w)) * utof(vs_cbuf8[7].z) + (pf_8_8 * utof(vs_cbuf8[7].y) + (pf_1_11 * utof(vs_cbuf8[7].x)))));
	
	// 新dx*dx
	// 19498.57555129  <=>  ({pf_9_17 : -139.6373} * {pf_9_17 : -139.6373})
	pf_7_19 = (pf_9_17 * pf_9_17);
	
	// pf_6_8 = dz/r * vs_cbuf15[28].z + dy/r * 0.5 * vs_cbuf15[28].y + dx/r * vs_cbuf15[28].x
	// -sqrt(0.5 - pf_6_8 * 0.5)
	// -0.9441706  <=>  (0. - sqrt(((0. - ({pf_6_8 : -0.7829162} * 0.5 + 0.5)) + 1.)))
	f_1_51 = (0. - sqrt(((0. - (pf_6_8 * 0.5 + 0.5)) + 1.)));
	// 3/2次方，用于计算tex2的第一次采样u坐标
	// -1.4621010476536  <=>  ((({pf_6_8 : -0.7829162} * 0.5 + 0.5) * (({pf_6_8 : -0.7829162} * 0.5 + 0.5) * (({pf_6_8 : -0.7829162} * 0.5 + 0.5) * -0.0187293 + 0.074260995) + -0.2121144) + 1.5707288) * {f_1_51 : -0.9441706})
	pf_6_11 = (((pf_6_8 * 0.5 + 0.5) * ((pf_6_8 * 0.5 + 0.5) * ((pf_6_8 * 0.5 + 0.5) * -0.0187293 + 0.074260995) + -0.2121144) + 1.5707288) * f_1_51);
	
	// 新dz
	// pf_0_11是in_attr4.z坐标变换后的值
	// pf_0_12 = pf_0_11 + pf_1_6_z
	// vs_cbuf8[29].z - (pf_0_11 + pf_1_6_z)
	// 1199.9178  <=>  ((0. - {pf_0_12 : 196.7512}) + {utof(vs_cbuf8[29].z) : 1396.669})
	pf_19_7 = ((0. - pf_0_12) + utof(vs_cbuf8[29].z));
	
	// 新 inversesqrt(dx*dx+dw*dw+dz*dz)
	// 0.0008043  <=>  inversesqrt(({pf_19_7 : 1199.918} * {pf_19_7 : 1199.918} + ({pf_10_10 : 294.365} * {pf_10_10 : 294.365} + {pf_7_19 : 19498.58})))
	f_5_28 = inversesqrt((pf_19_7 * pf_19_7 + (pf_10_10 * pf_10_10 + pf_7_19)));
	
	// 
	// 1/pf_1_15
	// 0.000857327794996  <=>  (1.0 / ({pf_1_15 : 1166.415} + (0. * {pf_8_10 : 1164.508} + (0. * {pf_14_13 : 4.853246} + (0. * {pf_13_15 : 923.4166})))))
	f_6_7 = (1.0 / (pf_1_15 + (0. * pf_8_10 + (0. * pf_14_13 + (0. * pf_13_15)))));
	
	// 新 inversesqrt(dx*dx+dy*dy+dz*dz)
	// 0.0008043  <=>  inversesqrt(({pf_19_7 : 1199.918} * {pf_19_7 : 1199.918} + ({pf_11_15 : 294.365} * {pf_11_15 : 294.365} + {pf_7_19 : 19498.58})))
	f_4_70 = inversesqrt((pf_19_7 * pf_19_7 + (pf_11_15 * pf_11_15 + pf_7_19)));
	
	// 
	// (w*0.5+z*0.5)/w
	// 0.9991505726  <=>  (({pf_1_15 : 1166.415} * 0.5 + ({pf_8_10 : 1164.508} * 0.5 + (0. * {pf_14_13 : 4.853246} + (0. * {pf_13_15 : 923.4166})))) * {f_6_7 : 0.0008573})
	pf_15_20 = ((pf_1_15 * 0.5 + (pf_8_10 * 0.5 + (0. * pf_14_13 + (0. * pf_13_15)))) * f_6_7);
	
	// pf_19_6是插值的tex0.y
	// in_attr0.y + in_attr1.y - pf_19_6
	// 0.00  <=>  ((0. - ({pf_19_6 : 0.50} + (0. - {in_attr0.y : 0.00}))) + {in_attr1.y : 0.50})
	pf_18_9 = ((0. - (pf_19_6 + (0. - in_attr0.y))) + in_attr1.y);
	
	// 0.00  <=>  {pf_18_9 : 0.00}
	out_attr1.y = pf_18_9;
	
	// pf_17_9是插值的tex0.x
	// in_attr0.x - in_attr1.x - pf_17_9
	// -1.00  <=>  (0. - (({pf_17_9 : 0.50} + (0. - {in_attr0.x : 0.00})) + {in_attr1.x : 0.50}))
	f_1_56 = (0. - ((pf_17_9 + (0. - in_attr0.x)) + in_attr1.x));
	
	// pf_15_20 = (w*0.5+z*0.5)/w
	// -1 / (pf_15_20 * vs_cbuf8[30].w - vs_cbuf8[30].y) * vs_cbuf8[30].z
	// 1124.3975  <=>  ((1.0 / ({pf_15_20 : 0.9991506} * {utof(vs_cbuf8[30].w) : 24999.00} + (0. - {utof(vs_cbuf8[30].y) : 25000.00}))) * (0. - {utof(vs_cbuf8[30].z) : 25000.00}))
	pf_18_10 = ((1.0 / (pf_15_20 * utof(vs_cbuf8[30].w) + (0. - utof(vs_cbuf8[30].y)))) * (0. - utof(vs_cbuf8[30].z)));
	
	// 可能是dot运算
	// f_4_70 = 新 inversesqrt(dx*dx+dy*dy+dz*dz)
	// dz/r * vs_cbuf15[28].z + dy/r * vs_cbuf15[28].y + dx/r * vs_cbuf15[28].x
	// -0.8028887419852  <=>  (({pf_19_7 : 1199.918} * {f_4_70 : 0.0008043}) * {utof(vs_cbuf15[28].z) : -0.6302658} + (({pf_11_15 : 294.365} * {f_4_70 : 0.0008043}) * {utof(vs_cbuf15[28].y) : -0.5741013} + (({pf_9_17 : -139.6373} * {f_4_70 : 0.0008043}) * {utof(vs_cbuf15[28].x) : 0.5226594})))
	pf_9_21 = ((pf_19_7 * f_4_70) * utof(vs_cbuf15[28].z) + ((pf_11_15 * f_4_70) * utof(vs_cbuf15[28].y) + ((pf_9_17 * f_4_70) * utof(vs_cbuf15[28].x))));
	
	// 另一个dot运算
	// f_5_28 = 新 inversesqrt(dx*dx+dw*dw+dz*dz)
	// (dz/nr * vs_cbuf15[28].z + dw/nr * vs_cbuf15[28].y + dx/nr * vs_cbuf15[28].x) * 0.5 + 0.5
	// 0.0985556  <=>  ((({pf_19_7 : 1199.918} * {f_5_28 : 0.0008043}) * {utof(vs_cbuf15[28].z) : -0.6302658} + (({pf_10_10 : 294.365} * {f_5_28 : 0.0008043}) * {utof(vs_cbuf15[28].y) : -0.5741013} + (({pf_9_17 : -139.6373} * {f_5_28 : 0.0008043}) * {utof(vs_cbuf15[28].x) : 0.5226594}))) * 0.5 + 0.5)
	pf_20_17 = (((pf_19_7 * f_5_28) * utof(vs_cbuf15[28].z) + ((pf_10_10 * f_5_28) * utof(vs_cbuf15[28].y) + ((pf_9_17 * f_5_28) * utof(vs_cbuf15[28].x)))) * 0.5 + 0.5);
	
	// pf_15_20 = (w*0.5+z*0.5)/w
	// pf_18_10 = -1 / (pf_15_20 * vs_cbuf8[30].w - vs_cbuf8[30].y) * vs_cbuf8[30].z
	// -clamp(pf_18_10 * vs_cbuf15[22].x - vs_cbuf15[22].y, 0, 1)
	// -0.0440746  <=>  (0. - clamp(({pf_18_10 : 1124.397} * {utof(vs_cbuf15[22].x) : 0.0000418} + (0. - {utof(vs_cbuf15[22].y) : 0.0029252})), 0.0, 1.0))
	f_1_65 = (0. - clamp((pf_18_10 * utof(vs_cbuf15[22].x) + (0. - utof(vs_cbuf15[22].y))), 0.0, 1.0));
	
	// pf_5_3是in_attr4.y坐标变换后的值
	// pf_23_0 = dy = vs_cbuf8[29].y - pf_5_3
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// dy = vs_cbuf8[29].y - pf_5_3
	// dy/r * 3.3333333
	// 1.02006698979933  <=>  (({pf_23_0 : 403.987} * (1.0 / (sqrt({pf_17_3 : 1742846.00}) + float(1e-05)))) * 3.3333333)
	pf_25_3 = ((pf_23_0 * (1.0 / (sqrt(pf_17_3) + float(1e-05)))) * 3.3333333);
	
	// 3/2次方，用于计算tex2的第二次采样u坐标
	// -1.4721388670934  <=>  (({pf_20_17 : 0.0985556} * ({pf_20_17 : 0.0985556} * ({pf_20_17 : 0.0985556} * -0.0187293 + 0.074260995) + -0.2121144) + 1.5707288) * (0. - sqrt(((0. - {pf_20_17 : 0.0985556}) + 1.))))
	pf_20_19 = ((pf_20_17 * (pf_20_17 * (pf_20_17 * -0.0187293 + 0.074260995) + -0.2121144) + 1.5707288) * (0. - sqrt(((0. - pf_20_17) + 1.))));
	
	// 对数之后再指数，对齐到2^n，用于计算tex1的采样v坐标
	// 0.8934289  <=>  exp2((log2(({f_1_65 : -0.0440746} + 1.)) * {utof(vs_cbuf15[23].y) : 2.50}))
	f_0_12 = exp2((log2((f_1_65 + 1.)) * utof(vs_cbuf15[23].y)));
	
	// -0.9494442  <=>  (0. - sqrt(((0. - ({pf_9_21 : -0.8028888} * 0.5 + 0.5)) + 1.)))
	f_2_63 = (0. - sqrt(((0. - (pf_9_21 * 0.5 + 0.5)) + 1.)));
	
	// 又一个3/2次方， 用于计算tex1的采样u坐标
	// -1.4721388670934  <=>  ((({pf_9_21 : -0.8028888} * 0.5 + 0.5) * (({pf_9_21 : -0.8028888} * 0.5 + 0.5) * (({pf_9_21 : -0.8028888} * 0.5 + 0.5) * -0.0187293 + 0.074260995) + -0.2121144) + 1.5707288) * {f_2_63 : -0.9494442})
	pf_23_6 = (((pf_9_21 * 0.5 + 0.5) * ((pf_9_21 * 0.5 + 0.5) * ((pf_9_21 * 0.5 + 0.5) * -0.0187293 + 0.074260995) + -0.2121144) + 1.5707288) * f_2_63);
	
	// vec4(0.50,0.50,0.50,1.00)  <=>  textureLod({tex2 : tex2}, vec2(0.5, (clamp(max({pf_25_3 : 1.020067}, 0.0), 0.5, 1.0) * -0.1 + 0.68)), 0.0)
	f4_0_2 = textureLod(tex2, vec2(0.5, (clamp(max(pf_25_3, 0.0), 0.5, 1.0) * -0.1 + 0.68)), 0.0);
	
	// 0.50  <=>  {f4_0_2.x : 0.50}
	f_2_64 = f4_0_2.x;
	// 0.50  <=>  {f4_0_2.y : 0.50}
	f_5_29 = f4_0_2.y;
	// 0.50  <=>  {f4_0_2.z : 0.50}
	f_6_12 = f4_0_2.z;
	// vec2(0.0691976,0.5765051)  <=>  vec2(({pf_6_11 : -1.462101} * 0.63661975 + 1.), ({pf_12_8 : 0.1530101} * 0.5 + 0.5))
	f2_0_1 = vec2((pf_6_11 * 0.63661975 + 1.), (pf_12_8 * 0.5 + 0.5));
	// vec4(0.50,0.50,0.50,1.00)  <=>  textureLod({tex2 : tex2}, {f2_0_1 : vec2(0.0691976,0.5765051)}, 0.0)
	f4_0_3 = textureLod(tex2, f2_0_1, 0.0);
	// vec2(0.0628072,0.3816211)  <=>  vec2(({pf_20_19 : -1.472139} * 0.63661975 + 1.), (({pf_10_10 : 294.365} * {f_5_28 : 0.0008043}) * -0.5 + 0.5))
	f2_0_2 = vec2((pf_20_19 * 0.63661975 + 1.), ((pf_10_10 * f_5_28) * -0.5 + 0.5));
	// vec4(0.50,0.50,0.50,1.00)  <=>  textureLod({tex2 : tex2}, {f2_0_2 : vec2(0.0628072,0.3816211)}, 0.0)
	f4_0_4 = textureLod(tex2, f2_0_2, 0.0);
	// vec4(0.50,0.50,0.50,1.00)  <=>  textureLod({tex1 : tex1}, vec2(({pf_23_6 : -1.472139} * 0.63661975 + 1.), ({f_0_12 : 0.8934289} * 0.5 + 0.5)), 0.0)
	f4_0_5 = textureLod(tex1, vec2((pf_23_6 * 0.63661975 + 1.), (f_0_12 * 0.5 + 0.5)), 0.0);
	
	// 2.713148  <=>  ((({pf_18_9 : 0.00} + {in_attr7.w : 0.7787}) + {utof(vs_cbuf15[54].y) : 1.689872}) * ({in_attr7.y : 0.62269} * 0.4 + 0.85))
	out_attr1.w = (((pf_18_9 + in_attr7.w) + utof(vs_cbuf15[54].y)) * (in_attr7.y * 0.4 + 0.85));
	
	//(dx/r,dw/r,dz/r) 与 vs_cbuf15[28]的点积减去vs_cbuf15[60].y
	// -1.3028888  <=>  ((({pf_19_7 : 1199.918} * {f_5_28 : 0.0008043}) * {utof(vs_cbuf15[28].z) : -0.6302658} + (({pf_10_10 : 294.365} * {f_5_28 : 0.0008043}) * {utof(vs_cbuf15[28].y) : -0.5741013} + (({pf_9_17 : -139.6373} * {f_5_28 : 0.0008043}) * {utof(vs_cbuf15[28].x) : 0.5226594}))) + (0. - {utof(vs_cbuf15[60].y) : 0.50}))
	pf_10_14 = (((pf_19_7 * f_5_28) * utof(vs_cbuf15[28].z) + ((pf_10_10 * f_5_28) * utof(vs_cbuf15[28].y) + ((pf_9_17 * f_5_28) * utof(vs_cbuf15[28].x)))) + (0. - utof(vs_cbuf15[60].y)));
	
	// 196.7512  <=>  {pf_0_12 : 196.7512}
	out_attr4.z = pf_0_12;
	
	// 0.00  <=>  ({f_1_56 : -1.00} + 1.)
	out_attr1.x = (f_1_56 + 1.);
	
	// 426.9484  <=>  ({pf_6_4 : 564.6999} + ({pf_2_5 : -137.7515} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724}))))
	out_attr4.x = (pf_6_4 + (pf_2_5_x + (0. * pf_25_1 + (0. * f_5_18))));
	
	// sqrt(dx*dx+dz*dz)
	// 1256.837  <=>  sqrt(({pf_22_0 : -277.3888} * {pf_22_0 : -277.3888} + ({pf_24_1 : 1225.845} * {pf_24_1 : 1225.845})))
	f_17_0 = sqrt((pf_22_0 * pf_22_0 + (pf_24_1 * pf_24_1)));
	
	// 4.853246  <=>  {pf_14_13 : 4.853246}
	gl_Position.x = pf_14_13;
	
	// pf_5_3是in_attr4.y坐标变换后的值
	// 1377.779  <=>  ({pf_5_3 : 1268.157} + ({pf_4_13 : 109.6224} + (0. * {pf_25_1 : 0.9520276} + (0. * {f_5_18 : 0.0479724}))))
	out_attr4.y = (pf_5_3 + (pf_4_13_y + (0. * pf_25_1 + (0. * f_5_18))));
	
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// -0.0522579  <=>  (0. - clamp((sqrt({pf_17_3 : 1742846.00}) * {utof(vs_cbuf15[22].x) : 0.0000418} + (0. - {utof(vs_cbuf15[22].y) : 0.0029252})), 0.0, 1.0))
	f_15_12 = (0. - clamp((sqrt(pf_17_3) * utof(vs_cbuf15[22].x) + (0. - utof(vs_cbuf15[22].y))), 0.0, 1.0));
	
	// 0.9138746  <=>  (((({f_1_56 : -1.00} + 1.) + {in_attr7.z : 0.01691}) + {utof(vs_cbuf15[54].x) : 0.8137476}) * ({in_attr7.x : 0.33394} * 0.3 + 1.))
	out_attr1.z = ((((f_1_56 + 1.) + in_attr7.z) + utof(vs_cbuf15[54].x)) * (in_attr7.x * 0.3 + 1.));
	
	// 923.4166  <=>  {pf_13_15 : 923.4166}
	gl_Position.y = pf_13_15;
	
	// 1164.508  <=>  {pf_8_10 : 1164.508}
	gl_Position.z = pf_8_10;
	
	// 1.00  <=>  clamp(({f_17_0 : 1256.837} * 0.006666667 + (0. - 1.)), 0.0, 1.0)
	out_attr8.z = clamp((f_17_0 * 0.006666667 + (0. - 1.)), 0.0, 1.0);
	
	// 1166.415  <=>  {pf_1_15 : 1166.415}
	gl_Position.w = pf_1_15;
	
	// 1165.462  <=>  ({pf_1_15 : 1166.415} * 0.5 + ({pf_8_10 : 1164.508} * 0.5 + (0. * {pf_14_13 : 4.853246} + (0. * {pf_13_15 : 923.4166}))))
	out_attr2.z = (pf_1_15 * 0.5 + (pf_8_10 * 0.5 + (0. * pf_14_13 + (0. * pf_13_15))));
	
	// 1166.415  <=>  ({pf_1_15 : 1166.415} + (0. * {pf_8_10 : 1164.508} + (0. * {pf_14_13 : 4.853246} + (0. * {pf_13_15 : 923.4166}))))
	out_attr2.w = (pf_1_15 + (0. * pf_8_10 + (0. * pf_14_13 + (0. * pf_13_15))));
	
	// pf_25_3 = dy/r * 3.3333333
	// 1.00  <=>  clamp(max({pf_25_3 : 1.020067}, 0.0), 0.5, 1.0)
	out_attr8.x = clamp(max(pf_25_3, 0.0), 0.5, 1.0);
	
	// pf_5_3是in_attr4.y坐标变换后的值
	// 0.00  <=>  clamp((({pf_5_3 : 1268.157} + (0. - {utof(vs_cbuf15[60].w) : 1672.144})) * 0.1), 0.0, 1.0)
	f_15_15 = clamp(((pf_5_3 + (0. - utof(vs_cbuf15[60].w))) * 0.1), 0.0, 1.0);
	
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// -1.00  <=>  (0. - clamp((sqrt({pf_17_3 : 1742846.00}) * {utof(vs_cbuf15[24].x) : 0.0033333} + (0. - {utof(vs_cbuf15[24].y) : 0.00})), 0.0, 1.0))
	f_16_6 = (0. - clamp((sqrt(pf_17_3) * utof(vs_cbuf15[24].x) + (0. - utof(vs_cbuf15[24].y))), 0.0, 1.0));
	
	// pf_10_14 = (dx/r,dw/r,dz/r) 与 vs_cbuf15[28]的点积减去vs_cbuf15[60].y
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// 0.00  <=>  ((clamp(({pf_10_14 : -1.302889} * {utof(vs_cbuf15[60].z) : 4.00}), 0.0, 1.0) * clamp((sqrt({pf_17_3 : 1742846.00}) * 0.001 + (0. - 0.5)), 0.0, 1.0)) * {f_15_15 : 0.00})
	pf_10_17 = ((clamp((pf_10_14 * utof(vs_cbuf15[60].z)), 0.0, 1.0) * clamp((sqrt(pf_17_3) * 0.001 + (0. - 0.5)), 0.0, 1.0)) * f_15_15);
	
	// 0.00  <=>  ({pf_10_17 : 0.00} * {utof(vs_cbuf15[60].x) : 0.75})
	pf_10_18 = (pf_10_17 * utof(vs_cbuf15[60].x));
	
	// 0.1472379  <=>  exp2((log2(({f_1_65 : -0.0440746} + 1.)) * {utof(vs_cbuf15[23].x) : 42.50}))
	f_15_17 = exp2((log2((f_1_65 + 1.)) * utof(vs_cbuf15[23].x)));
	
	// 0.102172  <=>  exp2((log2(({f_15_12 : -0.0522579} + 1.)) * {utof(vs_cbuf15[23].x) : 42.50}))
	f_16_8 = exp2((log2((f_15_12 + 1.)) * utof(vs_cbuf15[23].x)));
	
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// 0.00  <=>  clamp(((sqrt({pf_17_3 : 1742846.00}) + (0. - {utof(vs_cbuf15[54].w) : 2000.00})) * (1.0 / {utof(vs_cbuf15[57].z) : 3000.00})), 0.0, 1.0)
	f_3_42 = clamp(((sqrt(pf_17_3) + (0. - utof(vs_cbuf15[54].w))) * (1.0 / utof(vs_cbuf15[57].z))), 0.0, 1.0);
	
	// 585.6341  <=>  ({pf_1_15 : 1166.415} * 0.5 + (0. * {pf_8_10 : 1164.508} + ({pf_14_13 : 4.853246} * 0.5 + (0. * {pf_13_15 : 923.4166}))))
	out_attr2.x = (pf_1_15 * 0.5 + (0. * pf_8_10 + (pf_14_13 * 0.5 + (0. * pf_13_15))));
	
	// pf_5_3是in_attr4.y坐标变换后的值
	// pf_23_0 = dy = vs_cbuf8[29].y - pf_5_3
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// 0.6120402  <=>  (({pf_23_0 : 403.987} * (1.0 / (sqrt({pf_17_3 : 1742846.00}) + float(1e-05)))) * 2.)
	pf_3_4 = ((pf_23_0 * (1.0 / (sqrt(pf_17_3) + float(1e-05)))) * 2.);
	
	// 0.00  <=>  ({pf_10_18 : 0.00} * (0. - {utof(vs_cbuf15[1].x) : 0.00}) + {pf_10_18 : 0.00})
	out_attr10.w = (pf_10_18 * (0. - utof(vs_cbuf15[1].x)) + pf_10_18);
	
	// exp2((log2(({f_16_6 : -1.00} + 1.)) * {utof(vs_cbuf15[24].w) : 4.00}))
	f_3_44 = exp2((log2((f_16_6 + 1.)) * utof(vs_cbuf15[24].w)));
	
	// 0.00  <=>  clamp((({pf_9_21 : -0.8028888} + (0. - {utof(vs_cbuf15[60].y) : 0.50})) * {utof(vs_cbuf15[60].z) : 4.00}), 0.0, 1.0)
	f_16_12 = clamp(((pf_9_21 + (0. - utof(vs_cbuf15[60].y))) * utof(vs_cbuf15[60].z)), 0.0, 1.0);
	
	// pf_17_3 = 3个平方和, in_attr4.xyz变换坐标系后到vs_cbuf8[29]的距离的平方
	// 0.6225845  <=>  min(((sqrt({pf_17_3 : 1742846.00}) + (0. - {utof(vs_cbuf15[54].z) : 75.00})) * (1.0 / {utof(vs_cbuf15[54].w) : 2000.00})), {utof(vs_cbuf15[55].w) : 0.70})
	f_17_10 = min(((sqrt(pf_17_3) + (0. - utof(vs_cbuf15[54].z))) * (1.0 / utof(vs_cbuf15[54].w))), utof(vs_cbuf15[55].w));
	
	// 0.00  <=>  ({f_16_12 : 0.00} * clamp(({f_15_17 : 0.1472379} * (0. - {utof(vs_cbuf15[23].z) : 0.85}) + {utof(vs_cbuf15[23].z) : 0.85}), 0.0, 1.0))
	pf_1_16 = (f_16_12 * clamp((f_15_17 * (0. - utof(vs_cbuf15[23].z)) + utof(vs_cbuf15[23].z)), 0.0, 1.0));
	
	// 121.4992  <=>  ({pf_1_15 : 1166.415} * 0.5 + (0. * {pf_8_10 : 1164.508} + (0. * {pf_14_13 : 4.853246} + ({pf_13_15 : 923.4166} * -0.5))))
	out_attr2.y = (pf_1_15 * 0.5 + (0. * pf_8_10 + (0. * pf_14_13 + (pf_13_15 * -0.5))));
	
	// 0.6225845  <=>  max(0., {f_17_10 : 0.6225845})
	f_1_70 = max(0., f_17_10);
	
	// ({f_3_44 : } * (0. - {utof(vs_cbuf15[25].w) : 0.12}) + {utof(vs_cbuf15[25].w) : 0.12})
	out_attr7.x = (f_3_44 * (0. - utof(vs_cbuf15[25].w)) + utof(vs_cbuf15[25].w));
	
	// 0.4751277269961  <=>  (clamp(({f_16_8 : 0.102172} * (0. - {utof(vs_cbuf15[23].z) : 0.85}) + {utof(vs_cbuf15[23].z) : 0.85}), 0.0, 1.0) * {f_1_70 : 0.6225845})
	pf_0_25 = (clamp((f_16_8 * (0. - utof(vs_cbuf15[23].z)) + utof(vs_cbuf15[23].z)), 0.0, 1.0) * f_1_70);
	
	// pf_5_3是in_attr4.y坐标变换后的值
	// 0.00  <=>  clamp((((0. - {pf_5_3 : 1268.157}) + min({utof(vs_cbuf8[29].y) : 1672.144}, {utof(vs_cbuf15[27].z) : 250.00})) * {utof(vs_cbuf15[27].y) : 0.0045455} + {utof(vs_cbuf15[27].x) : -0.0909091}), 0.0, 1.0)
	f_3_49 = clamp((((0. - pf_5_3) + min(utof(vs_cbuf8[29].y), utof(vs_cbuf15[27].z))) * utof(vs_cbuf15[27].y) + utof(vs_cbuf15[27].x)), 0.0, 1.0);
	
	// 0.00  <=>  (({pf_1_16 : 0.00} * (0. - {utof(vs_cbuf15[1].x) : 0.00}) + {pf_1_16 : 0.00}) * {utof(vs_cbuf15[61].x) : 1.00})
	out_attr11.w = ((pf_1_16 * (0. - utof(vs_cbuf15[1].x)) + pf_1_16) * utof(vs_cbuf15[61].x));
	
	// 0.00  <=>  ({f_3_49 : 0.00} * {utof(vs_cbuf15[26].w) : 0.4519901})
	out_attr7.y = (f_3_49 * utof(vs_cbuf15[26].w));
	
	// 1759.139246891  <=>  (({pf_18_10 : 1124.397} + {utof(vs_cbuf15[28].y) : -0.5741013}) * (1.0 / clamp(({utof(vs_cbuf15[28].y) : -0.5741013} * 1.5 + 1.5), 0.0, 1.0)))
	pf_0_29 = ((pf_18_10 + utof(vs_cbuf15[28].y)) * (1.0 / clamp((utof(vs_cbuf15[28].y) * 1.5 + 1.5), 0.0, 1.0)));
	
	// 0.50  <=>  {f4_0_4.x : 0.50}
	out_attr10.x = f4_0_4.x;
	
	// 0.50  <=>  {f4_0_4.y : 0.50}
	out_attr10.y = f4_0_4.y;
	
	// 0.50  <=>  {f4_0_4.z : 0.50}
	out_attr10.z = f4_0_4.z;
	
	// pf_25_3 = dy/r * 3.3333333
	// 0.3919803525  <=>  ((({f4_0_3.y : 0.50} + (0. - {utof(vs_cbuf15[55].y) : 0.825})) * (clamp({pf_3_4 : 0.6120402}, 0.0, 1.0) * {f_3_42 : 0.00}) + {utof(vs_cbuf15[55].y) : 0.825}) * clamp(clamp({pf_25_3 : 1.020067}, 0.0, 1.0),  0.5, {pf_0_25 : 0.4751277}))
	pf_3_11 = (((f4_0_3.y + (0. - utof(vs_cbuf15[55].y))) * (clamp(pf_3_4, 0.0, 1.0) * f_3_42) + utof(vs_cbuf15[55].y)) * clamp(clamp(pf_25_3, 0.0, 1.0),  0.5, pf_0_25));
	// 0.40438256334033  <=>  ((({f4_0_3.x : 0.50} + (0. - {utof(vs_cbuf15[55].x) : 0.8511029})) * (clamp({pf_3_4 : 0.6120402}, 0.0, 1.0) * {f_3_42 : 0.00}) + {utof(vs_cbuf15[55].x) : 0.8511029}) * clamp(clamp({pf_25_3 : 1.020067}, 0.0, 1.0),  0.5, {pf_0_25 : 0.4751277}))
	pf_4_21 = (((f4_0_3.x + (0. - utof(vs_cbuf15[55].x))) * (clamp(pf_3_4, 0.0, 1.0) * f_3_42) + utof(vs_cbuf15[55].x)) * clamp(clamp(pf_25_3, 0.0, 1.0),  0.5, pf_0_25));
	
	// f_2_64 = f4_0_2.x;
	// f_5_29 = f4_0_2.y;
	// f_6_12 = f4_0_2.z;
	// 1.00  <=>  abs(max(({f_6_12 : 0.50} * 0.06 + ({f_2_64 : 0.50} * 0.22 + ({f_5_29 : 0.50} * 0.72))), 1.))
	f_4_79 = abs(max((f_6_12 * 0.06 + (f_2_64 * 0.22 + (f_5_29 * 0.72))), 1.));
	// 1.00  <=>  (1.0 / max(({f_6_12 : 0.50} * 0.06 + ({f_2_64 : 0.50} * 0.22 + ({f_5_29 : 0.50} * 0.72))), 1.))
	f_3_57 = (1.0 / max((f_6_12 * 0.06 + (f_2_64 * 0.22 + (f_5_29 * 0.72))), 1.));
	
	// 0.999997  <=>  {utof(vs_cbuf10[3].x) : 0.999997}
	out_attr3.x = utof(vs_cbuf10[3].x);
	
	// pf_25_3 = dy/r * 3.3333333
	// 0.00  <=>  (0. - ((clamp(max({pf_25_3 : 1.020067}, 0.0), 0.5, 1.0) * (0. - {f_1_70 : 0.6225845}) + {f_1_70 : 0.6225845}) * {f_3_57 : 1.00}))
	f_4_81 = (0. - ((clamp(max(pf_25_3, 0.0), 0.5, 1.0) * (0. - f_1_70) + f_1_70) * f_3_57));
	// 1.00  <=>  exp2((log2({f_4_79 : 1.00}) * 0.7))
	f_3_61 = exp2((log2(f_4_79) * 0.7));
	// 0.5040078621168  <=>  ((({f4_0_3.z : 0.50} + (0. - {utof(vs_cbuf15[55].z) : 1.060784})) * (clamp({pf_3_4 : 0.6120402}, 0.0, 1.0) * {f_3_42 : 0.00}) + {utof(vs_cbuf15[55].z) : 1.060784}) * clamp(clamp({pf_25_3 : 1.020067}, 0.0, 1.0),  0.5, {pf_0_25 : 0.4751277}))
	pf_1_24 = (((f4_0_3.z + (0. - utof(vs_cbuf15[55].z))) * (clamp(pf_3_4, 0.0, 1.0) * f_3_42) + utof(vs_cbuf15[55].z)) * clamp(clamp(pf_25_3, 0.0, 1.0),  0.5, pf_0_25));
	// 0.5248723  <=>  (((0. - clamp(clamp({pf_25_3 : 1.020067}, 0.0, 1.0),  0.5, {pf_0_25 : 0.4751277})) + {f_4_81 : 0.00}) + 1.)
	pf_5_5 = (((0. - clamp(clamp(pf_25_3, 0.0, 1.0),  0.5, pf_0_25)) + f_4_81) + 1.);
	
	// 0.5248723  <=>  {pf_5_5 : 0.5248723}
	out_attr9.w = pf_5_5;
	
	// 0.50  <=>  ({f_5_29 : 0.50} * (1.0 / {f_3_61 : 1.00}))
	pf_5_6 = (f_5_29 * (1.0 / f_3_61));
	// 0.50  <=>  ({f_2_64 : 0.50} * (1.0 / {f_3_61 : 1.00}))
	pf_6_19 = (f_2_64 * (1.0 / f_3_61));
	// 0.50  <=>  ({f_6_12 : 0.50} * (1.0 / {f_3_61 : 1.00}))
	pf_7_27 = (f_6_12 * (1.0 / f_3_61));
	// 0.3919804  <=>  ({pf_5_6 : 0.50} * ((clamp(max({pf_25_3 : 1.020067}, 0.0), 0.5, 1.0) * (0. - {f_1_70 : 0.6225845}) + {f_1_70 : 0.6225845}) * {f_3_57 : 1.00}) + {pf_3_11 : 0.3919804})
	pf_3_12 = (pf_5_6 * ((clamp(max(pf_25_3, 0.0), 0.5, 1.0) * (0. - f_1_70) + f_1_70) * f_3_57) + pf_3_11);
	
	// 0.3919804  <=>  {pf_3_12 : 0.3919804}
	out_attr9.y = pf_3_12;
	
	// 0.4043826  <=>  ({pf_6_19 : 0.50} * ((clamp(max({pf_25_3 : 1.020067}, 0.0), 0.5, 1.0) * (0. - {f_1_70 : 0.6225845}) + {f_1_70 : 0.6225845}) * {f_3_57 : 1.00}) + {pf_4_21 : 0.4043826})
	pf_0_31 = (pf_6_19 * ((clamp(max(pf_25_3, 0.0), 0.5, 1.0) * (0. - f_1_70) + f_1_70) * f_3_57) + pf_4_21);
	// 0.5040079  <=>  ({pf_7_27 : 0.50} * ((clamp(max({pf_25_3 : 1.020067}, 0.0), 0.5, 1.0) * (0. - {f_1_70 : 0.6225845}) + {f_1_70 : 0.6225845}) * {f_3_57 : 1.00}) + {pf_1_24 : 0.5040079})
	pf_1_25 = (pf_7_27 * ((clamp(max(pf_25_3, 0.0), 0.5, 1.0) * (0. - f_1_70) + f_1_70) * f_3_57) + pf_1_24);
	
	// 0.4043826  <=>  {pf_0_31 : 0.4043826}
	out_attr9.x = pf_0_31;
	
	// 0.5040079  <=>  {pf_1_25 : 0.5040079}
	out_attr9.z = pf_1_25;
	
	// 0.50  <=>  ({f4_0_5.x : 0.50} * clamp((max(({pf_0_29 : 1759.139} * 0.06666667), 0.2) + (0. - 0.)), 0.0, 1.0))
	pf_0_33 = (f4_0_5.x * clamp((max((pf_0_29 * 0.06666667), 0.2) + (0. - 0.)), 0.0, 1.0));
	// 0.50  <=>  ({f4_0_5.y : 0.50} * clamp((max(({pf_0_29 : 1759.139} * 0.06666667), 0.2) + (0. - 0.)), 0.0, 1.0))
	pf_1_26 = (f4_0_5.y * clamp((max((pf_0_29 * 0.06666667), 0.2) + (0. - 0.)), 0.0, 1.0));
	
	// 0.50  <=>  {pf_0_33 : 0.50}
	out_attr11.x = pf_0_33;
	
	// 0.50  <=>  ({f4_0_5.z : 0.50} * clamp((max(({pf_0_29 : 1759.139} * 0.06666667), 0.2) + (0. - 0.)), 0.0, 1.0))
	pf_0_34 = (f4_0_5.z * clamp((max((pf_0_29 * 0.06666667), 0.2) + (0. - 0.)), 0.0, 1.0));
	
	// 0.50  <=>  {pf_1_26 : 0.50}
	out_attr11.y = pf_1_26;
	
	// 0.50  <=>  {pf_0_34 : 0.50}
	out_attr11.z = pf_0_34;
	return;
}
