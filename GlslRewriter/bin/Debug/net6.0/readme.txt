1、首先配置输入变量与uniform变量值，从RenderDoc导出csv文件，然后在配置里导入
2、配置输出变量注释，一般采用多行（默认）注释输出层次化的表达式，配置后生成文件
3、搜索输出文件是否有...，有则表明生成的表达式过长，需要再拆分中间变量
4、观察输出带有...的变量的层次化表达式，找出拆分的中间变量，配置后重新生成文件
5、反复进行3与4，直到不再有...的输出出现。（通过配置更长的表达式与嵌套层次也可以消除...但这样生成的代码会因为单行过长而无法阅读）
6、配置生成表达式列表，再次重新生成文件，在生成文件结尾以块注释方式记录了拆分的各个变量的表达式
7、根据6的内容重新组织shader代码（也就是用这部分内容替换main函数），尝试编译(使用GlslangValidator)并解决相应编译错误(主要是需要补
回原文件的预处理宏，再就是phi变量的处理与恢复之前分析过程中人为注释掉的代码)，完成后应该是可以使用的新shader

注：为了方便理解，可能需要先根据RenderDoc抓到的输入与uniform数据，将为False的条件分支注释掉（如果是简单返回），最后再补回来。或者
配置每一个赋值给phi变量的变量为需要输出注释，在自动分析完成后，再为phi变量恢复相应的分支处理，因为我们引入了phi变量隔离条件语句前
后的数据依赖（phi变量赋值没有记录到计算图，所以工具在合并表达式时不会越过phi变量），理论上循环也是类似处理，但可能会复杂许多。