struct(TestStru3)
{
	count : int32;
	ptest2 : TestStru2[12];
};

@ga : int = 123;
@gb : int[3] = [3,5,1];
@gc : int = 456;
@gd : string = "this is a test";

hook(CompileTest)
{
	onenter{
		$a : int = 12;
		$b : int = 13 * 17;
		$d : int = ptrget(addr($a), 4);
		$e : int[4] = [1,$a,3,$b];
		$c : int;
		$e[1] = $d + $e[2] * $c;
		if ($a==12) {
			$c = $a * $b;
		};
		while($c!=0){
			$c = $c - 1;
		};
		loopi($c,0,3,1){
			$d = $d + 1;
		};
		loopd($c,8,0,-2){
			$d = $d + 1;
			break;
		};
		if($a == 12){
			$d = $d + 1;
		}
		else{
			$d = $d - 1;
		};
		$c = addr($e) + argv(0);
		$d = $c < 1 ? 2 : 3;
		$e[0] = $d ?? 1;
		$f : int = struct($d, ptr(ptr(TestStru3.ptest2).ptest).size);
		$g : int = dumpcascadeptr(addr($e), 0x08, 0x08);
		$h1 : int = offset(TestStru3.ptest2[3].size);
		$h2 : int = size(TestStru3);
		ffi(proto(void,noparams,[int,int],[],[]),0x1234,121,121);
		ffi(proto(void,noparams,[int],[float],[]),0x1235,123,123.00);
		return 0;
	};
};

hook(Test1)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("dbg a:%d b:%f c:%s\n",$a,$b,$c);
		dumpcascadeptr(argv(3),0);
		if($a==123){
			ptrset(argv(0),4,1);
		}
		else{ 
			ptrset(argv(0),4,0);
		};
		$i:int = 0;
		loop($i,0,10){
			printf("+%d\n",$i);
		};
		$j:float = $i;
		while($j>0){
			printf("-%f\n",$j);
			//$j=$j-1;
			dec($j,2.0);
		};
		printf(">>> %f\n", $j);
		printf(">>> %f\n", inc($j));
		printf(">>> %f\n", inc($j, 2.0));
		printf(">>> %f\n", inc($j, 3.0));
		printf("%d %d %d\n", stkix(), hookid(), hookver());
		printf("str contains %d %d\n", stringcontains("test","es","te"), stringnotcontains("test","es","fg"));
		printf("str contains any %d %d\n", stringcontainsany("test","es","te"), stringnotcontainsany("test","es","fg"));
		printf("str find %d %d\n", stringfind("test","es"), stringrfind("test","es"));
		printf("str find2 %d %d\n", stringfind("test","es",1), stringrfind("test","es",0));
		printf("load:%llx\n", LoadLib("kernel32.dll"));
		printf("proc:%llx\n", LoadLibAndGetProc("user32.dll","MessageBoxA"));
		return 1;
	};
	onexit{
		printf("dbg time:%d\n",time());
		ptrset(argv(0),4,2);
	};
};

hook(TestMacro1)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("dbg a:%d b:%f c:%s\n",$a,$b,$c);
		ptrset(argv(0), 4, $a==1234 ? 1 : (0 ?? 2));
		$fields:string[3];
		$seg:int = FindSegment(GetPID(),"vulkan.adreno.so","r--p",0,$fields);
		printf("pid:%d tid:%d vulkan seg:%llx info:%s %s %s\n",GetPID(),GetTID(),$seg,$fields[0],$fields[1],$fields[2]);
		printf("%d %d %d %f %s\n", stringlength("str1"), cstrlen(castint("str2")), castint(1.24), castflt(123), caststr(castint("teststr")));
		printf("%d %f %lld %f\n", asint(1.234), asfloat(asint(1.234)), aslong(1.234), asdouble(aslong(1.234)));
		$r:int = ffi(proto(int,noparams,[int,int,int,int],[],[int,int,int,int,float,float,int,int]),TestFFI(0),1,2,3,4,5,6,7,8,9.0,10.0,11,12);
		$r2:int = ffi(proto(int,noparams,[int,int,int,int],[],[int,int,int,int,float,float,int,int]){doublefloat(true);},TestFFI(1),1,2,3,4,5,6,7,8,9.0,10.0,11,12);
		printf("platform:%d ffi:%d %d\n",platform(),$r,$r2);
		return 1;
	};
	onexit{
		printf("dbg time:%d\n",time());
		ptrset(argv(0),4,2);
	};
};

hook("CommandBuffer::BeginRenderPass")
{
	onenter{
		printf("CommandBuffer::BeginRenderPass enter time:%d\n",time());
		//dumpstack("CommandBuffer::BeginRenderPass");
		return 0;
	};
	onexit{
		printf("CommandBuffer::BeginRenderPass exit time:%d\n",time());
	};
};
hook("CommandBuffer::EndRenderPass")
{
	onenter{
		printf("CommandBuffer::EndRenderPass enter time:%d\n",time());
		//dumpstack("CommandBuffer::EndRenderPass");
		return 0;
	};
	onexit{
		printf("CommandBuffer::EndRenderPass exit time:%d\n",time());
	};
};
hook("CommandBuffer::Begin")
{
	onenter{
		printf("CommandBuffer::Begin enter time:%d\n",time());
		//dumpstack("CommandBuffer::Begin");
		return 0;
	};
	onexit{
		printf("CommandBuffer::Begin exit time:%d\n",time());
	};
};
hook("CommandBuffer::End")
{
	onenter{
		printf("CommandBuffer::End enter time:%d\n",time());
		//dumpstack("CommandBuffer::End");
		return 0;
	};
	onexit{
		printf("CommandBuffer::End exit time:%d\n",time());
	};
};
hook("TaskExecutor::HandleCommandStream")
{
	onenter{
		printf("TaskExecutor::HandleCommandStream enter time:%d\n",time());
		//dumpstack("TaskExecutor::HandleCommandStream");
		return 0;
	};
	onexit{
		printf("TaskExecutor::HandleCommandStream exit time:%d\n",time());
	};
};
hook("ScratchBuffer::ClearPool")
{
	onenter{
		printf("ScratchBuffer::ClearPool enter time:%d\n",time());
		//dumpstack("ScratchBuffer::ClearPool");
		return 0;
	};
	onexit{
		printf("ScratchBuffer::ClearPool exit time:%d\n",time());
	};
};
hook("ScratchBuffer::TryLocklessAlloc")
{
	onenter{
		printf("ScratchBuffer::TryLocklessAlloc enter time:%d\n",time());
		//dumpstack("ScratchBuffer::TryLocklessAlloc");
		return 0;
	};
	onexit{
		printf("ScratchBuffer::TryLocklessAlloc exit time:%d\n",time());
	};
};
hook("ScratchBuffer::TrimMemory")
{
	onenter{
		printf("ScratchBuffer::TrimMemory enter time:%d\n",time());
		//dumpstack("ScratchBuffer::TrimMemory");
		return 0;
	};
	onexit{
		printf("ScratchBuffer::TrimMemory exit time:%d\n",time());
	};
};
hook("VKGpuProgram::Create")
{
	onenter{
		printf("VKGpuProgram::Create enter time:%d\n",time());
		//dumpstack("VKGpuProgram::Create");
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		$d:string = ptrget(argv(3),8);
		$name:string = $d;
		printf("shader:%s\n", $d);
		/*
		if($name=="Hidden/VFX/5035155_gpu_zzy/System/Output Particle Quad" || $name=="Hidden/VFX/Simple_Mesh_particle/System/Output Particle Quad"){
			assert(0);
		};
		*/
		return 0;
	};
	onexit{
		printf("VKGpuProgram::Create exit time:%d\n",time());
	};
};
hook("VKGpuProgram::Prepare")
{
	onenter{
		printf("VKGpuProgram::Prepare enter time:%d\n",time());
		//dumpstack("VKGpuProgram::Prepare");
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		$d:string = ptrget(argv(3),8);
		printf("this:%llx\n", $a);
		/*
		$name:string = $d;
		if($name=="Hidden/VFX/5035155_gpu_zzy/System/Output Particle Quad" || $name=="Hidden/VFX/Simple_Mesh_particle/System/Output Particle Quad"){
			assert(0);
		};
		*/
		return 0;
	};
	onexit{
		printf("VKGpuProgram::Prepare exit time:%d\n",time());
	};
};
hook("GraphicsPipelineProvider::GetShaderModule")
{
	onenter{
		printf("GraphicsPipelineProvider::GetShaderModule enter time:%d\n",time());
		//dumpstack("VKGpuProgram::Create");
		$a:int = ptrget(argv(7),8);
		$b:int = ptrget(argv(7)+8,8);
		printf("GraphicsPipelineProvider::GetShaderModule key:%8.8x %8.8x\n",$a,$b);
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		printf("GraphicsPipelineProvider::GetShaderModule ret:%x\n",$a);
		printf("GraphicsPipelineProvider::GetShaderModule exit time:%d\n",time());
	};
};
hook("GraphicsPipelineProvider::DeleteShaderModule")
{
	onenter{
		printf("GraphicsPipelineProvider::DeleteShaderModule enter time:%d\n",time());
		dumpstack("GraphicsPipelineProvider::DeleteShaderModule");
		$a:int = ptrget(argv(1),8);
		printf("GraphicsPipelineProvider::DeleteShaderModule obj:%x\n",$a);
		return 0;
	};
	onexit{
		printf("GraphicsPipelineProvider::DeleteShaderModule exit time:%d\n",time());
	};
};
hook("GraphicsPipelineProvider::GetPipelineCacheAndLayout")
{
	onenter{
		printf("GraphicsPipelineProvider::GetPipelineCacheAndLayout enter time:%d\n",time());
		//dumpstack("GraphicsPipelineProvider::GetPipelineCacheAndLayout");
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		printf("GraphicsPipelineProvider::GetPipelineCacheAndLayout ret:%x\n",$a);
		printf("GraphicsPipelineProvider::GetPipelineCacheAndLayout exit time:%d\n",time());
	};
};
hook("GraphicsPipelineProvider::DeletePipelineCacheAndLayout")
{
	onenter{
		printf("GraphicsPipelineProvider::DeletePipelineCacheAndLayout enter time:%d\n",time());
		dumpstack("GraphicsPipelineProvider::DeletePipelineCacheAndLayout");
		$a:int = ptrget(argv(1),8);
		printf("GraphicsPipelineProvider::DeletePipelineCacheAndLayout obj:%x\n",$a);
		return 0;
	};
	onexit{
		printf("GraphicsPipelineProvider::DeletePipelineCacheAndLayout exit time:%d\n",time());
	};
};
hook("PipelineCreateInfo::Configure")
{
	onenter{
		printf("PipelineCreateInfo::Configure enter time:%d\n",time());
		//dumpstack("PipelineCreateInfo::Configure");
		return 0;
	};
	onexit{
		printf("PipelineCreateInfo::Configure exit time:%d\n",time());
	};
};
hook("CreateGraphicsPipeline")
{
	onenter{
		printf("CreateGraphicsPipeline enter time:%d\n",time());
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:string = ptrget(argv(2),8);
		$dev:int = ptrget($a, 8);
		printf("this:%llx device:%llx\n", $a, $dev);
		$addr:int = cascadeptr($dev, 8, 0x8, 0x68, 0x1390);
		printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr);
		$log:int = ptrget($addr+0x140, 8);
		printf("this:%llx device:%llx log:%d\n", $a, $dev, $log);
		ptrset($addr+0x140, 8, 1);
		$fields:string[3];
		$seg:int = FindSegment(GetPID(),"vulkan.adreno.so","r--p",0,$fields);
		printf("pid:%d tid:%d vulkan seg:%llx info:%s %s %s\n",GetPID(),GetTID(),$seg,$fields[0],$fields[1],$fields[2]);
		$name:string = $c;
		if($name=="Hidden/VFX/5035155_gpu_zzy/System/Output Particle Quad" || $name=="Hidden/VFX/Simple_Mesh_particle/System/Output Particle Quad"){
			assert(0);
		};
		//dumpstack("CreateGraphicsPipeline");
		return 0;
	};
	onexit{
		printf("CreateGraphicsPipeline exit time:%d\n",time());
	};
};