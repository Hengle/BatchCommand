struct(TestStru3)
{
	count : int32;
	ptest2 : TestStru2[12];
};

@ga : int = 123;
@gb : int[3] = [3,5,1];
@gc : int = 456;
@gd : string = "this is a test";

hook(Test)
{
	onenter{
		$a : int = 12;
		$b : int = 13 * 17;
		$d : int = ptrget(addr($a), 4);
		$e : int[4] = [1,$a,3,$b];
		$c : int;
		$e[1] = $d + $e[2] * $c;
		if ($a==12) {
			$c = $a * $b;
		};
		while($c!=0){
			$c = $c - 1;
		};
		loopi($c,0,3,1){
			$d = $d + 1;
		};
		loopd($c,8,0,-2){
			$d = $d + 1;
			break;
		};
		if($a == 12){
			$d = $d + 1;
		}
		else{
			$d = $d - 1;
		};
		$c = addr($e) + argv(0);
		$d = $c < 1 ? 2 : 3;
		$e[0] = $d ?? 1;
		$f : int32 = struct($d, ptr(ptr(TestStru3.ptest2).ptest).size);
		return 0;
	};
};

hook(Test1)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("dbg a:%d b:%f c:%s\n",$a,$b,$c);
		if($a==123){
			ptrset(argv(0),4,1);
		}
		else{ 
			ptrset(argv(0),4,0);
		};
		$i:int = 0;
		loop($i,0,10){
			printf("+%d\n",$i);
		};
		$j:float = $i;
		while($j>0){
			printf("-%f\n",$j);
			//$j=$j-1;
			dec($j,2.0);
		};
		printf(">>> %f\n", $j);
		printf(">>> %f\n", inc($j));
		printf(">>> %f\n", inc($j, 2.0));
		printf(">>> %f\n", inc($j, 3.0));
		printf("%d %d %d", stkix(), hookid(), hookver());
		return 1;
	};
	onexit{
		printf("dbg time:%d\n",time());
		ptrset(argv(0),4,2);
	};
};

hook(TestMacro1)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("dbg a:%d b:%f c:%s\n",$a,$b,$c);
		ptrset(argv(0), 4, $a==1234 ? 1 : (0 ?? 2));
		return 1;
	};
	onexit{
		printf("dbg time:%d\n",time());
		ptrset(argv(0),4,2);
	};
};

hook("CommandBuffer::EndRenderPass")
{
	onenter{
		dumpstack("CommandBuffer::EndRenderPass");
		return 0;
	};
	onexit{
		printf("CommandBuffer::EndRenderPass time:%d\n",time());
	};
};
hook("CommandBuffer::End")
{
	onenter{
		dumpstack("CommandBuffer::End");
		return 0;
	};
	onexit{
		printf("CommandBuffer::End time:%d\n",time());
	};
};