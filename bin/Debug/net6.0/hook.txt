struct(TestStru3)
{
	count : int32;
	ptest2 : TestStru2[12];
};

@g_dir_chged : int = 0;
@g_last_time : int = 0;
@g_in_test : int = 0;

@ga : int = 123;
@gb : int[3] = [3,5,1];
@gc : int = 456;
@gd : string = "this is a test";

hook(CompileTest)
{
	onenter{
		$a : int = 12;
		$b : int = 13 * 17;
		$d : int = ptrget(addr($a), 4);
		$e : int[4] = [1,$a,3,$b];
		$c : int;
		$e[1] = $d + $e[2] * $c;
		if ($a==12) {
			$c = $a * $b;
		};
		while($c!=0){
			$c = $c - 1;
		};
		loopi($c,0,3,1){
			$d = $d + 1;
		};
		loopd($c,8,0,-2){
			$d = $d + 1;
			break;
		};
		if($a == 12){
			$d = $d + 1;
		}
		else{
			$d = $d - 1;
		};
		$c = addr($e) + argv(0);
		$d = $c < 1 ? 2 : 3;
		$e[0] = $d ?? 1;
		$f : int = struct($d, ptr(ptr(TestStru3.ptest2).ptest).size);
		$g : int = dumpcascadeptr(addr($e), 0x08, 0x08);
		$h1 : int = offset(TestStru3.ptest2[3].size);
		$h2 : int = size(TestStru3);
		ffi(proto(void,noparams,[int,int],[],[]),0x1234,121,121);
		ffi(proto(void,noparams,[int],[float],[]),0x1235,123,123.00);
		return 0;
	};
};

hook(DbgScp_TestVoid)
{
	onenter{
		$a:int = ptrget(argv(0),4);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		printf("dbg a:%d b:%f c:%s\n",$a,$b,$c);
		dumpcascadeptr(argv(2),0);
		if($a==123){
			ptrset(argv(0),4,1);
		}
		else{ 
			ptrset(argv(0),4,0);
		};
		$i:int = 0;
		loop($i,0,10){
			printf("+%d\n",$i);
		};
		$j:float = $i;
		while($j>0){
			printf("-%f\n",$j);
			//$j=$j-1;
			dec($j,2.0);
		};
		printf(">>> %f\n", $j);
		printf(">>> %f\n", inc($j));
		printf(">>> %f\n", inc($j, 2.0));
		printf(">>> %f\n", inc($j, 3.0));
		printf("%d %d %d\n", stkix(), hookid(), hookver());
		printf("str contains %d %d\n", stringcontains("test","es","te"), stringnotcontains("test","es","fg"));
		printf("str contains any %d %d\n", stringcontainsany("test","es","te"), stringnotcontainsany("test","es","fg"));
		printf("str find %d %d\n", stringfind("test","es"), stringrfind("test","es"));
		printf("str find2 %d %d\n", stringfind("test","es",1), stringrfind("test","es",0));
		printf("load:%llx\n", LoadLib("kernel32.dll"));
		printf("proc:%llx\n", LoadLibAndGetProc("user32.dll","MessageBoxA"));
		$addr:int = 0x800010004003;
		printf("%llx\n", $addr & (~0x03));
		CheckMemory(28);
		@g_in_test = 1;
		loop($i,1,20){
			UnityAlloc(4096*1024,8,2,0);
		};
		@g_in_test = 0;
		return 1;
	};
	onexit{
		printf("dbg time:%lld\n",time());
	};
};

hook(DbgScp_TestInt)
{
	onenter{
		$a:int = ptrget(argv(1),4);
		$b:int = ptrget(argv(2),8);
		$c:int = ptrget(argv(3),8);
		printf("dbg a:%d b:%f c:%s\n",$a,$b,$c);
		ptrset(argv(0), 4, $a==1234 ? 1 : (0 ?? 2));
		$fields:string[3];
		$seg:int = FindSegment(GetPID(),"vulkan.adreno.so","r--p",0,$fields);
		printf("pid:%d tid:%d vulkan seg:%llx info:%s %s %s\n",GetPID(),GetTID(),$seg,$fields[0],$fields[1],$fields[2]);
		printf("%d %d %d %f %s\n", stringlength("str1"), cstrlen(castint("str2")), castint(1.24), castflt(123), caststr(castint("teststr")));
		printf("%d %f %lld %f\n", asint(1.234), asfloat(asint(1.234)), aslong(1.234), asdouble(aslong(1.234)));
		$r:int = ffi(proto(int,noparams,[int,int,int,int],[],[int,int,int,int,float,float,int,int]),TestFFI(0),1,2,3,4,5,6,7,8,9.0,10.0,11,12);
		$r2:int = ffi(proto(int,noparams,[int,int,int,int],[],[int,int,int,int,float,float,int,int]){doublefloat(true);},TestFFI(1),1,2,3,4,5,6,7,8,9.0,10.0,11,12);
		printf("platform:%d ffi:%d %d\n",platform(),$r,$r2);
		MemoryProtect(0x80004000,1024,3);
		printf("Model:%s gpu:%s ver:%s\n",GetDeviceModel(),GetGpu(),GetGpuVer());
		//duplicate free memory
		$mem:int = UnityAlloc(10000000,16,153,0);
		UnityDealloc($mem,153);
		//UnityDealloc($mem,153);
		$i:int;
		loop($i,1,165){
			CheckMemory($i);
		};
		return 1;
	};
	onexit{
		printf("dbg time:%lld\n",time());
		ptrset(argv(0),4,2);
	};
};

hook("VKGpuProgram::Create")
{
	onenter{
		printf("VKGpuProgram::Create enter time:%lld\n",time());
		//dumpstack("VKGpuProgram::Create");
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),8);
		$d:string = ptrget(argv(3),8);
		$name:string = $d;
		printf("VKGpuProgram shader:%s\n", $d);
		/*
		if($name=="Hidden/VFX/5035155_gpu_zzy/System/Output Particle Quad" || $name=="Hidden/VFX/Simple_Mesh_particle/System/Output Particle Quad"){
			assert(0);
		};
		*/
		return 0;
	};
	onexit{
		printf("VKGpuProgram::Create exit time:%lld\n",time());
	};
};
hook("GraphicsPipelineProvider::GetShaderModule")
{
	onenter{
		printf("GraphicsPipelineProvider::GetShaderModule enter time:%lld\n",time());
		//dumpstack("VKGpuProgram::Create");
		$a:int = ptrget(argv(7),8);
		$b:int = ptrget(argv(7)+8,8);
		printf("GraphicsPipelineProvider::GetShaderModule key:%8.8x %8.8x\n",$a,$b);
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		printf("GraphicsPipelineProvider::GetShaderModule ret:%x\n",$a);
		printf("GraphicsPipelineProvider::GetShaderModule exit time:%lld\n",time());
	};
};
hook("GraphicsPipelineProvider::DeleteShaderModule")
{
	onenter{
		printf("GraphicsPipelineProvider::DeleteShaderModule enter time:%lld\n",time());
		dumpstack("#GraphicsPipelineProvider::DeleteShaderModule");
		$a:int = ptrget(argv(1),8);
		printf("GraphicsPipelineProvider::DeleteShaderModule obj:%x\n",$a);
		return 0;
	};
	onexit{
		printf("GraphicsPipelineProvider::DeleteShaderModule exit time:%lld\n",time());
	};
};
hook("GraphicsPipelineProvider::GetPipelineCacheAndLayout")
{
	onenter{
		printf("GraphicsPipelineProvider::GetPipelineCacheAndLayout enter time:%lld\n",time());
		//dumpstack("GraphicsPipelineProvider::GetPipelineCacheAndLayout");
		return 0;
	};
	onexit{
		$a:int = ptrget(argv(0),8);
		printf("GraphicsPipelineProvider::GetPipelineCacheAndLayout ret:%x\n",$a);
		printf("GraphicsPipelineProvider::GetPipelineCacheAndLayout exit time:%lld\n",time());
	};
};
hook("GraphicsPipelineProvider::DeletePipelineCacheAndLayout")
{
	onenter{
		printf("GraphicsPipelineProvider::DeletePipelineCacheAndLayout enter time:%lld\n",time());
		dumpstack("#GraphicsPipelineProvider::DeletePipelineCacheAndLayout");
		$a:int = ptrget(argv(1),8);
		printf("GraphicsPipelineProvider::DeletePipelineCacheAndLayout obj:%x\n",$a);
		return 0;
	};
	onexit{
		printf("GraphicsPipelineProvider::DeletePipelineCacheAndLayout exit time:%lld\n",time());
	};
};
hook("CreateGraphicsPipeline")
{
	onenter{
		printf("CreateGraphicsPipeline enter time:%lld\n",time());
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:string = ptrget(argv(2),8);
		$dev:int = ptrget($a, 8);
		printf("CreateGraphicsPipeline this:%llx device:%llx thread:%d\n", $a, $dev, GetTID());
		
		/*
		//MI 12 pro
		//$addr:int = cascadeptr($dev, 8, 0x8, 0x68, 0x1390);
		//printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr);
		//$log:int = ptrget($addr+0x140, 8);
		//printf("this:%llx device:%llx log:%d\n", $a, $dev, $log);
		//ptrset($addr+0x140, 8, 1);
		
		//adreno eng
		$addr:int = cascadeptr($dev, 8, 0x8, 0x70, 0x1968);
		printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr);
		$log:int = ptrget($addr+0x630, 4);
		printf("this:%llx device:%llx log:%d\n", $a, $dev, $log);
		ptrset($addr+0x630, 4, 1);
		
		//adreno eng vendor scope
		$addr2:int = cascadeptr($dev, 8, 0x8, 0x70, 0x1948, 0x88);
		printf("this:%llx device:%llx addr:%llx\n", $a, $dev, $addr2);
		$log2:int = ptrget($addr2+0xc78, 4);
		printf("this:%llx device:%llx scope log:%d\n", $a, $dev, $log2);
		ptrset($addr2+0xc78, 4, 1);
		
		$fields:string[3];
		$seg:int = FindSegment(GetPID(),"vulkan.adreno.so","r--p",1,$fields);
		printf("pid:%d tid:%d vulkan seg:%llx info:%s %s %s\n",GetPID(),GetTID(),$seg,$fields[0],$fields[1],$fields[2]);
		if ($seg>0 && @g_dir_chged==0) {
			//assert(0);
			
			printf("old dir: %s\n", caststr($seg + 0x04A9D8));
			
			MemoryProtect($seg + 0x040000, 0x10000, 2);
			$tstr:int = castint("/sdcard/Download/");
			$size:int = cstrlen($tstr);
			memcpy($seg + 0x04A9D8, $tstr, $size);
			memcpy($seg + 0x04AB85, $tstr, $size);
			memcpy($seg + 0x04AB97, $tstr, $size);
			memcpy($seg + 0x04B058, $tstr, $size);
			memcpy($seg + 0x04B36D, $tstr, $size);
			memcpy($seg + 0x04B5FD, $tstr, $size);
			memcpy($seg + 0x04BECB, $tstr, $size);
			memcpy($seg + 0x04CAE8, $tstr, $size);
			memcpy($seg + 0x04CBEA, $tstr, $size);
			memcpy($seg + 0x04CC19, $tstr, $size);
			memcpy($seg + 0x04CC2B, $tstr, $size);
			
			@g_dir_chged = 1;			
		};
		$name:string = $c;
		if($name=="Hidden/VFX/5035155_gpu_zzy/System/Output Particle Quad" || $name=="Hidden/VFX/Simple_Mesh_particle/System/Output Particle Quad"){
			assert(0);
		};
		*/
		//dumpstack("CreateGraphicsPipeline");
		return 0;
	};
	onexit{
		printf("CreateGraphicsPipeline exit time:%lld\n",time());
	};
};
hook("MemoryManager::GetAllocator")
{
	onenter{
		//printf("MemoryManager::GetAllocator enter time:%lld\n",time());
		return 0;
	};
	onexit{
		//printf("MemoryManager::GetAllocator exit time:%lld\n",time());
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		$c:int = ptrget(argv(2),4);
		if ($a == 0) {
			printf("MemoryManager::GetAllocator memlabel:%d return null\n", $c);
			//dumpstack("MemoryManager::GetAllocator");
		}
		elif ($c == 2) {
			//assert(0);
		}
		elif ($c == 153) {
			//printf("MemoryManager::GetAllocator memlabel:%d allocator\n", $c);
			//dumpstack("MemoryManager::GetAllocator");
			//assert(0);
		}
		elif ($c >= 166) {
			printf("MemoryManager::GetAllocator memlabel:%d use custom allocator\n", $c);
			//dumpstack("MemoryManager::GetAllocator");
		};
	};
};
hook("MemoryManager::GetAllocatorOnNull")
{
	onenter{
		//printf("MemoryManager::GetAllocatorOnNull enter time:%lld\n",time());
		$a:int = ptrget(argv(0),8);
		$b:int = ptrget(argv(1),8);
		printf("MemoryManager::GetAllocatorOnNull memlabel:%d return null\n", $b);
		//dumpstack("MemoryManager::GetAllocatorOnNull");
		return 0;
	};
	onexit{
		//printf("MemoryManager::GetAllocatorOnNull exit time:%lld\n",time());
	};
};
hook("MemoryManager::Allocate_Temp_Null")
{
	onenter{
		//$ret:int = ptrget(argv(0),8);
		//$retry:int = ptrget(argv(1),4);
		$this:int = ptrget(argv(2),8);
		$size:int = ptrget(argv(3),8);
		$align:int = ptrget(argv(4),8);
		$label:int = ptrget(argv(5),4);
		$option:int = ptrget(argv(6),4);
		$file:string = ptrget(argv(7),8);
		$line:int = ptrget(argv(8),4);
		//printf("MemoryManager::Allocate_Temp_Null enter time:%lld size:%lld align:%lld label:%d opt:%d file:%s line:%d\n",time(),$size,$align,$label,$option,$file,$line);
		
		if ($label == 2) {
			if(@g_in_test==0){
				//retry
				//ptrset(argv(1),4, 1);
				
				//assert(0);
			};
		};
		return 0;
	};
	onexit{
		//printf("MemoryManager::Allocate_Temp_Null exit time:%lld\n",time());
	};
};
hook("MemoryManager::Allocate_NonTemp_Null")
{
	onenter{
		//$ret:int = ptrget(argv(0),8);
		//$retry:int = ptrget(argv(1),4);
		$this:int = ptrget(argv(2),8);
		$size:int = ptrget(argv(3),8);
		$align:int = ptrget(argv(4),8);
		$label:int = ptrget(argv(5),4);
		$option:int = ptrget(argv(6),4);
		$file:string = ptrget(argv(7),8);
		$line:int = ptrget(argv(8),4);
		printf("MemoryManager::Allocate_NonTemp_Null enter time:%lld size:%lld align:%lld label:%d opt:%d file:%s line:%d\n",time(),$size,$align,$label,$option,$file,$line);
		
		//retry
		ptrset(argv(1),4, 1);
		
		assert(0);
		
		return 0;
	};
	onexit{
		printf("MemoryManager::Allocate_NonTemp_Null exit time:%lld\n",time());
	};
};
hook("PipelineStateCollection::PrecachePSOsProgressively")
{
	onenter{
		$a:int = ptrget(argv(1),8);
		$b:int = ptrget(argv(2),4);
		printf("PipelineStateCollection::PrecachePSOsProgressively enter time:%lld thread:%d batch:%d->256\n",time(),GetTID(),$b);
		ptrset(argv(2),4,256);
		return 0;
	};
	onexit{
		$r:int = ptrget(argv(0),4);
		printf("PipelineStateCollection::PrecachePSOsProgressively exit time:%lld ret:%d\n",time(),$r);
	};
};
hook("vk::MemoryAllocator::Allocate")
{
	onenter{
		
	};
	onexit{
		$r:int = ptrget(argv(0),8);
		if($r==0){
			assert(0);
		}
		else{
			//printf("vk::AllocMemory: %llx\n", $r);
		};
	};
};
hook("vk::MemoryAllocator::Free")
{
	onenter{
		$addr:int = ptrget(argv(2),8);
		//printf("vk::FreeMemory: %llx\n", $addr);
	};
	onexit{
	};
};
hook("vk::DataBuffer::CreateResource")
{
	onenter{
		
	};
	onexit{
		$r:int = ptrget(argv(0),8);
		if($r==0){
			assert(0);
		};
	};
};
hook("vk::DataBuffer::AccessBuffer")
{
	onenter{
		
	};
	onexit{
		$r:int = ptrget(argv(0),8);
		if($r==0){
			assert(0);
		};
	};
};
hook("UpdateMemoryBudget")
{
	onenter{
		$curTime:int = time();
		if($curTime - @g_last_time > 10000000){
			@g_last_time = $curTime;
			
			$heapIndex:int = ptrget(argv(1),4);
			$heapBudget:int = ptrget(argv(2),8);
			$heapUsage:int = ptrget(argv(3),8);
			$minHeadroomBytesEnable:int = ptrget(argv(4),8);
			$minHeadroomBytesDisable:int = ptrget(argv(5),8);
			$ix:int = ptrget(argv(6),4);
			$ct:int = ptrget(argv(7),4);
			printf("UpdateMemoryBudget: %d %d %lld %lld\n", $ix, $heapIndex, $heapBudget, $heapUsage);
		};
	};
	onexit{
	};
};
hook("RenderingCommandBufferState::GetAndCheckRT")
{
	onenter{
		/*
		$pindex:int = ptrget(argv(3),4);
		$pname:string = ptrget(argv(4),8);
		$desc:string = ptrget(argv(5),8);
		$bufname:string = ptrget(argv(6),8);
		if ($pindex != -1) {
			printf("GetAndCheckRT index:%d name:%s desc:%s buf:%s\n", $pindex, $pname, $desc, $bufname);
		};
		*/
	};
	onexit{
	};
};
hook("TlsfDuplicateFreeMemory")
{
	onenter{
		assert(0);
	};
	onexit{
	};
};
hook("LogOnTlsfAssert")
{
	onenter{
		assert(0);
	};
	onexit{
	};
};
hook("DynamicHeapAllocator::Allocate")
{
	onenter{
	};
	onexit{
		$addr:int = ptrget(argv(0),8);
		$this:int = ptrget(argv(1),8);
		$size:int = ptrget(argv(2),8);
		$align:int = ptrget(argv(3),4);
		$locking:int = ptrget(argv(4),1);
		$tlsf:int = ptrget(argv(5),1);
		//printf("DynamicHeapAllocator::Allocate exit time:%lld size:%lld align:%d locking:%d tlsf:%d addr:%llx\n",time(),$size,$align,$locking,$tlsf,$addr);
		if($size>=32 && $size<=64){
			printf("#DynamicHeapAllocator::Allocate exit time:%lld size:%lld align:%d locking:%d tlsf:%d addr:%llx\n",time(),$size,$align,$locking,$tlsf,$addr);
			//dumpstack("#DynamicHeapAllocator::Allocate");
		};
	};
};
hook("DynamicHeapAllocator::Deallocate")
{
	onenter{
		$this:int = ptrget(argv(0),8);
		$addr:int = ptrget(argv(1),8);
		$locking:int = ptrget(argv(2),1);
		$tlsf:int = ptrget(argv(3),1);
		//printf("DynamicHeapAllocator::Deallocate enter time:%lld locking:%d tlsf:%d addr:%llx\n",time(),$locking,$tlsf,$addr);
		$size:int = ptrget($addr-8,8);
		$realSize:int = $size & (~0x03);
		if($realSize>=32 && $realSize<=64){
			printf("#DynamicHeapAllocator::Deallocate enter time:%lld locking:%d tlsf:%d addr:%llx size:0x%llx\n",time(),$locking,$tlsf,$addr,$size);
			//dumpstack("#DynamicHeapAllocator::Deallocate");
		};
	};
	onexit{
		$this:int = ptrget(argv(0),8);
		$addr:int = ptrget(argv(1),8);
		$locking:int = ptrget(argv(2),1);
		$tlsf:int = ptrget(argv(3),1);
		//printf("DynamicHeapAllocator::Deallocate exit time:%lld locking:%d tlsf:%d addr:%llx\n",time(),$locking,$tlsf,$addr);
	};
};