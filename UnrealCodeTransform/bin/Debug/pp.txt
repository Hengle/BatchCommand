@@delimiter(script, "={:=", "=:}=");
@@pragma("once");
@@code
={:=

=:}=;
@@include("\"Runtime/Allocator/STLAllocator.h\"");
@@include("\"Runtime/SceneManager/UnityScene.h\"");
@@include("\"Runtime/Utilities/vector_set.h\"");
@@include("\"Runtime/Serialize/SerializeUtility.h\"");
@@include("\"Runtime/Serialize/TransferFunctions/SerializeTransfer.h\"");
@@include("\"Runtime/Serialize/TransferFunctions/StreamedBinaryRead.h\"");
@@include("\"Runtime/Serialize/TransferFunctions/StreamedBinaryWrite.h\"");
@@include("\"Runtime/Serialize/TransferFunctions/YAMLRead.h\"");
@@include("\"Runtime/Serialize/TransferFunctions/YAMLWrite.h\"");
@@include("<memory>");
@@code
={:=

class Object;
struct UndoContext;

typedef vector_set<UnitySceneHandle> UnitySceneHandleSet;

class UndoBase
{
public:

    DECLARE_SERIALIZE(UndoBase)

    /* When adding a new UndoTypeIdentifier, ensure that the new type is also included in UndoManager::CreateEmptyUndoOfType to allow them to be correctly serialized and deserialized */
    enum UndoTypeIdentifier
    {
        kNullUndo,
        kAssetRenameUndo,
        kAssetMoveUndo,
        kSetDefaultParentObjectUndo,
        kImporterChangeUndo,
        kPropertyDiffUndo,
        kSelectionUndo,
        kObjectUndo,
        kFileChangeUndo,
        kUndoSetName,
        kFakeUndo
    };

    enum UndoType
    {
        kEditModeSceneUndo,    // Undo for scene objects in edit mode.
        kPlayModeSceneUndo,    // Undo for scene objects in play mode.
        kAssetUndo,            // Undo for assets.
        kEditorObjectUndo      // Undo for objects with kDontSaveInEditor flag (e.g. Editor UI objects).
    };

    static UndoType DetermineUndoType(const Object* undoObject);
    static UndoType DetermineUndoType(const dynamic_array<const Object*>& undoObjects);

protected:
    UndoBase();
    virtual ~UndoBase();

public:
    const core::string& GetName() const { return m_Name; }
    void SetName(const core::string_ref& name) { m_Name = name; }

    virtual bool HasIdentifier(int identifier) { return false; }

    void SetGroup(int group) { m_UndoGroup = group; }
    int GetGroup() const { return m_UndoGroup; }

    UndoType GetUndoType() const { return m_UndoType; }
    void SetUndoType(UndoType undoType) { m_UndoType = undoType; }

    virtual bool IsPropertyDiffUndo() { return false; }
    virtual bool IsUndoSetName() { return false; }
    virtual bool IsObjectUndo() { return false; } // To separate ObjectUndo from CreatedObjectUndo types

    /// When collapsing multiple undos into one action, the name of the action with the highest priority is chosen
    /// (We never want to show selection undo to show up when Creating / Deleting objects)
    void SetNamePriority(int namePriority) { m_NamePriority = namePriority; }
    int GetNamePriority() const { return m_NamePriority; }

    bool IsFinalized() const { return m_IsFinalized; }
    void Finalize();

    // Should this undo be ignored when counting for undo levels.
    /// (Selection change is so small to store we just ignore them when counting undo levels)
    virtual bool IgnoreInUndoLevel() const { return false; }
    virtual void FillRecordDescription(core::string& description) const { description = GetName(); }
    virtual void PreApply(core::hash_set<GameObject*>& affectedGameObjects, bool isUndoing) {}
    virtual void ApplyUndo(UndoContext& ctx) = 0;
    virtual void ApplyRedo(UndoContext& ctx) = 0;
    virtual UndoTypeIdentifier GetUndoTypeIdentifier() = 0; // To ensure every undo type is given its own identifier for deserialisation purposes. Add new types to the enum UndoTypeIdentifier
    virtual void FinalizeUndo() {}

    virtual bool IsChangeRelevant() const { return true; }
    virtual bool CanPerformOperation() const { return true; }
    virtual void SetAllocatedSize() = 0; // TODO_UNDO This should be called automatically from Finalize once everything is tracked
    unsigned GetAllocatedSize() const { return m_UndoSize; }

    void SetMakesSceneDirty(bool registerUndoMakesSceneDirty) { m_RegisterUndoMakesSceneDirty = registerUndoMakesSceneDirty; }
    bool MakesSceneDirty() const { return m_RegisterUndoMakesSceneDirty; }

    void IncreaseScenesDirtiness();
    void DecreaseScenesDirtiness();

    void AddAffectedSceneHandle(UnitySceneHandle sceneHandle);
    void SetAffectedSceneHandles(const UnitySceneHandleSet& sceneHandles);
    const UnitySceneHandleSet& GetAffectedSceneHandles() const { return m_AffectedSceneHandles; }

    int GetUndoIndex() { return m_UndoIndex; }
    void SetUndoIndex(int index) { m_UndoIndex = index; }

    InstanceID GetUndoStackID() { return m_UndoStackId; }
    void SetUndoStackID(InstanceID stackId) { m_UndoStackId = stackId; }

    virtual void VirtualRedirectTransfer(StreamedBinaryWrite& transfer) = 0;
    virtual void VirtualRedirectTransfer(StreamedBinaryRead& transfer) = 0;
    virtual void VirtualRedirectTransfer(YAMLRead& transfer) = 0;
    virtual void VirtualRedirectTransfer(YAMLWrite& transfer) = 0;

protected:

    core::string        m_Name;
    int                 m_UndoGroup;                    // The group that this undo operation belongs to (only used by UndoManager)
    int                 m_NamePriority;                 // So we know the name to use if a bunch of undo operations are collapsed into a single operation
    UndoType            m_UndoType;
    UnitySceneHandleSet m_AffectedSceneHandles;         // List of the scene handles affected by this undo operation.
    unsigned            m_UndoSize;                     // Size of the undo
    bool                m_IsFinalized;
    bool                m_RegisterUndoMakesSceneDirty;  // Nearly all undo operations will dirty the scene when registered - the only exception at present is a createObjectUndo for a scriptable object
    int                 m_UndoIndex;                    // The index for this undo operation for serialization reference
    InstanceID          m_UndoStackId;                  // Identifier for this undo operation for deserialization

    template<typename T>
    friend void delete_internal(T* ptr, MemLabelRef label, const char* file, int line);
};

template<typename UndoType, typename ... Args>
std::shared_ptr<UndoType> CreateUndo(Args&& ... args)
{
    auto undo = UNITY_NEW(UndoType, kMemUndo)(std::forward<Args>(args)...);
    undo->SetUndoStackID(AllocateNextLowestInstanceID());

    // This is used to delete the undo object allocated above
    static const auto kDeleter = [](void* undoRawPtr)
        {
            UndoBase* undo = static_cast<UndoBase*>(undoRawPtr);
            UNITY_DELETE(undo, kMemUndo);
        };

    // This is used to allocated and deallocate std::shared_ptr internals. It is needed to make sure shared_ptr internals are allocated using kMemUndo memory label
    // TODO: When std::allocated_shared will be available on all platforms both kDeleter & kAllocator should be replaced by one allocator and do only one allocation
    static const auto kAllocator = STL_ALLOCATOR(kMemUndo, UndoType)();

    return std::shared_ptr<UndoType>(undo, kDeleter, kAllocator);
}

=:}=;
@@define("DECLARE_UNDO_SERIALIZE(x) 
public: 
    static const char* GetTypeString () { return #x; } 
    static bool MightContainPPtr () { return true; } 
    static bool AllowTransferOptimization () { return false; } 
    template<class TransferFunction> void Transfer (TransferFunction& transfer); 
    void VirtualRedirectTransfer (StreamedBinaryWrite& transfer) override { Transfer(transfer); }; 
    void VirtualRedirectTransfer (StreamedBinaryRead& transfer) override { Transfer(transfer); }; 
    void VirtualRedirectTransfer (YAMLRead& transfer) override { Transfer(transfer); }; 
    void VirtualRedirectTransfer (YAMLWrite& transfer) override { Transfer(transfer); };");
